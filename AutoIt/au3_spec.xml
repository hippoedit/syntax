<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="syntax.xslt"?>
<XMLConfigSettings>
  <FILEINFO author="Alexandr Cojocari" type="LangSpec"/>
  <SYNTAX id="au3" name="AutoIt" version="1.0" inherit="def_source" inherit_url="defsource_spec.xml" version="1.1">
    <SPECIFICATION>
      <FilePattern mask="*.au3;*.aut;"/>
      <Delimiters>~%=#|/:;&quot;'?</Delimiters>
      <Operators>&amp;*+--()[]=&lt;&gt;,.</Operators>
      <OpenClose>{}()[]</OpenClose>
      <Words init="A-Za-z_">0-9A-Za-z_--</Words>
      <EscapeChar>\</EscapeChar>
      <Bars navigation="true"/>
    </SPECIFICATION>
    <LABELS>
      <Label group="Exits" match="\&lt;Return\&gt;\s*(.*?)$" name="\1" descr="\1 \2;" navigation="false" marker="20" context="exit_all" visible="false"/>
      <Label group="Exits" match="\&lt;Exit\&gt;\s*(.*?)$" name="\1" descr="\1 \2;" navigation="false" marker="19" context="exit_scope" visible="false"/>
      <Label group="Function" match="^\s*Func\s+(\w+)(?:\s*(\([^)]*\)))" name="\1" descr="\1 \2" image="6" scope="1" style="function" highlight="\1"/>
      <Label group="Function" match="(\w+)\(" name="\1" descr="\1" navigation="false" context="function_call" style="function" highlight="\1" visible="false"/>
    </LABELS>
    <SCOPES>
      <Scope open="Func" close="EndFunc" has_name="true" separator="true"/>
      <Scope open="If" middle="Else" close="EndIf" strict="false">
        <Middle text="Then"/>
        <Middle text="ElseIf"/>
      </Scope>
      <Scope open="Select" middle="Case" close="EndSelect"/>
      <Scope open="For" middle="To" close="Next" close_lead="\s|^"/>
      <Scope open="Switch" middle="Case" close="EndSwitch"/>
      <Scope open="While" close="WEnd"/>
      <Scope open="Region" close="EndRegion" has_name="true" decoration="true">
        <Containers>
          <Open id="preprocessor"/>
        </Containers>
      </Scope>
    </SCOPES>
    <STYLES>
      <Style id="string" name="Strings" text="1" bold="0" italic="0" underline="0" clr="Strings" bkclr="#FFFFFFFF">
        <Containers>
          <Open id="preprocessor"/>
          <Open id="normal"/>
        </Containers>
        <Blocks>
          <Block open="'" close="'"/>
          <Block open="&quot;" close="&quot;"/>
        </Blocks>
      </Style>
      <Style id="comment" name="Comments" text="1" bold="0" italic="1" underline="0" clr="Comments" bkclr="#FFFFFFFF">
        <Containers>
          <Open id="preprocessor"/>
          <Open id="normal"/>
          <Close id="normal"/>
          <Close id="preprocessor"/>
          <Close id="todo"/>
        </Containers>
        <Blocks>
          <Block open=";" close="\n"/>
          <Block open="#cs" close="#ce"/>
          <Block open="#comments-start" close="#comments-end"/>
        </Blocks>
      </Style>
      <Style id="preprocessor" name="Preprocessor" bold="0" italic="0" underline="0" clr="Preprocessor" bkclr="#FFFFFFFF">
        <Blocks>
          <Block open="#" close="\n"/>
        </Blocks>
      </Style>
      <Style name="Preprocessor Keywords" bold="1" italic="0" underline="0" clr="#FFFFFFFF" bkclr="#FFFFFFFF" abstract="true">
        <Containers>
          <Open id="preprocessor"/>
        </Containers>
        <Keywords>
          <Keyword text="NoAutoIt3Execute"/>
          <Keyword text="NoTrayIcon"/>
          <Keyword text="OnAutoItStartRegister"/>
          <Keyword text="RequireAdmin"/>
          <Keyword text="ce"/>
          <Keyword text="comments-end"/>
          <Keyword text="comments-start"/>
          <Keyword text="cs"/>
          <Keyword text="endregion"/>
          <Keyword text="forcedef"/>
          <Keyword text="forceref"/>
          <Keyword text="include"/>
          <Keyword text="include-once"/>
          <Keyword text="list"/>
          <Keyword text="loadLibrary"/>
          <Keyword text="loadScript"/>
          <Keyword text="logFile"/>
          <Keyword text="region"/>
        </Keywords>
      </Style>
      <Style id="url" extend="true">
        <Containers>
          <Open id="normal" exclude="true"/>
          <Open id="string"/>
          <Open id="comment"/>
        </Containers>
      </Style>
      <Style id="number" extend="true">
        <Containers>
          <Open id="preprocessor"/>
        </Containers>
        <Blocks>
          <Block open="0x" noneof="0-9A-Fa-fU"/>
        </Blocks>
      </Style>
      <Style id="operator" extend="true">
        <Containers>
          <Open id="preprocessor"/>
        </Containers>
      </Style>      
      <Style id="variable" name="Variable" image="6" italic="0" underline="0" clr="Keyword4" bkclr="#FFFFFFFF">
        <Blocks>
          <Block open="$" close=""/>
        </Blocks>
      </Style>
      <Style id="property" name="Property" image="6" italic="0" underline="0" clr="Keyword4" bkclr="#FFFFFFFF">
        <Blocks>
          <Block open="." close=""/>
        </Blocks>
      </Style>
      <Style name="TODOs" id="todo" text="1" bold="1" italic="1" underline="0" clr="TODOs" bkclr="#FFFFFFFF" overview="1">
        <Containers>
          <Open id="comment"/>
        </Containers>
        <Blocks>
          <Block open="TODO" close="\n"/>
          <Block open="todo" close="\n"/>
        </Blocks>
      </Style>
      <Style id="keywords" name="Keywords" image="13" bold="0" italic="0" underline="0" clr="Keyword" bkclr="#FFFFFFFF">
        <Keywords>
          <Keyword text="And"/>
          <Keyword text="ByRef"/>
          <Keyword text="Case"/>
          <Keyword text="Const"/>
          <Keyword text="ContinueCase"/>
          <Keyword text="ContinueLoop"/>
          <Keyword text="Default"/>
          <Keyword text="Dim"/>
          <Keyword text="Do"/>
          <Keyword text="Else"/>
          <Keyword text="ElseIf"/>
          <Keyword text="EndFunc"/>
          <Keyword text="EndIf"/>
          <Keyword text="EndSelect"/>
          <Keyword text="EndSwitch"/>
          <Keyword text="EndWith"/>
          <Keyword text="Enum"/>
          <Keyword text="Exit"/>
          <Keyword text="ExitLoop"/>
          <Keyword text="For"/>
          <Keyword text="Func"/>
          <Keyword text="Global"/>
          <Keyword text="If"/>
          <Keyword text="In"/>
          <Keyword text="Local"/>
          <Keyword text="Next" lead="\s|^"/>
          <Keyword text="Not"/>
          <Keyword text="Or"/>
          <Keyword text="ReDim"/>
          <Keyword text="Return"/>
          <Keyword text="Select"/>
          <Keyword text="Static"/>
          <Keyword text="Step"/>
          <Keyword text="Switch"/>
          <Keyword text="Then"/>
          <Keyword text="To"/>
          <Keyword text="Until"/>
          <Keyword text="WEnd"/>
          <Keyword text="While"/>
          <Keyword text="With"/>
        </Keywords>
      </Style>
      <Style id="constants" name="Constants" image="7" bold="0" italic="0" underline="0" clr="Keyword" bkclr="#FFFFFFFF">
        <Keywords>
          <Keyword text="False"/>
          <Keyword text="True"/>
        </Keywords>
      </Style>
      <Style id="function" name="Functions" image="18" bold="0" italic="0" underline="0" clr="Keyword3" bkclr="#FFFFFFFF">
        <Keywords pattern="%CurrentWord%(%|%)">
          <Keyword text="ACos" descr="ACos( expression )\n\iCalculates the arcCosine of a number.\i0" pattern="ACos( expression )"/>
          <Keyword text="ASin" descr="ASin( expression )\n\iCalculates the arcsine of a number.\i0" pattern="ASin( expression )"/>
          <Keyword text="ATan" descr="ATan( expression )\n\iCalculates the arctangent of a number.\i0" pattern="ATan( expression )"/>
          <Keyword text="Abs" descr="Abs( expression )\n\iCalculates the absolute value of a number.\i0" pattern="Abs( expression )"/>
          <Keyword text="AdlibRegister" descr="AdlibRegister( &quot;function&quot; , time )\n\iRegisters an Adlib function.\i0" pattern="AdlibRegister( &quot;function&quot; , time )"/>
          <Keyword text="AdlibUnRegister" descr="AdlibUnRegister( &quot;function&quot; )\n\iUnregisters an adlib function.\i0" pattern="AdlibUnRegister( &quot;function&quot; )"/>
          <Keyword text="Asc" descr="Asc( &quot;char&quot; )\n\iReturns the ASCII code of a character.\i0" pattern="Asc( &quot;char&quot; )"/>
          <Keyword text="AscW" descr="AscW( &quot;char&quot; )\n\iReturns the unicode code of a character.\i0" pattern="AscW( &quot;char&quot; )"/>
          <Keyword text="Assign" descr="Assign( &quot;varname&quot; , &quot;data&quot; , flag )\n\iAssigns a variable by name with the data.\i0" pattern="Assign( &quot;varname&quot; , &quot;data&quot; , flag )"/>
          <Keyword text="AutoItSetOption"/>
          <Keyword text="AutoItWinGetTitle" descr="AutoItWinGetTitle()\n\iRetrieves the title of the AutoIt window.\i0" pattern="AutoItWinGetTitle()"/>
          <Keyword text="AutoItWinSetTitle" descr="AutoItWinSetTitle( &quot;newtitle&quot; )\n\iChanges the title of the AutoIt window.\i0" pattern="AutoItWinSetTitle( &quot;newtitle&quot; )"/>
          <Keyword text="Beep" descr="Beep( Frequency , Duration )\n\iPlays back a beep to the user.\i0" pattern="Beep( Frequency , Duration )"/>
          <Keyword text="Binary" descr="Binary( expression )\n\iReturns the binary representation of an expression.\i0" pattern="Binary( expression )"/>
          <Keyword text="BinaryLen" descr="BinaryLen( binary )\n\iReturns the number of bytes in a binary variant.\i0" pattern="BinaryLen( binary )"/>
          <Keyword text="BinaryMid" descr="BinaryMid( binary , start , count )\n\iExtracts a number of bytes from a binary variant.\i0" pattern="BinaryMid( binary , start , count )"/>
          <Keyword text="BinaryToString" descr="BinaryToString( expression , flag )\n\iConverts a binary variant into a string.\i0" pattern="BinaryToString( expression , flag )"/>
          <Keyword text="BitAND" descr="BitAND( value1 , value2 , value n )\n\iPerforms a bitwise AND operation.\i0" pattern="BitAND( value1 , value2 , value n )"/>
          <Keyword text="BitNOT" descr="BitNOT( value )\n\iPerforms a bitwise NOT operation.\i0" pattern="BitNOT( value )"/>
          <Keyword text="BitOR" descr="BitOR( value1 , value2 , value n )\n\iPerforms a bitwise OR operation.\i0" pattern="BitOR( value1 , value2 , value n )"/>
          <Keyword text="BitRotate" descr="BitRotate( value , shift , size )\n\iPerforms a bit shifting operation, with rotation.\i0" pattern="BitRotate( value , shift , size )"/>
          <Keyword text="BitShift" descr="BitShift( value , shift )\n\iPerforms a bit shifting operation.\i0" pattern="BitShift( value , shift )"/>
          <Keyword text="BitXOR" descr="BitXOR( value1 , value2 , value n )\n\iPerforms a bitwise exclusive OR (XOR) operation.\i0" pattern="BitXOR( value1 , value2 , value n )"/>
          <Keyword text="BlockInput" descr="BlockInput( flag )\n\iDisable/enable the mouse and keyboard.\i0" pattern="BlockInput( flag )"/>
          <Keyword text="Break" descr="Break( mode )\n\iEnables or disables the users&apos; ability to exit a script from the tray icon menu.\i0" pattern="Break( mode )"/>
          <Keyword text="CDTray" descr="CDTray( &quot;drive&quot; , &quot;status&quot; )\n\iOpens or closes the CD tray.\i0" pattern="CDTray( &quot;drive&quot; , &quot;status&quot; )"/>
          <Keyword text="Call" descr="Call( &quot;function&quot; , param1 , param2 , param&lt;i&gt;N&lt;/i&gt; )\n\iCalls a user-defined function contained in a string parameter.\i0" pattern="Call( &quot;function&quot; , param1 , param2 , param&lt;i&gt;N&lt;/i&gt; )"/>
          <Keyword text="Ceiling" descr="Ceiling( expression )\n\iReturns a number rounded up to the next integer.\i0" pattern="Ceiling( expression )"/>
          <Keyword text="Chr" descr="Chr( ASCIIcode )\n\iReturns a character corresponding to an ASCII code.\i0" pattern="Chr( ASCIIcode )"/>
          <Keyword text="ChrW" descr="ChrW( UNICODEcode )\n\iReturns a character corresponding to a unicode code.\i0" pattern="ChrW( UNICODEcode )"/>
          <Keyword text="ClipGet" descr="ClipGet()\n\iRetrieves text from the clipboard.\i0" pattern="ClipGet()"/>
          <Keyword text="ClipPut" descr="ClipPut( &quot;value&quot; )\n\iWrites text to the clipboard.\i0" pattern="ClipPut( &quot;value&quot; )"/>
          <Keyword text="ConsoleRead" descr="ConsoleRead( peek = false , binary = false )\n\iRead from the STDIN stream of the AutoIt script process.\i0" pattern="ConsoleRead( peek = false , binary = false )"/>
          <Keyword text="ConsoleWrite" descr="ConsoleWrite( &quot;data&quot; )\n\iWrites data to the STDOUT stream. Some text editors can read this stream as can other programs which may be expecting data on this stream.\i0" pattern="ConsoleWrite( &quot;data&quot; )"/>
          <Keyword text="ConsoleWriteError" descr="ConsoleWriteError( &quot;data&quot; )\n\iWrites data to the STDERR stream. Some text editors can read this stream as can other programs which may be expecting data on this stream.\i0" pattern="ConsoleWriteError( &quot;data&quot; )"/>
          <Keyword text="ControlClick" descr="ControlClick( &quot;title&quot; , &quot;text&quot; , controlID , button , clicks , x , y )\n\iSends a mouse click command to a given control.\i0" pattern="ControlClick( &quot;title&quot; , &quot;text&quot; , controlID , button , clicks , x , y )"/>
          <Keyword text="ControlCommand"/>
          <Keyword text="ControlDisable" descr="ControlDisable( &quot;title&quot; , &quot;text&quot; , controlID )\n\iDisables or &quot;grays-out&quot; a control.\i0" pattern="ControlDisable( &quot;title&quot; , &quot;text&quot; , controlID )"/>
          <Keyword text="ControlEnable" descr="ControlEnable( &quot;title&quot; , &quot;text&quot; , controlID )\n\iEnables a &quot;grayed-out&quot; control.\i0" pattern="ControlEnable( &quot;title&quot; , &quot;text&quot; , controlID )"/>
          <Keyword text="ControlFocus" descr="ControlFocus( &quot;title&quot; , &quot;text&quot; , controlID )\n\iSets input focus to a given control on a window.\i0" pattern="ControlFocus( &quot;title&quot; , &quot;text&quot; , controlID )"/>
          <Keyword text="ControlGetFocus" descr="ControlGetFocus( &quot;title&quot; , &quot;text&quot; )\n\iReturns the ControlRef# of the control that has keyboard focus within a specified window.\i0" pattern="ControlGetFocus( &quot;title&quot; , &quot;text&quot; )"/>
          <Keyword text="ControlGetHandle" descr="ControlGetHandle( &quot;title&quot; , &quot;text&quot; , controlID )\n\iRetrieves the internal handle of a control.\i0" pattern="ControlGetHandle( &quot;title&quot; , &quot;text&quot; , controlID )"/>
          <Keyword text="ControlGetPos" descr="ControlGetPos( &quot;title&quot; , &quot;text&quot; , controlID )\n\iRetrieves the position and size of a control relative to its window.\i0" pattern="ControlGetPos( &quot;title&quot; , &quot;text&quot; , controlID )"/>
          <Keyword text="ControlGetText" descr="ControlGetText( &quot;title&quot; , &quot;text&quot; , controlID )\n\iRetrieves text from a control.\i0" pattern="ControlGetText( &quot;title&quot; , &quot;text&quot; , controlID )"/>
          <Keyword text="ControlHide" descr="ControlHide( &quot;title&quot; , &quot;text&quot; , controlID )\n\iHides a control.\i0" pattern="ControlHide( &quot;title&quot; , &quot;text&quot; , controlID )"/>
          <Keyword text="ControlListView"/>
          <Keyword text="ControlMove" descr="ControlMove( &quot;title&quot; , &quot;text&quot; , controlID , x , y , width , height )\n\iMoves a control within a window.\i0" pattern="ControlMove( &quot;title&quot; , &quot;text&quot; , controlID , x , y , width , height )"/>
          <Keyword text="ControlSend" descr="ControlSend( &quot;title&quot; , &quot;text&quot; , controlID , &quot;string&quot; , flag )\n\iSends a string of characters to a control.\i0" pattern="ControlSend( &quot;title&quot; , &quot;text&quot; , controlID , &quot;string&quot; , flag )"/>
          <Keyword text="ControlSetText" descr="ControlSetText( &quot;title&quot; , &quot;text&quot; , controlID , &quot;new text&quot; , flag )\n\iSets text of a control.\i0" pattern="ControlSetText( &quot;title&quot; , &quot;text&quot; , controlID , &quot;new text&quot; , flag )"/>
          <Keyword text="ControlShow" descr="ControlShow( &quot;title&quot; , &quot;text&quot; , controlID )\n\iShows a control that was hidden.\i0" pattern="ControlShow( &quot;title&quot; , &quot;text&quot; , controlID )"/>
          <Keyword text="ControlTreeView" descr="ControlTreeView( &quot;title&quot; , &quot;text&quot; , controlID , &quot;command&quot; , option1 , option2 )\n\iSends a command to a TreeView32 control.\i0" pattern="ControlTreeView( &quot;title&quot; , &quot;text&quot; , controlID , &quot;command&quot; , option1 , option2 )"/>
          <Keyword text="Cos" descr="Cos( expression )\n\iCalculates the cosine of a number.\i0" pattern="Cos( expression )"/>
          <Keyword text="Dec" descr="Dec( &quot;hex&quot; , flag )\n\iReturns a numeric representation of a hexadecimal string.\i0" pattern="Dec( &quot;hex&quot; , flag )"/>
          <Keyword text="DirCopy" descr="DirCopy( &quot;source dir&quot; , &quot;dest dir&quot; , flag )\n\iCopies a directory and all sub-directories and files (Similar to xcopy).\i0" pattern="DirCopy( &quot;source dir&quot; , &quot;dest dir&quot; , flag )"/>
          <Keyword text="DirCreate" descr="DirCreate( &quot;path&quot; )\n\iCreates a directory/folder.\i0" pattern="DirCreate( &quot;path&quot; )"/>
          <Keyword text="DirGetSize" descr="DirGetSize( &quot;path&quot; , flag )\n\iReturns the size in bytes of a given directory.\i0" pattern="DirGetSize( &quot;path&quot; , flag )"/>
          <Keyword text="DirMove" descr="DirMove( &quot;source dir&quot; , &quot;dest dir&quot; , flag )\n\iMoves a directory and all sub-directories and files.\i0" pattern="DirMove( &quot;source dir&quot; , &quot;dest dir&quot; , flag )"/>
          <Keyword text="DirRemove" descr="DirRemove( &quot;path&quot; , recurse )\n\iDeletes a directory/folder.\i0" pattern="DirRemove( &quot;path&quot; , recurse )"/>
          <Keyword text="DllCall" descr="DllCall( &quot;dll&quot; , &quot;return type&quot; , &quot;function&quot; , type1 , param1 , type n , param n )\n\iDynamically calls a function in a DLL.\i0" pattern="DllCall( &quot;dll&quot; , &quot;return type&quot; , &quot;function&quot; , type1 , param1 , type n , param n )"/>
          <Keyword text="DllCallAddress" descr="DllCallAddress( &quot;return type&quot; , address , type1 , param1 , type n , param n )\n\iDynamically calls a function at a specific memory address. &lt;div class=&quot;experimental&quot;&gt;Warning: This is an advanced function. Incorrect use of this function may cause AutoIt to crash. Before using this function make sure &lt;a href=&quot;DllCall.htm&quot;&gt;DllCall()&lt;/a&gt; doesn&apos;t do what you need.&lt;/div&gt;\i0" pattern="DllCallAddress( &quot;return type&quot; , address , type1 , param1 , type n , param n )"/>
          <Keyword text="DllCallbackFree" descr="DllCallbackFree( handle )\n\iFrees a previously created handle created with DllCallbackRegister.\i0" pattern="DllCallbackFree( handle )"/>
          <Keyword text="DllCallbackGetPtr" descr="DllCallbackGetPtr( handle )\n\iReturns the pointer to a callback function that can be passed to the Win32 API.\i0" pattern="DllCallbackGetPtr( handle )"/>
          <Keyword text="DllCallbackRegister" descr="DllCallbackRegister( &quot;function&quot; , &quot;return type&quot; , &quot;params&quot; )\n\iCreates a user-defined DLL Callback function.\i0" pattern="DllCallbackRegister( &quot;function&quot; , &quot;return type&quot; , &quot;params&quot; )"/>
          <Keyword text="DllClose" descr="DllClose( dllhandle )\n\iCloses a previously opened DLL.\i0" pattern="DllClose( dllhandle )"/>
          <Keyword text="DllOpen" descr="DllOpen( &quot;filename&quot; )\n\iOpens a DLL file for use in DllCall.\i0" pattern="DllOpen( &quot;filename&quot; )"/>
          <Keyword text="DllStructCreate" descr="DllStructCreate( Struct , Pointer )\n\iCreates a C/C++ style structure to be used in DllCall.\i0" pattern="DllStructCreate( Struct , Pointer )"/>
          <Keyword text="DllStructGetData" descr="DllStructGetData( Struct , Element , index )\n\iReturns the data of an element of the struct.\i0" pattern="DllStructGetData( Struct , Element , index )"/>
          <Keyword text="DllStructGetPtr" descr="DllStructGetPtr( Struct , Element )\n\iReturns the pointer to the struct or an element in the struct.\i0" pattern="DllStructGetPtr( Struct , Element )"/>
          <Keyword text="DllStructGetSize" descr="DllStructGetSize( Struct )\n\iReturns the size of the struct in bytes.\i0" pattern="DllStructGetSize( Struct )"/>
          <Keyword text="DllStructSetData" descr="DllStructSetData( Struct , Element , value , index )\n\iSets the data in of an element in the struct.\i0" pattern="DllStructSetData( Struct , Element , value , index )"/>
          <Keyword text="DriveGetDrive" descr="DriveGetDrive( &quot;type&quot; )\n\iReturns an array containing the enumerated drives.\i0" pattern="DriveGetDrive( &quot;type&quot; )"/>
          <Keyword text="DriveGetFileSystem" descr="DriveGetFileSystem( &quot;path&quot; )\n\iReturns File System Type of a drive.\i0" pattern="DriveGetFileSystem( &quot;path&quot; )"/>
          <Keyword text="DriveGetLabel" descr="DriveGetLabel( &quot;path&quot; )\n\iReturns Volume Label of a drive, if it has one.\i0" pattern="DriveGetLabel( &quot;path&quot; )"/>
          <Keyword text="DriveGetSerial" descr="DriveGetSerial( &quot;path&quot; )\n\iReturns Serial Number of a drive.\i0" pattern="DriveGetSerial( &quot;path&quot; )"/>
          <Keyword text="DriveGetType" descr="DriveGetType( &quot;path&quot; )\n\iReturns drive type.\i0" pattern="DriveGetType( &quot;path&quot; )"/>
          <Keyword text="DriveMapAdd" descr="DriveMapAdd( &quot;device&quot; , &quot;remote share&quot; , flags , &quot;user&quot; , &quot;password&quot; )\n\iMaps a network drive.\i0" pattern="DriveMapAdd( &quot;device&quot; , &quot;remote share&quot; , flags , &quot;user&quot; , &quot;password&quot; )"/>
          <Keyword text="DriveMapDel" descr="DriveMapDel( &quot;drive&quot; )\n\iDisconnects a network drive.\i0" pattern="DriveMapDel( &quot;drive&quot; )"/>
          <Keyword text="DriveMapGet" descr="DriveMapGet( &quot;device&quot; )\n\iRetrieves the details of a mapped drive.\i0" pattern="DriveMapGet( &quot;device&quot; )"/>
          <Keyword text="DriveSetLabel" descr="DriveSetLabel( &quot;path&quot; , &quot;label&quot; )\n\iSets the Volume Label of a drive.\i0" pattern="DriveSetLabel( &quot;path&quot; , &quot;label&quot; )"/>
          <Keyword text="DriveSpaceFree" descr="DriveSpaceFree( &quot;path&quot; )\n\iReturns the free disk space of a path in Megabytes.\i0" pattern="DriveSpaceFree( &quot;path&quot; )"/>
          <Keyword text="DriveSpaceTotal" descr="DriveSpaceTotal( &quot;path&quot; )\n\iReturns the total disk space of a path in Megabytes.\i0" pattern="DriveSpaceTotal( &quot;path&quot; )"/>
          <Keyword text="DriveStatus" descr="DriveStatus( &quot;path&quot; )\n\iReturns the status of the drive as a string.\i0" pattern="DriveStatus( &quot;path&quot; )"/>
          <Keyword text="EnvGet" descr="EnvGet( &quot;envvariable&quot; )\n\iRetrieves an environment variable.\i0" pattern="EnvGet( &quot;envvariable&quot; )"/>
          <Keyword text="EnvSet" descr="EnvSet( &quot;envvariable&quot; , &quot;value&quot; )\n\iWrites an environment variable.\i0" pattern="EnvSet( &quot;envvariable&quot; , &quot;value&quot; )"/>
          <Keyword text="EnvUpdate" descr="EnvUpdate()\n\iRefreshes the OS environment.\i0" pattern="EnvUpdate()"/>
          <Keyword text="Eval" descr="Eval( string )\n\iReturn the value of the variable defined by an string.\i0" pattern="Eval( string )"/>
          <Keyword text="Execute" descr="Execute( string )\n\iExecute an expression.\i0" pattern="Execute( string )"/>
          <Keyword text="Exp" descr="Exp( expression )\n\iCalculates &lt;i&gt;&lt;b&gt;e&lt;/b&gt;&lt;/i&gt; to the power of a number.\i0" pattern="Exp( expression )"/>
          <Keyword text="FileChangeDir" descr="FileChangeDir( &quot;path&quot; )\n\iChanges the current working directory.\i0" pattern="FileChangeDir( &quot;path&quot; )"/>
          <Keyword text="FileClose" descr="FileClose( &quot;filehandle&quot; )\n\iCloses a previously opened text file.\i0" pattern="FileClose( &quot;filehandle&quot; )"/>
          <Keyword text="FileCopy" descr="FileCopy( &quot;source&quot; , &quot;dest&quot; , flag )\n\iCopies one or more files.\i0" pattern="FileCopy( &quot;source&quot; , &quot;dest&quot; , flag )"/>
          <Keyword text="FileCreateNTFSLink" descr="FileCreateNTFSLink( &quot;source&quot; , &quot;hardlink&quot; , flag )\n\iCreates an NTFS hardlink to a file or a directory\i0" pattern="FileCreateNTFSLink( &quot;source&quot; , &quot;hardlink&quot; , flag )"/>
          <Keyword text="FileCreateShortcut" descr="FileCreateShortcut( &quot;file&quot; , &quot;lnk&quot; , &quot;workdir&quot; , &quot;args&quot; , &quot;desc&quot; , &quot;icon&quot; , &quot;hotkey&quot; , icon number , state )\n\iCreates a shortcut (.lnk) to a file.\i0" pattern="FileCreateShortcut( &quot;file&quot; , &quot;lnk&quot; , &quot;workdir&quot; , &quot;args&quot; , &quot;desc&quot; , &quot;icon&quot; , &quot;hotkey&quot; , icon number , state )"/>
          <Keyword text="FileDelete" descr="FileDelete( &quot;path&quot; )\n\iDelete one or more files.\i0" pattern="FileDelete( &quot;path&quot; )"/>
          <Keyword text="FileExists" descr="FileExists( &quot;path&quot; )\n\iChecks if a file or directory exists.\i0" pattern="FileExists( &quot;path&quot; )"/>
          <Keyword text="FileFindFirstFile" descr="FileFindFirstFile( &quot;filename&quot; )\n\iReturns a search &quot;handle&quot; according to file search string.\i0" pattern="FileFindFirstFile( &quot;filename&quot; )"/>
          <Keyword text="FileFindNextFile" descr="FileFindNextFile( search )\n\iReturns a filename according to a previous call to FileFindFirstFile.\i0" pattern="FileFindNextFile( search )"/>
          <Keyword text="FileFlush" descr="FileFlush( &quot;filehandle&quot; )\n\iFlushes the file&apos;s buffer to disk.\i0" pattern="FileFlush( &quot;filehandle&quot; )"/>
          <Keyword text="FileGetAttrib" descr="FileGetAttrib( &quot;filename&quot; )\n\iReturns a code string representing a file&apos;s attributes.\i0" pattern="FileGetAttrib( &quot;filename&quot; )"/>
          <Keyword text="FileGetEncoding" descr="FileGetEncoding( &quot;filehandle/filename&quot; , mode )\n\iDetermines the text encoding used in a file.\i0" pattern="FileGetEncoding( &quot;filehandle/filename&quot; , mode )"/>
          <Keyword text="FileGetLongName" descr="FileGetLongName( &quot;file&quot; , flag )\n\iReturns the long path+name of the path+name passed.\i0" pattern="FileGetLongName( &quot;file&quot; , flag )"/>
          <Keyword text="FileGetPos" descr="FileGetPos( &quot;filehandle&quot; )\n\iRetrieves the current file position.\i0" pattern="FileGetPos( &quot;filehandle&quot; )"/>
          <Keyword text="FileGetShortName" descr="FileGetShortName( &quot;file&quot; , flag )\n\iReturns the 8.3 short path+name of the path+name passed.\i0" pattern="FileGetShortName( &quot;file&quot; , flag )"/>
          <Keyword text="FileGetShortcut" descr="FileGetShortcut( &quot;lnk&quot; )\n\iRetrieves details about a shortcut.\i0" pattern="FileGetShortcut( &quot;lnk&quot; )"/>
          <Keyword text="FileGetSize" descr="FileGetSize( &quot;filename&quot; )\n\iReturns the size of a file in bytes.\i0" pattern="FileGetSize( &quot;filename&quot; )"/>
          <Keyword text="FileGetTime" descr="FileGetTime( &quot;filename&quot; , option , format )\n\iReturns the time and date information for a file.\i0" pattern="FileGetTime( &quot;filename&quot; , option , format )"/>
          <Keyword text="FileGetVersion" descr="FileGetVersion( &quot;filename&quot; , &quot;stringname&quot; )\n\iReturns the &quot;File&quot; version information.\i0" pattern="FileGetVersion( &quot;filename&quot; , &quot;stringname&quot; )"/>
          <Keyword text="FileInstall" descr="FileInstall( &quot;source&quot; , &quot;dest&quot; , flag )\n\iInclude and install a file with the compiled script.\i0" pattern="FileInstall( &quot;source&quot; , &quot;dest&quot; , flag )"/>
          <Keyword text="FileMove" descr="FileMove( &quot;source&quot; , &quot;dest&quot; , flag )\n\iMoves one or more files\i0" pattern="FileMove( &quot;source&quot; , &quot;dest&quot; , flag )"/>
          <Keyword text="FileOpen" descr="FileOpen( &quot;filename&quot; , mode )\n\iOpens a text file for reading or writing.\i0" pattern="FileOpen( &quot;filename&quot; , mode )"/>
          <Keyword text="FileOpenDialog" descr="FileOpenDialog( &quot;title&quot; , &quot;init dir&quot; , &quot;filter&quot; , options , &quot;default name&quot; , hwnd )\n\iInitiates a Open File Dialog.\i0" pattern="FileOpenDialog( &quot;title&quot; , &quot;init dir&quot; , &quot;filter&quot; , options , &quot;default name&quot; , hwnd )"/>
          <Keyword text="FileRead" descr="FileRead( &quot;filehandle/filename&quot; , count )\n\iRead in a number of characters from a previously opened text file.\i0" pattern="FileRead( &quot;filehandle/filename&quot; , count )"/>
          <Keyword text="FileReadLine" descr="FileReadLine( &quot;filehandle/filename&quot; , line )\n\iRead in a line of text from a previously opened text file.\i0" pattern="FileReadLine( &quot;filehandle/filename&quot; , line )"/>
          <Keyword text="FileRecycle" descr="FileRecycle( &quot;source&quot; )\n\iSends a file or directory to the recycle bin.\i0" pattern="FileRecycle( &quot;source&quot; )"/>
          <Keyword text="FileRecycleEmpty" descr="FileRecycleEmpty( &quot;source&quot; )\n\iEmpties the recycle bin.\i0" pattern="FileRecycleEmpty( &quot;source&quot; )"/>
          <Keyword text="FileSaveDialog" descr="FileSaveDialog( &quot;title&quot; , &quot;init dir&quot; , &quot;filter&quot; , options , &quot;default name&quot; , hwnd )\n\iInitiates a Save File Dialog.\i0" pattern="FileSaveDialog( &quot;title&quot; , &quot;init dir&quot; , &quot;filter&quot; , options , &quot;default name&quot; , hwnd )"/>
          <Keyword text="FileSelectFolder" descr="FileSelectFolder( &quot;dialog text&quot; , &quot;root dir&quot; , flag , &quot;initial dir&quot; , hwnd )\n\iInitiates a Browse For Folder dialog.\i0" pattern="FileSelectFolder( &quot;dialog text&quot; , &quot;root dir&quot; , flag , &quot;initial dir&quot; , hwnd )"/>
          <Keyword text="FileSetAttrib" descr="FileSetAttrib( &quot;file pattern&quot; , &quot;+-RASHNOT&quot; , recurse )\n\iSets the attributes of one or more files.\i0" pattern="FileSetAttrib( &quot;file pattern&quot; , &quot;+-RASHNOT&quot; , recurse )"/>
          <Keyword text="FileSetPos" descr="FileSetPos( &quot;filehandle&quot; , offset , origin )\n\iSets the current file position.\i0" pattern="FileSetPos( &quot;filehandle&quot; , offset , origin )"/>
          <Keyword text="FileSetTime" descr="FileSetTime( &quot;file pattern&quot; , &quot;time&quot; , type , recurse )\n\iSets the timestamp of one of more files.\i0" pattern="FileSetTime( &quot;file pattern&quot; , &quot;time&quot; , type , recurse )"/>
          <Keyword text="FileWrite" descr="FileWrite( &quot;filehandle/filename&quot; , &quot;text/data&quot; )\n\iAppend a text/data to the end of a previously opened file.\i0" pattern="FileWrite( &quot;filehandle/filename&quot; , &quot;text/data&quot; )"/>
          <Keyword text="FileWriteLine" descr="FileWriteLine( &quot;filehandle/filename&quot; , &quot;line&quot; )\n\iAppend a line of text to the end of a previously opened text file.\i0" pattern="FileWriteLine( &quot;filehandle/filename&quot; , &quot;line&quot; )"/>
          <Keyword text="Floor" descr="Floor( expression )\n\iReturns a number rounded down to the closest integer.\i0" pattern="Floor( expression )"/>
          <Keyword text="FtpSetProxy" descr="FtpSetProxy( mode , &quot;proxy:port&quot; , &quot;username&quot; , &quot;password&quot; )\n\iSets the internet proxy to use for ftp access.\i0" pattern="FtpSetProxy( mode , &quot;proxy:port&quot; , &quot;username&quot; , &quot;password&quot; )"/>
          <Keyword text="GUICreate" descr="GUICreate( &quot;title&quot; , width , height , left , top , style , exStyle , parent )\n\iCreate a GUI window.\i0" pattern="GUICreate( &quot;title&quot; , width , height , left , top , style , exStyle , parent )"/>
          <Keyword text="GUICtrlCreateAvi" descr="GUICtrlCreateAvi( filename , subfileid , left , top , width , height , style , exStyle )\n\iCreates an AVI video control for the GUI.\i0" pattern="GUICtrlCreateAvi( filename , subfileid , left , top , width , height , style , exStyle )"/>
          <Keyword text="GUICtrlCreateButton" descr="GUICtrlCreateButton( &quot;text&quot; , left , top , width , height , style , exStyle )\n\iCreates a Button control for the GUI.\i0" pattern="GUICtrlCreateButton( &quot;text&quot; , left , top , width , height , style , exStyle )"/>
          <Keyword text="GUICtrlCreateCheckbox" descr="GUICtrlCreateCheckbox( &quot;text&quot; , left , top , width , height , style , exStyle )\n\iCreates a Checkbox control for the GUI.\i0" pattern="GUICtrlCreateCheckbox( &quot;text&quot; , left , top , width , height , style , exStyle )"/>
          <Keyword text="GUICtrlCreateCombo" descr="GUICtrlCreateCombo( &quot;text&quot; , left , top , width , height , style , exStyle )\n\iCreates a ComboBox control for the GUI.\i0" pattern="GUICtrlCreateCombo( &quot;text&quot; , left , top , width , height , style , exStyle )"/>
          <Keyword text="GUICtrlCreateContextMenu" descr="GUICtrlCreateContextMenu( controlID )\n\iCreates a context menu for a control or entire GUI window.\i0" pattern="GUICtrlCreateContextMenu( controlID )"/>
          <Keyword text="GUICtrlCreateDate" descr="GUICtrlCreateDate( &quot;text&quot; , left , top , width , height , style , exStyle )\n\iCreates a date control for the GUI.\i0" pattern="GUICtrlCreateDate( &quot;text&quot; , left , top , width , height , style , exStyle )"/>
          <Keyword text="GUICtrlCreateDummy" descr="GUICtrlCreateDummy()\n\iCreates a Dummy control for the GUI.\i0" pattern="GUICtrlCreateDummy()"/>
          <Keyword text="GUICtrlCreateEdit" descr="GUICtrlCreateEdit( &quot;text&quot; , left , top , width , height , style , exStyle )\n\iCreates an Edit control for the GUI.\i0" pattern="GUICtrlCreateEdit( &quot;text&quot; , left , top , width , height , style , exStyle )"/>
          <Keyword text="GUICtrlCreateGraphic" descr="GUICtrlCreateGraphic( left , top , width , height , style )\n\iCreates a Graphic control for the GUI.\i0" pattern="GUICtrlCreateGraphic( left , top , width , height , style )"/>
          <Keyword text="GUICtrlCreateGroup" descr="GUICtrlCreateGroup( &quot;text&quot; , left , top , width , height , style , exStyle )\n\iCreates a Group control for the GUI.\i0" pattern="GUICtrlCreateGroup( &quot;text&quot; , left , top , width , height , style , exStyle )"/>
          <Keyword text="GUICtrlCreateIcon" descr="GUICtrlCreateIcon( filename , iconName , left , top , width , height , style , exStyle )\n\iCreates an Icon control for the GUI.\i0" pattern="GUICtrlCreateIcon( filename , iconName , left , top , width , height , style , exStyle )"/>
          <Keyword text="GUICtrlCreateInput" descr="GUICtrlCreateInput( &quot;text&quot; , left , top , width , height , style , exStyle )\n\iCreates an Input control for the GUI.\i0" pattern="GUICtrlCreateInput( &quot;text&quot; , left , top , width , height , style , exStyle )"/>
          <Keyword text="GUICtrlCreateLabel" descr="GUICtrlCreateLabel( &quot;text&quot; , left , top , width , height , style , exStyle )\n\iCreates a static Label control for the GUI.\i0" pattern="GUICtrlCreateLabel( &quot;text&quot; , left , top , width , height , style , exStyle )"/>
          <Keyword text="GUICtrlCreateList" descr="GUICtrlCreateList( &quot;text&quot; , left , top , width , height , style , exStyle )\n\iCreates a List control for the GUI.\i0" pattern="GUICtrlCreateList( &quot;text&quot; , left , top , width , height , style , exStyle )"/>
          <Keyword text="GUICtrlCreateListView" descr="GUICtrlCreateListView( &quot;text&quot; , left , top , width , height , style , exStyle )\n\iCreates a ListView control for the GUI.\i0" pattern="GUICtrlCreateListView( &quot;text&quot; , left , top , width , height , style , exStyle )"/>
          <Keyword text="GUICtrlCreateListViewItem" descr="GUICtrlCreateListViewItem( &quot;text&quot; , listviewID )\n\iCreates a ListView item.\i0" pattern="GUICtrlCreateListViewItem( &quot;text&quot; , listviewID )"/>
          <Keyword text="GUICtrlCreateMenu" descr="GUICtrlCreateMenu( &quot;submenutext&quot; , menuID , menuentry )\n\iCreates a Menu control for the GUI.\i0" pattern="GUICtrlCreateMenu( &quot;submenutext&quot; , menuID , menuentry )"/>
          <Keyword text="GUICtrlCreateMenuItem" descr="GUICtrlCreateMenuItem( &quot;text&quot; , menuID , menuentry , menuradioitem )\n\iCreates a MenuItem control for the GUI.\i0" pattern="GUICtrlCreateMenuItem( &quot;text&quot; , menuID , menuentry , menuradioitem )"/>
          <Keyword text="GUICtrlCreateMonthCal" descr="GUICtrlCreateMonthCal( &quot;text&quot; , left , top , width , height , style , exStyle )\n\iCreates a month calendar control for the GUI.\i0" pattern="GUICtrlCreateMonthCal( &quot;text&quot; , left , top , width , height , style , exStyle )"/>
          <Keyword text="GUICtrlCreateObj" descr="GUICtrlCreateObj( ObjectVar , left , top , width , height )\n\iCreates an ActiveX control in the GUI.\i0" pattern="GUICtrlCreateObj( ObjectVar , left , top , width , height )"/>
          <Keyword text="GUICtrlCreatePic" descr="GUICtrlCreatePic( filename , left , top , width , height , style , exStyle )\n\iCreates a Picture control for the GUI.\i0" pattern="GUICtrlCreatePic( filename , left , top , width , height , style , exStyle )"/>
          <Keyword text="GUICtrlCreateProgress" descr="GUICtrlCreateProgress( left , top , width , height , style , exStyle )\n\iCreates a Progress control for the GUI.\i0" pattern="GUICtrlCreateProgress( left , top , width , height , style , exStyle )"/>
          <Keyword text="GUICtrlCreateRadio" descr="GUICtrlCreateRadio( &quot;text&quot; , left , top , width , height , style , exStyle )\n\iCreates a Radio button control for the GUI.\i0" pattern="GUICtrlCreateRadio( &quot;text&quot; , left , top , width , height , style , exStyle )"/>
          <Keyword text="GUICtrlCreateSlider" descr="GUICtrlCreateSlider( left , top , width , height , style , exStyle )\n\iCreates a Slider control for the GUI.\i0" pattern="GUICtrlCreateSlider( left , top , width , height , style , exStyle )"/>
          <Keyword text="GUICtrlCreateTab" descr="GUICtrlCreateTab( left , top , width , height , style , exStyle )\n\iCreates a Tab control for the GUI.\i0" pattern="GUICtrlCreateTab( left , top , width , height , style , exStyle )"/>
          <Keyword text="GUICtrlCreateTabItem" descr="GUICtrlCreateTabItem( &quot;text&quot; )\n\iCreates a TabItem control for the GUI.\i0" pattern="GUICtrlCreateTabItem( &quot;text&quot; )"/>
          <Keyword text="GUICtrlCreateTreeView" descr="GUICtrlCreateTreeView( left , top , width , height , style , exStyle )\n\iCreates a TreeView control for the GUI.\i0" pattern="GUICtrlCreateTreeView( left , top , width , height , style , exStyle )"/>
          <Keyword text="GUICtrlCreateTreeViewItem" descr="GUICtrlCreateTreeViewItem( &quot;text&quot; , treeviewID )\n\iCreates a TreeViewItem control for the GUI.\i0" pattern="GUICtrlCreateTreeViewItem( &quot;text&quot; , treeviewID )"/>
          <Keyword text="GUICtrlCreateUpdown" descr="GUICtrlCreateUpdown( inputcontrolID , style )\n\iCreates an UpDown control for the GUI.\i0" pattern="GUICtrlCreateUpdown( inputcontrolID , style )"/>
          <Keyword text="GUICtrlDelete" descr="GUICtrlDelete( controlID )\n\iDeletes a control.\i0" pattern="GUICtrlDelete( controlID )"/>
          <Keyword text="GUICtrlGetHandle" descr="GUICtrlGetHandle( controlID )\n\iReturns the handle for a control and some special (item) handles (Menu, ContextMenu, TreeViewItem).\i0" pattern="GUICtrlGetHandle( controlID )"/>
          <Keyword text="GUICtrlGetState" descr="GUICtrlGetState( controlID )\n\iGets the current state of a control\i0" pattern="GUICtrlGetState( controlID )"/>
          <Keyword text="GUICtrlRead" descr="GUICtrlRead( controlID , advanced )\n\iRead state or data of a control.\i0" pattern="GUICtrlRead( controlID , advanced )"/>
          <Keyword text="GUICtrlRecvMsg" descr="GUICtrlRecvMsg( controlID , msg , wParam , lParamType )\n\iSend a message to a control and retrieve information in lParam.\i0" pattern="GUICtrlRecvMsg( controlID , msg , wParam , lParamType )"/>
          <Keyword text="GUICtrlRegisterListViewSort" descr="GUICtrlRegisterListViewSort( controlID , &quot;function&quot; )\n\iRegister a user defined function for an internal listview sorting callback function.\i0" pattern="GUICtrlRegisterListViewSort( controlID , &quot;function&quot; )"/>
          <Keyword text="GUICtrlSendMsg" descr="GUICtrlSendMsg( controlID , msg , wParam , lParam )\n\iSend a message to a control.\i0" pattern="GUICtrlSendMsg( controlID , msg , wParam , lParam )"/>
          <Keyword text="GUICtrlSendToDummy" descr="GUICtrlSendToDummy( controlID , state )\n\iSends a message to a Dummy control.\i0" pattern="GUICtrlSendToDummy( controlID , state )"/>
          <Keyword text="GUICtrlSetBkColor" descr="GUICtrlSetBkColor( controlID , backgroundcolor )\n\iSets the background color of a control.\i0" pattern="GUICtrlSetBkColor( controlID , backgroundcolor )"/>
          <Keyword text="GUICtrlSetColor" descr="GUICtrlSetColor( controlID , textcolor )\n\iSets the text color of a control.\i0" pattern="GUICtrlSetColor( controlID , textcolor )"/>
          <Keyword text="GUICtrlSetCursor" descr="GUICtrlSetCursor( controlID , cursorID )\n\iSets the mouse cursor icon for a particular control.\i0" pattern="GUICtrlSetCursor( controlID , cursorID )"/>
          <Keyword text="GUICtrlSetData" descr="GUICtrlSetData( controlID , data , default )\n\iModifies the data for a control.\i0" pattern="GUICtrlSetData( controlID , data , default )"/>
          <Keyword text="GUICtrlSetDefBkColor" descr="GUICtrlSetDefBkColor( defbkcolor , winhandle )\n\iSets the default background color of all the controls of the GUI window.\i0" pattern="GUICtrlSetDefBkColor( defbkcolor , winhandle )"/>
          <Keyword text="GUICtrlSetDefColor" descr="GUICtrlSetDefColor( deftextcolor , winhandle )\n\iSets the default text color of all the controls of the GUI window.\i0" pattern="GUICtrlSetDefColor( deftextcolor , winhandle )"/>
          <Keyword text="GUICtrlSetFont" descr="GUICtrlSetFont( controlID , size , weight , attribute , fontname , quality )\n\iSets the font for a control.\i0" pattern="GUICtrlSetFont( controlID , size , weight , attribute , fontname , quality )"/>
          <Keyword text="GUICtrlSetGraphic" descr="GUICtrlSetGraphic( controlID , type , par1 , ... par6 )\n\iModifies the data for a control.\i0" pattern="GUICtrlSetGraphic( controlID , type , par1 , ... par6 )"/>
          <Keyword text="GUICtrlSetImage" descr="GUICtrlSetImage( controlID , filename , iconname , icontype )\n\iSets the bitmap or icon image to use for a control.\i0" pattern="GUICtrlSetImage( controlID , filename , iconname , icontype )"/>
          <Keyword text="GUICtrlSetLimit" descr="GUICtrlSetLimit( controlID , max , min )\n\iLimits the number of characters/pixels for a control.\i0" pattern="GUICtrlSetLimit( controlID , max , min )"/>
          <Keyword text="GUICtrlSetOnEvent" descr="GUICtrlSetOnEvent( controlID , &quot;function&quot; )\n\iDefines a user-defined function to be called when a control is clicked.\i0" pattern="GUICtrlSetOnEvent( controlID , &quot;function&quot; )"/>
          <Keyword text="GUICtrlSetPos" descr="GUICtrlSetPos( controlID , left , top , width , height )\n\iChanges the position of a control within the GUI window.\i0" pattern="GUICtrlSetPos( controlID , left , top , width , height )"/>
          <Keyword text="GUICtrlSetResizing" descr="GUICtrlSetResizing( controlID , resizing )\n\iDefines the resizing method used by a control.\i0" pattern="GUICtrlSetResizing( controlID , resizing )"/>
          <Keyword text="GUICtrlSetState" descr="GUICtrlSetState( controlID , state )\n\iChanges the state of a control.\i0" pattern="GUICtrlSetState( controlID , state )"/>
          <Keyword text="GUICtrlSetStyle" descr="GUICtrlSetStyle( controlID , style , exStyle )\n\iChanges the style of a control.\i0" pattern="GUICtrlSetStyle( controlID , style , exStyle )"/>
          <Keyword text="GUICtrlSetTip" descr="GUICtrlSetTip( controlID , tiptext , &quot;title&quot; , icon , options )\n\iSets the tip text associated with a control.\i0" pattern="GUICtrlSetTip( controlID , tiptext , &quot;title&quot; , icon , options )"/>
          <Keyword text="GUIDelete" descr="GUIDelete( winhandle )\n\iDeletes a GUI window and all controls that it contains.\i0" pattern="GUIDelete( winhandle )"/>
          <Keyword text="GUIGetCursorInfo" descr="GUIGetCursorInfo( winhandle )\n\iGets the mouse cursor position relative to GUI window.\i0" pattern="GUIGetCursorInfo( winhandle )"/>
          <Keyword text="GUIGetMsg" descr="GUIGetMsg( advanced )\n\iPolls the GUI to see if any events have occurred.\i0" pattern="GUIGetMsg( advanced )"/>
          <Keyword text="GUIGetStyle" descr="GUIGetStyle( winhandle )\n\iRetrieves the styles of a GUI window.\i0" pattern="GUIGetStyle( winhandle )"/>
          <Keyword text="GUIRegisterMsg" descr="GUIRegisterMsg( msgID , &quot;function&quot; )\n\iRegister a user defined function for a known Windows Message ID (WM_MSG).\i0" pattern="GUIRegisterMsg( msgID , &quot;function&quot; )"/>
          <Keyword text="GUISetAccelerators" descr="GUISetAccelerators( accelerators , winhandle )\n\iSets the accelerator table to be used in a GUI window.\i0" pattern="GUISetAccelerators( accelerators , winhandle )"/>
          <Keyword text="GUISetBkColor" descr="GUISetBkColor( background , winhandle )\n\iSets the background color of the GUI window.\i0" pattern="GUISetBkColor( background , winhandle )"/>
          <Keyword text="GUISetCoord" descr="GUISetCoord( left , top , width , height , winhandle )\n\iSets absolute coordinates for the next control.\i0" pattern="GUISetCoord( left , top , width , height , winhandle )"/>
          <Keyword text="GUISetCursor" descr="GUISetCursor( cursorID , override , winhandle )\n\iSets the mouse cursor icon for a GUI window.\i0" pattern="GUISetCursor( cursorID , override , winhandle )"/>
          <Keyword text="GUISetFont" descr="GUISetFont( size , weight , attribute , fontname , winhandle , quality )\n\iSets the default font for a GUI window.\i0" pattern="GUISetFont( size , weight , attribute , fontname , winhandle , quality )"/>
          <Keyword text="GUISetHelp" descr="GUISetHelp( helpfile , winhandle )\n\iSets an executable file that will be run when F1 is pressed.\i0" pattern="GUISetHelp( helpfile , winhandle )"/>
          <Keyword text="GUISetIcon" descr="GUISetIcon( iconfile , iconID , winhandle )\n\iSets the icon used in a GUI window.\i0" pattern="GUISetIcon( iconfile , iconID , winhandle )"/>
          <Keyword text="GUISetOnEvent" descr="GUISetOnEvent( specialID , &quot;function&quot; , winhandle )\n\iDefines a user function to be called when a system button is clicked.\i0" pattern="GUISetOnEvent( specialID , &quot;function&quot; , winhandle )"/>
          <Keyword text="GUISetState" descr="GUISetState( flag , winhandle )\n\iChanges the state of a GUI window.\i0" pattern="GUISetState( flag , winhandle )"/>
          <Keyword text="GUISetStyle" descr="GUISetStyle( Style , ExStyle , winhandle )\n\iChanges the styles of a GUI window.\i0" pattern="GUISetStyle( Style , ExStyle , winhandle )"/>
          <Keyword text="GUIStartGroup" descr="GUIStartGroup( winhandle )\n\iDefines that any subsequent controls that are created will be &quot;grouped&quot; together.\i0" pattern="GUIStartGroup( winhandle )"/>
          <Keyword text="GUISwitch" descr="GUISwitch( winhandle , tabitemID )\n\iSwitches the current window used for GUI functions.\i0" pattern="GUISwitch( winhandle , tabitemID )"/>
          <Keyword text="HWnd" descr="HWnd( expression )\n\iConverts an expression into an HWND handle.\i0" pattern="HWnd( expression )"/>
          <Keyword text="Hex" descr="Hex( expression , length )\n\iReturns a string representation of an integer or of a binary type converted to hexadecimal.\i0" pattern="Hex( expression , length )"/>
          <Keyword text="HotKeySet" descr="HotKeySet( &quot;key&quot; , &quot;function&quot; )\n\iSets a hotkey that calls a user function.\i0" pattern="HotKeySet( &quot;key&quot; , &quot;function&quot; )"/>
          <Keyword text="HttpSetProxy" descr="HttpSetProxy( mode , &quot;proxy:port&quot; , &quot;username&quot; , &quot;password&quot; )\n\iSets the internet proxy to use for http access.\i0" pattern="HttpSetProxy( mode , &quot;proxy:port&quot; , &quot;username&quot; , &quot;password&quot; )"/>
          <Keyword text="HttpSetUserAgent" descr="HttpSetUserAgent( &quot;user agent&quot; )\n\iSets the user-agent string sent with InetGet() and InetRead() requests.\i0" pattern="HttpSetUserAgent( &quot;user agent&quot; )"/>
          <Keyword text="InetClose" descr="InetClose( handle )\n\iCloses a handle returned from InetGet().\i0" pattern="InetClose( handle )"/>
          <Keyword text="InetGet" descr="InetGet( &quot;URL&quot; , &quot;filename&quot; , options , background )\n\iDownloads a file from the internet using the HTTP, HTTPS or FTP protocol.\i0" pattern="InetGet( &quot;URL&quot; , &quot;filename&quot; , options , background )"/>
          <Keyword text="InetGetInfo" descr="InetGetInfo( handle , index )\n\iReturns detailed data for a handle returned from InetGet().\i0" pattern="InetGetInfo( handle , index )"/>
          <Keyword text="InetGetSize" descr="InetGetSize( &quot;URL&quot; , options )\n\iReturns the size (in bytes) of a file located on the internet.\i0" pattern="InetGetSize( &quot;URL&quot; , options )"/>
          <Keyword text="InetRead" descr="InetRead( &quot;URL&quot; , options )\n\iDownloads a file from the internet using the HTTP, HTTPS or FTP protocol.\i0" pattern="InetRead( &quot;URL&quot; , options )"/>
          <Keyword text="IniDelete" descr="IniDelete( &quot;filename&quot; , &quot;section&quot; , &quot;key&quot; )\n\iDeletes a value from a standard format .ini file.\i0" pattern="IniDelete( &quot;filename&quot; , &quot;section&quot; , &quot;key&quot; )"/>
          <Keyword text="IniRead" descr="IniRead( &quot;filename&quot; , &quot;section&quot; , &quot;key&quot; , &quot;default&quot; )\n\iReads a value from a standard format .ini file.\i0" pattern="IniRead( &quot;filename&quot; , &quot;section&quot; , &quot;key&quot; , &quot;default&quot; )"/>
          <Keyword text="IniReadSection" descr="IniReadSection( &quot;filename&quot; , &quot;section&quot; )\n\iReads all key/value pairs from a section in a standard format .ini file.\i0" pattern="IniReadSection( &quot;filename&quot; , &quot;section&quot; )"/>
          <Keyword text="IniReadSectionNames" descr="IniReadSectionNames( &quot;filename&quot; )\n\iReads all sections in a standard format .ini file.\i0" pattern="IniReadSectionNames( &quot;filename&quot; )"/>
          <Keyword text="IniRenameSection" descr="IniRenameSection( &quot;filename&quot; , &quot;section&quot; , &quot;new section&quot; , flag )\n\iRenames a section in a standard format .ini file.\i0" pattern="IniRenameSection( &quot;filename&quot; , &quot;section&quot; , &quot;new section&quot; , flag )"/>
          <Keyword text="IniWrite" descr="IniWrite( &quot;filename&quot; , &quot;section&quot; , &quot;key&quot; , &quot;value&quot; )\n\iWrites a value to a standard format .ini file.\i0" pattern="IniWrite( &quot;filename&quot; , &quot;section&quot; , &quot;key&quot; , &quot;value&quot; )"/>
          <Keyword text="IniWriteSection" descr="IniWriteSection( &quot;filename&quot; , &quot;section&quot; , &quot;data&quot; , index )\n\iWrites a section to a standard format .ini file.\i0" pattern="IniWriteSection( &quot;filename&quot; , &quot;section&quot; , &quot;data&quot; , index )"/>
          <Keyword text="InputBox" descr="InputBox( &quot;title&quot; , &quot;prompt&quot; , &quot;default&quot; , &quot;password char&quot; , width , height , left , top , timeout , hwnd )\n\iDisplays an input box to ask the user to enter a string.\i0" pattern="InputBox( &quot;title&quot; , &quot;prompt&quot; , &quot;default&quot; , &quot;password char&quot; , width , height , left , top , timeout , hwnd )"/>
          <Keyword text="Int" descr="Int( expression , flag )\n\iReturns the integer (whole number) representation of an expression.\i0" pattern="Int( expression , flag )"/>
          <Keyword text="IsAdmin" descr="IsAdmin()\n\iChecks if the current user has full administrator privileges.\i0" pattern="IsAdmin()"/>
          <Keyword text="IsArray" descr="IsArray( variable )\n\iChecks if a variable is an array type.\i0" pattern="IsArray( variable )"/>
          <Keyword text="IsBinary" descr="IsBinary( expression )\n\iChecks if a variable or expression is a binary type.\i0" pattern="IsBinary( expression )"/>
          <Keyword text="IsBool" descr="IsBool( variable )\n\iChecks if a variable&apos;s base type is boolean.\i0" pattern="IsBool( variable )"/>
          <Keyword text="IsDeclared" descr="IsDeclared( expression )\n\iCheck if a variable has been declared.\i0" pattern="IsDeclared( expression )"/>
          <Keyword text="IsDllStruct" descr="IsDllStruct( variable )\n\iChecks if a variable is a DllStruct type.\i0" pattern="IsDllStruct( variable )"/>
          <Keyword text="IsFloat" descr="IsFloat( variable )\n\iChecks if a variable or expression is a float-type.\i0" pattern="IsFloat( variable )"/>
          <Keyword text="IsHWnd" descr="IsHWnd( variable )\n\iChecks if a variable&apos;s base type is a pointer and window handle.\i0" pattern="IsHWnd( variable )"/>
          <Keyword text="IsInt" descr="IsInt( variable )\n\iChecks if a variable or expression is an integer type.\i0" pattern="IsInt( variable )"/>
          <Keyword text="IsKeyword" descr="IsKeyword( variable )\n\iChecks if a variable is a keyword (for example, Default).\i0" pattern="IsKeyword( variable )"/>
          <Keyword text="IsNumber" descr="IsNumber( variable )\n\iChecks if a variable&apos;s base type is numeric.\i0" pattern="IsNumber( variable )"/>
          <Keyword text="IsObj" descr="IsObj( variable )\n\iChecks if a variable or expression is an object type.\i0" pattern="IsObj( variable )"/>
          <Keyword text="IsPtr" descr="IsPtr( variable )\n\iChecks if a variable&apos;s base type is a pointer.\i0" pattern="IsPtr( variable )"/>
          <Keyword text="IsString" descr="IsString( variable )\n\iChecks if a variable is a string type.\i0" pattern="IsString( variable )"/>
          <Keyword text="Log" descr="Log( expression )\n\iCalculates the natural logarithm of a number.\i0" pattern="Log( expression )"/>
          <Keyword text="MemGetStats" descr="MemGetStats()\n\iRetrieves memory related information.\i0" pattern="MemGetStats()"/>
          <Keyword text="Mod" descr="Mod( value1 , value2 )\n\iPerforms the modulus operation.\i0" pattern="Mod( value1 , value2 )"/>
          <Keyword text="MouseClick" descr="MouseClick( &quot;button&quot; , x , y , clicks , speed )\n\iPerform a mouse click operation.\i0" pattern="MouseClick( &quot;button&quot; , x , y , clicks , speed )"/>
          <Keyword text="MouseClickDrag" descr="MouseClickDrag( &quot;button&quot; , x1 , y1 , x2 , y2 , speed )\n\iPerform a mouse click and drag operation.\i0" pattern="MouseClickDrag( &quot;button&quot; , x1 , y1 , x2 , y2 , speed )"/>
          <Keyword text="MouseDown" descr="MouseDown( &quot;button&quot; )\n\iPerform a mouse down event at the current mouse position.\i0" pattern="MouseDown( &quot;button&quot; )"/>
          <Keyword text="MouseGetCursor" descr="MouseGetCursor()\n\iReturns the cursor ID Number for the current Mouse Cursor.\i0" pattern="MouseGetCursor()"/>
          <Keyword text="MouseGetPos" descr="MouseGetPos( dimension )\n\iRetrieves the current position of the mouse cursor.\i0" pattern="MouseGetPos( dimension )"/>
          <Keyword text="MouseMove" descr="MouseMove( x , y , speed )\n\iMoves the mouse pointer.\i0" pattern="MouseMove( x , y , speed )"/>
          <Keyword text="MouseUp" descr="MouseUp( &quot;button&quot; )\n\iPerform a mouse up event at the current mouse position.\i0" pattern="MouseUp( &quot;button&quot; )"/>
          <Keyword text="MouseWheel" descr="MouseWheel( &quot;direction&quot; , clicks )\n\iMoves the mouse wheel up or down. NT/2000/XP ONLY.\i0" pattern="MouseWheel( &quot;direction&quot; , clicks )"/>
          <Keyword text="MsgBox" descr="MsgBox( flag , &quot;title&quot; , &quot;text&quot; , timeout , hwnd )\n\iDisplays a simple message box with optional timeout.\i0" pattern="MsgBox( flag , &quot;title&quot; , &quot;text&quot; , timeout , hwnd )"/>
          <Keyword text="Number" descr="Number( expression , flag )\n\iReturns the numeric representation of an expression.\i0" pattern="Number( expression , flag )"/>
          <Keyword text="ObjCreate" descr="ObjCreate( &quot;classname&quot; , &quot;servername&quot; , &quot;username&quot; , &quot;password&quot; )\n\iCreates a reference to a COM object from the given classname.\i0" pattern="ObjCreate( &quot;classname&quot; , &quot;servername&quot; , &quot;username&quot; , &quot;password&quot; )"/>
          <Keyword text="ObjCreateInterface" descr="ObjCreateInterface( &quot;CLSID&quot; , &quot;IID&quot; , &quot;interface_description&quot; , &quot;flag&quot; )\n\iCreates a reference to an object from the given classname/object pointer, interface identifier and description string.\i0" pattern="ObjCreateInterface( &quot;CLSID&quot; , &quot;IID&quot; , &quot;interface_description&quot; , &quot;flag&quot; )"/>
          <Keyword text="ObjEvent"/>
          <Keyword text="ObjGet" descr="ObjGet( &quot;filename&quot; , &quot;classname&quot; )\n\iRetrieves a reference to a COM object from an existing process or filename.\i0" pattern="ObjGet( &quot;filename&quot; , &quot;classname&quot; )"/>
          <Keyword text="ObjName" descr="ObjName( $Objectvariable , Flag )\n\iReturns the name or interface description of an Object\i0" pattern="ObjName( $Objectvariable , Flag )"/>
          <Keyword text="OnAutoItExitRegister" descr="OnAutoItExitRegister( &quot;function&quot; )\n\iRegisters a function to be called when AutoIt exits.\i0" pattern="OnAutoItExitRegister( &quot;function&quot; )"/>
          <Keyword text="OnAutoItExitUnRegister" descr="OnAutoItExitUnRegister( &quot;function&quot; )\n\iUnRegisters a function that was called when AutoIt exits.\i0" pattern="OnAutoItExitUnRegister( &quot;function&quot; )"/>
          <Keyword text="Opt"/>
          <Keyword text="Ping" descr="Ping( &quot;address/hostname&quot; , timeout )\n\iPings a host and returns the roundtrip-time.\i0" pattern="Ping( &quot;address/hostname&quot; , timeout )"/>
          <Keyword text="PixelChecksum" descr="PixelChecksum( left , top , right , bottom , step , hwnd , mode )\n\iGenerates a checksum for a region of pixels.\i0" pattern="PixelChecksum( left , top , right , bottom , step , hwnd , mode )"/>
          <Keyword text="PixelGetColor" descr="PixelGetColor( x , y , hwnd )\n\iReturns a pixel color according to x,y pixel coordinates.\i0" pattern="PixelGetColor( x , y , hwnd )"/>
          <Keyword text="PixelSearch" descr="PixelSearch( left , top , right , bottom , color , shade-variation , step , hwnd )\n\iSearches a rectangle of pixels for the pixel color provided.\i0" pattern="PixelSearch( left , top , right , bottom , color , shade-variation , step , hwnd )"/>
          <Keyword text="PluginClose" descr="PluginClose( dllhandle )\n\iClose a plugin file\i0" pattern="PluginClose( dllhandle )"/>
          <Keyword text="PluginOpen" descr="PluginOpen( filename )\n\iOpen a plugin file.\i0" pattern="PluginOpen( filename )"/>
          <Keyword text="ProcessClose" descr="ProcessClose( &quot;process&quot; )\n\iTerminates a named process.\i0" pattern="ProcessClose( &quot;process&quot; )"/>
          <Keyword text="ProcessExists" descr="ProcessExists( &quot;process&quot; )\n\iChecks to see if a specified process exists.\i0" pattern="ProcessExists( &quot;process&quot; )"/>
          <Keyword text="ProcessGetStats" descr="ProcessGetStats( &quot;process&quot; , type )\n\iReturns an array about Memory or IO infos of a running process.\i0" pattern="ProcessGetStats( &quot;process&quot; , type )"/>
          <Keyword text="ProcessList" descr="ProcessList( &quot;name&quot; )\n\iReturns an array listing the currently running processes (names and PIDs).\i0" pattern="ProcessList( &quot;name&quot; )"/>
          <Keyword text="ProcessSetPriority" descr="ProcessSetPriority( &quot;process&quot; , priority )\n\iChanges the priority of a process\i0" pattern="ProcessSetPriority( &quot;process&quot; , priority )"/>
          <Keyword text="ProcessWait" descr="ProcessWait( &quot;process&quot; , timeout )\n\iPauses script execution until a given process exists.\i0" pattern="ProcessWait( &quot;process&quot; , timeout )"/>
          <Keyword text="ProcessWaitClose" descr="ProcessWaitClose( &quot;process&quot; , timeout )\n\iPauses script execution until a given process does not exist.\i0" pattern="ProcessWaitClose( &quot;process&quot; , timeout )"/>
          <Keyword text="ProgressOff" descr="ProgressOff()\n\iTurns Progress window off.\i0" pattern="ProgressOff()"/>
          <Keyword text="ProgressOn" descr="ProgressOn( &quot;title&quot; , &quot;maintext&quot; , &quot;subtext&quot; , x pos , y pos , opt )\n\iCreates a customizable progress bar window.\i0" pattern="ProgressOn( &quot;title&quot; , &quot;maintext&quot; , &quot;subtext&quot; , x pos , y pos , opt )"/>
          <Keyword text="ProgressSet" descr="ProgressSet( percent , &quot;subtext&quot; , &quot;maintext&quot; )\n\iSets the position and/or text of a previously created Progress bar window.\i0" pattern="ProgressSet( percent , &quot;subtext&quot; , &quot;maintext&quot; )"/>
          <Keyword text="Ptr" descr="Ptr( expression )\n\iConverts an expression into a pointer variant.\i0" pattern="Ptr( expression )"/>
          <Keyword text="Random" descr="Random( Min , Max , Flag )\n\iGenerates a pseudo-random float-type number.\i0" pattern="Random( Min , Max , Flag )"/>
          <Keyword text="RegDelete" descr="RegDelete( &quot;keyname&quot; , &quot;valuename&quot; )\n\iDeletes a key or value from the registry.\i0" pattern="RegDelete( &quot;keyname&quot; , &quot;valuename&quot; )"/>
          <Keyword text="RegEnumKey" descr="RegEnumKey( &quot;keyname&quot; , instance )\n\iReads the name of a subkey according to its instance.\i0" pattern="RegEnumKey( &quot;keyname&quot; , instance )"/>
          <Keyword text="RegEnumVal" descr="RegEnumVal( &quot;keyname&quot; , instance )\n\iReads the name of a value according to its instance.\i0" pattern="RegEnumVal( &quot;keyname&quot; , instance )"/>
          <Keyword text="RegRead" descr="RegRead( &quot;keyname&quot; , &quot;valuename&quot; )\n\iReads a value from the registry.\i0" pattern="RegRead( &quot;keyname&quot; , &quot;valuename&quot; )"/>
          <Keyword text="RegWrite" descr="RegWrite( &quot;keyname&quot; , &quot;valuename&quot; , &quot;type&quot; , value )\n\iCreates a key or value in the registry.\i0" pattern="RegWrite( &quot;keyname&quot; , &quot;valuename&quot; , &quot;type&quot; , value )"/>
          <Keyword text="Round" descr="Round( expression , decimalplaces )\n\iReturns a number rounded to a specified number of decimal places.\i0" pattern="Round( expression , decimalplaces )"/>
          <Keyword text="Run" descr="Run( &quot;program&quot; , &quot;workingdir&quot; , show_flag , opt_flag )\n\iRuns an external program.\i0" pattern="Run( &quot;program&quot; , &quot;workingdir&quot; , show_flag , opt_flag )"/>
          <Keyword text="RunAs" descr="RunAs( &quot;username&quot; , &quot;domain&quot; , &quot;password&quot; , logon_flag , &quot;program&quot; , &quot;workingdir&quot; , show_flag , opt_flag )\n\iRuns an external program under the context of a different user.\i0" pattern="RunAs( &quot;username&quot; , &quot;domain&quot; , &quot;password&quot; , logon_flag , &quot;program&quot; , &quot;workingdir&quot; , show_flag , opt_flag )"/>
          <Keyword text="RunAsWait" descr="RunAsWait( &quot;username&quot; , &quot;domain&quot; , &quot;password&quot; , logon_flag , &quot;program&quot; , &quot;workingdir&quot; , show_flag , opt_flag )\n\iRuns an external program under the context of a different user and pauses script execution until the program finishes.\i0" pattern="RunAsWait( &quot;username&quot; , &quot;domain&quot; , &quot;password&quot; , logon_flag , &quot;program&quot; , &quot;workingdir&quot; , show_flag , opt_flag )"/>
          <Keyword text="RunWait" descr="RunWait( &quot;program&quot; , &quot;workingdir&quot; , show_flag , opt_flag )\n\iRuns an external program and pauses script execution until the program finishes.\i0" pattern="RunWait( &quot;program&quot; , &quot;workingdir&quot; , show_flag , opt_flag )"/>
          <Keyword text="SRandom" descr="SRandom( Seed )\n\iSet Seed for random number generation.\i0" pattern="SRandom( Seed )"/>
          <Keyword text="Send" descr="Send( &quot;keys&quot; , flag )\n\iSends simulated keystrokes to the active window.\i0" pattern="Send( &quot;keys&quot; , flag )"/>
          <Keyword text="SendKeepActive" descr="SendKeepActive( &quot;title&quot; , &quot;text&quot; )\n\iAttempts to keep a specified window active during Send().\i0" pattern="SendKeepActive( &quot;title&quot; , &quot;text&quot; )"/>
          <Keyword text="SetError" descr="SetError( code , extended , return value )\n\iManually set the value of the @error macro.\i0" pattern="SetError( code , extended , return value )"/>
          <Keyword text="SetExtended" descr="SetExtended( code , return value )\n\iManually set the value of the @extended macro.\i0" pattern="SetExtended( code , return value )"/>
          <Keyword text="ShellExecute" descr="ShellExecute( &quot;filename&quot; , &quot;parameters&quot; , &quot;workingdir&quot; , &quot;verb&quot; , showflag )\n\iRuns an external program using the ShellExecute API.\i0" pattern="ShellExecute( &quot;filename&quot; , &quot;parameters&quot; , &quot;workingdir&quot; , &quot;verb&quot; , showflag )"/>
          <Keyword text="ShellExecuteWait" descr="ShellExecuteWait( &quot;filename&quot; , &quot;parameters&quot; , &quot;workingdir&quot; , &quot;verb&quot; , showflag )\n\iRuns an external program using the ShellExecute API and pauses script execution until it finishes.\i0" pattern="ShellExecuteWait( &quot;filename&quot; , &quot;parameters&quot; , &quot;workingdir&quot; , &quot;verb&quot; , showflag )"/>
          <Keyword text="Shutdown" descr="Shutdown( code , reason )\n\iShuts down the system.\i0" pattern="Shutdown( code , reason )"/>
          <Keyword text="Sin" descr="Sin( expression )\n\iCalculates the sine of a number.\i0" pattern="Sin( expression )"/>
          <Keyword text="Sleep" descr="Sleep( delay )\n\iPause script execution.\i0" pattern="Sleep( delay )"/>
          <Keyword text="SoundPlay" descr="SoundPlay( &quot;filename&quot; , wait )\n\iPlay a sound file.\i0" pattern="SoundPlay( &quot;filename&quot; , wait )"/>
          <Keyword text="SoundSetWaveVolume" descr="SoundSetWaveVolume( percent )\n\iSets the system wave volume by percent.\i0" pattern="SoundSetWaveVolume( percent )"/>
          <Keyword text="SplashImageOn" descr="SplashImageOn( &quot;title&quot; , &quot;file&quot; , width , height , x pos , y pos , opt )\n\iCreates a customizable image popup window.\i0" pattern="SplashImageOn( &quot;title&quot; , &quot;file&quot; , width , height , x pos , y pos , opt )"/>
          <Keyword text="SplashOff" descr="SplashOff()\n\iTurns SplashText or SplashImage off.\i0" pattern="SplashOff()"/>
          <Keyword text="SplashTextOn" descr="SplashTextOn( &quot;title&quot; , &quot;text&quot; , w , h , x pos , y pos , opt , &quot;fontname&quot; , fontsz , fontwt )\n\iCreates a customizable text popup window.\i0" pattern="SplashTextOn( &quot;title&quot; , &quot;text&quot; , w , h , x pos , y pos , opt , &quot;fontname&quot; , fontsz , fontwt )"/>
          <Keyword text="Sqrt" descr="Sqrt( expression )\n\iCalculates the square-root of a number.\i0" pattern="Sqrt( expression )"/>
          <Keyword text="StatusbarGetText" descr="StatusbarGetText( &quot;title&quot; , &quot;text&quot; , part )\n\iRetrieves the text from a standard status bar control.\i0" pattern="StatusbarGetText( &quot;title&quot; , &quot;text&quot; , part )"/>
          <Keyword text="StderrRead" descr="StderrRead( process_id , peek = false , binary = false )\n\iReads from the STDERR stream of a previously run child process.\i0" pattern="StderrRead( process_id , peek = false , binary = false )"/>
          <Keyword text="StdinWrite" descr="StdinWrite( process_id , data )\n\iWrites a number of characters to the STDIN stream of a previously run child process.\i0" pattern="StdinWrite( process_id , data )"/>
          <Keyword text="StdioClose" descr="StdioClose( process_id )\n\iCloses all resources associated with a process previously run with STDIO redirection.\i0" pattern="StdioClose( process_id )"/>
          <Keyword text="StdoutRead" descr="StdoutRead( process_id , peek = false , binary = false )\n\iReads from the STDOUT stream of a previously run child process.\i0" pattern="StdoutRead( process_id , peek = false , binary = false )"/>
          <Keyword text="String" descr="String( expression )\n\iReturns the string representation of an expression.\i0" pattern="String( expression )"/>
          <Keyword text="StringAddCR" descr="StringAddCR( &quot;string&quot; )\n\iTakes a string and prefixes all linefeed characters ( Chr(10) ) with a carriage return character ( Chr(13) ).\i0" pattern="StringAddCR( &quot;string&quot; )"/>
          <Keyword text="StringCompare" descr="StringCompare( &quot;string1&quot; , &quot;string2&quot; , casesense )\n\iCompares two strings with options.\i0" pattern="StringCompare( &quot;string1&quot; , &quot;string2&quot; , casesense )"/>
          <Keyword text="StringFormat" descr="StringFormat( &quot;format control&quot; , var1 , ... var32 )\n\iReturns a formatted string (similar to the C sprintf() function).\i0" pattern="StringFormat( &quot;format control&quot; , var1 , ... var32 )"/>
          <Keyword text="StringFromASCIIArray" descr="StringFromASCIIArray( array , start , end , encoding )\n\iConverts an array of ASCII codes to a string.\i0" pattern="StringFromASCIIArray( array , start , end , encoding )"/>
          <Keyword text="StringInStr" descr="StringInStr( &quot;string&quot; , &quot;substring&quot; , casesense , occurrence , start , count )\n\iChecks if a string contains a given substring.\i0" pattern="StringInStr( &quot;string&quot; , &quot;substring&quot; , casesense , occurrence , start , count )"/>
          <Keyword text="StringIsASCII" descr="StringIsASCII( &quot;string&quot; )\n\iChecks if a string contains only ASCII characters in the range 0x00 - 0x7f (0 - 127).\i0" pattern="StringIsASCII( &quot;string&quot; )"/>
          <Keyword text="StringIsAlNum" descr="StringIsAlNum( &quot;string&quot; )\n\iChecks if a string contains only alphanumeric characters.\i0" pattern="StringIsAlNum( &quot;string&quot; )"/>
          <Keyword text="StringIsAlpha" descr="StringIsAlpha( &quot;string&quot; )\n\iChecks if a string contains only alphabetic characters.\i0" pattern="StringIsAlpha( &quot;string&quot; )"/>
          <Keyword text="StringIsDigit" descr="StringIsDigit( &quot;string&quot; )\n\iChecks if a string contains only digit (0-9) characters.\i0" pattern="StringIsDigit( &quot;string&quot; )"/>
          <Keyword text="StringIsFloat" descr="StringIsFloat( &quot;string&quot; )\n\iChecks if a string is a floating point number.\i0" pattern="StringIsFloat( &quot;string&quot; )"/>
          <Keyword text="StringIsInt" descr="StringIsInt( &quot;string&quot; )\n\iChecks if a string is an integer.\i0" pattern="StringIsInt( &quot;string&quot; )"/>
          <Keyword text="StringIsLower" descr="StringIsLower( &quot;string&quot; )\n\iChecks if a string contains only lowercase characters.\i0" pattern="StringIsLower( &quot;string&quot; )"/>
          <Keyword text="StringIsSpace" descr="StringIsSpace( &quot;string&quot; )\n\iChecks if a string contains only whitespace characters.\i0" pattern="StringIsSpace( &quot;string&quot; )"/>
          <Keyword text="StringIsUpper" descr="StringIsUpper( &quot;string&quot; )\n\iChecks if a string contains only uppercase characters.\i0" pattern="StringIsUpper( &quot;string&quot; )"/>
          <Keyword text="StringIsXDigit" descr="StringIsXDigit( &quot;string&quot; )\n\iChecks if a string contains only hexadecimal digit (0-9, A-F) characters.\i0" pattern="StringIsXDigit( &quot;string&quot; )"/>
          <Keyword text="StringLeft" descr="StringLeft( &quot;string&quot; , count )\n\iReturns a number of characters from the left-hand side of a string.\i0" pattern="StringLeft( &quot;string&quot; , count )"/>
          <Keyword text="StringLen" descr="StringLen( &quot;string&quot; )\n\iReturns the number of characters in a string.\i0" pattern="StringLen( &quot;string&quot; )"/>
          <Keyword text="StringLower" descr="StringLower( &quot;string&quot; )\n\iConverts a string to lowercase.\i0" pattern="StringLower( &quot;string&quot; )"/>
          <Keyword text="StringMid" descr="StringMid( &quot;string&quot; , start , count )\n\iExtracts a number of characters from a string.\i0" pattern="StringMid( &quot;string&quot; , start , count )"/>
          <Keyword text="StringRegExp" descr="StringRegExp( &quot;test&quot; , &quot;pattern&quot; , flag , offset )\n\iCheck if a string fits a given regular expression pattern.\i0" pattern="StringRegExp( &quot;test&quot; , &quot;pattern&quot; , flag , offset )"/>
          <Keyword text="StringRegExpReplace" descr="StringRegExpReplace( &quot;test&quot; , &quot;pattern&quot; , &quot;replace&quot; , count )\n\iReplace text in a string based on regular expressions.\i0" pattern="StringRegExpReplace( &quot;test&quot; , &quot;pattern&quot; , &quot;replace&quot; , count )"/>
          <Keyword text="StringReplace" descr="StringReplace( &quot;string&quot; , &quot;searchstring/start&quot; , &quot;replacestring&quot; , occurrence , casesense )\n\iReplaces substrings in a string.\i0" pattern="StringReplace( &quot;string&quot; , &quot;searchstring/start&quot; , &quot;replacestring&quot; , occurrence , casesense )"/>
          <Keyword text="StringRight" descr="StringRight( &quot;string&quot; , count )\n\iReturns a number of characters from the right-hand side of a string.\i0" pattern="StringRight( &quot;string&quot; , count )"/>
          <Keyword text="StringSplit" descr="StringSplit( &quot;string&quot; , &quot;delimiters&quot; , flag )\n\iSplits up a string into substrings depending on the given delimiters.\i0" pattern="StringSplit( &quot;string&quot; , &quot;delimiters&quot; , flag )"/>
          <Keyword text="StringStripCR" descr="StringStripCR( &quot;string&quot; )\n\iRemoves all carriage return values ( Chr(13) ) from a string.\i0" pattern="StringStripCR( &quot;string&quot; )"/>
          <Keyword text="StringStripWS" descr="StringStripWS( &quot;string&quot; , flag )\n\iStrips the white space in a string.\i0" pattern="StringStripWS( &quot;string&quot; , flag )"/>
          <Keyword text="StringToASCIIArray" descr="StringToASCIIArray( &quot;string&quot; , start , end , encoding )\n\iConverts a string to an array containing the ASCII code of each character.\i0" pattern="StringToASCIIArray( &quot;string&quot; , start , end , encoding )"/>
          <Keyword text="StringToBinary" descr="StringToBinary( expression , flag )\n\iConverts a string into binary data.\i0" pattern="StringToBinary( expression , flag )"/>
          <Keyword text="StringTrimLeft" descr="StringTrimLeft( &quot;string&quot; , count )\n\iTrims a number of characters from the left hand side of a string.\i0" pattern="StringTrimLeft( &quot;string&quot; , count )"/>
          <Keyword text="StringTrimRight" descr="StringTrimRight( &quot;string&quot; , count )\n\iTrims a number of characters from the right hand side of a string.\i0" pattern="StringTrimRight( &quot;string&quot; , count )"/>
          <Keyword text="StringUpper" descr="StringUpper( &quot;string&quot; )\n\iConverts a string to uppercase.\i0" pattern="StringUpper( &quot;string&quot; )"/>
          <Keyword text="TCPAccept" descr="TCPAccept( mainsocket )\n\iPermits an incoming connection attempt on a socket.\i0" pattern="TCPAccept( mainsocket )"/>
          <Keyword text="TCPCloseSocket" descr="TCPCloseSocket( socket )\n\iCloses a TCP socket.\i0" pattern="TCPCloseSocket( socket )"/>
          <Keyword text="TCPConnect" descr="TCPConnect( IPAddr , port )\n\iCreate a socket connected to an existing server.\i0" pattern="TCPConnect( IPAddr , port )"/>
          <Keyword text="TCPListen" descr="TCPListen( IPAddr , port , MaxPendingConnection )\n\iCreates a socket listening for an incoming connection.\i0" pattern="TCPListen( IPAddr , port , MaxPendingConnection )"/>
          <Keyword text="TCPNameToIP" descr="TCPNameToIP( name )\n\iConverts an Internet name to IP address.\i0" pattern="TCPNameToIP( name )"/>
          <Keyword text="TCPRecv" descr="TCPRecv( mainsocket , maxlen , flag )\n\iReceives data from a connected socket.\i0" pattern="TCPRecv( mainsocket , maxlen , flag )"/>
          <Keyword text="TCPSend" descr="TCPSend( mainsocket , data )\n\iSends data on a connected socket.\i0" pattern="TCPSend( mainsocket , data )"/>
          <Keyword text="TCPShutdown" descr="TCPShutdown()\n\iStops TCP/UDP services.\i0" pattern="TCPShutdown()"/>
          <Keyword text="TCPStartup" descr="TCPStartup()\n\iStarts TCP or UDP services.\i0" pattern="TCPStartup()"/>
          <Keyword text="Tan" descr="Tan( expression )\n\iCalculates the tangent of a number.\i0" pattern="Tan( expression )"/>
          <Keyword text="TimerDiff" descr="TimerDiff( handle )\n\iReturns the difference in time from a previous call to TimerInit().\i0" pattern="TimerDiff( handle )"/>
          <Keyword text="TimerInit" descr="TimerInit()\n\iReturns a handle that can be passed to TimerDiff() to calculate the difference in milliseconds.\i0" pattern="TimerInit()"/>
          <Keyword text="ToolTip" descr="ToolTip( &quot;text&quot; , x , y , &quot;title&quot; , icon , options )\n\iCreates a tooltip anywhere on the screen.\i0" pattern="ToolTip( &quot;text&quot; , x , y , &quot;title&quot; , icon , options )"/>
          <Keyword text="TrayCreateItem" descr="TrayCreateItem( text , menuID , menuentry , menuradioitem )\n\iCreates a menuitem control for the tray.\i0" pattern="TrayCreateItem( text , menuID , menuentry , menuradioitem )"/>
          <Keyword text="TrayCreateMenu" descr="TrayCreateMenu( &quot;sub/menutext&quot; , menuID , menuentry )\n\iCreates a menu control for the tray menu.\i0" pattern="TrayCreateMenu( &quot;sub/menutext&quot; , menuID , menuentry )"/>
          <Keyword text="TrayGetMsg" descr="TrayGetMsg()\n\iPolls the tray to see if any events have occurred.\i0" pattern="TrayGetMsg()"/>
          <Keyword text="TrayItemDelete" descr="TrayItemDelete( controlID )\n\iDeletes a menu/item control from the tray menu.\i0" pattern="TrayItemDelete( controlID )"/>
          <Keyword text="TrayItemGetHandle" descr="TrayItemGetHandle( controlID )\n\iReturns the handle for a tray menu(item).\i0" pattern="TrayItemGetHandle( controlID )"/>
          <Keyword text="TrayItemGetState" descr="TrayItemGetState( controlID )\n\iGets the current state of a control.\i0" pattern="TrayItemGetState( controlID )"/>
          <Keyword text="TrayItemGetText" descr="TrayItemGetText( controlID )\n\iGets the itemtext of a tray menu/item control.\i0" pattern="TrayItemGetText( controlID )"/>
          <Keyword text="TrayItemSetOnEvent" descr="TrayItemSetOnEvent( itemID , &quot;function&quot; )\n\iDefines a user-defined function to be called when a tray item is clicked.\i0" pattern="TrayItemSetOnEvent( itemID , &quot;function&quot; )"/>
          <Keyword text="TrayItemSetState" descr="TrayItemSetState( controlID , state )\n\iSets the state of a tray menu/item control.\i0" pattern="TrayItemSetState( controlID , state )"/>
          <Keyword text="TrayItemSetText" descr="TrayItemSetText( controlID , text )\n\iSets the itemtext of a tray menu/item control.\i0" pattern="TrayItemSetText( controlID , text )"/>
          <Keyword text="TraySetClick" descr="TraySetClick( flag )\n\iSets the clickmode of the tray icon - what mouseclicks will display the tray menu.\i0" pattern="TraySetClick( flag )"/>
          <Keyword text="TraySetIcon" descr="TraySetIcon( filename , iconID )\n\iLoads/Sets a specified tray icon.\i0" pattern="TraySetIcon( filename , iconID )"/>
          <Keyword text="TraySetOnEvent" descr="TraySetOnEvent( specialID , &quot;function&quot; )\n\iDefines a user function to be called when a special tray action happens.\i0" pattern="TraySetOnEvent( specialID , &quot;function&quot; )"/>
          <Keyword text="TraySetPauseIcon" descr="TraySetPauseIcon( filename , iconID )\n\iLoads/Sets a specified tray pause icon.\i0" pattern="TraySetPauseIcon( filename , iconID )"/>
          <Keyword text="TraySetState" descr="TraySetState( flag )\n\iSets the state of the tray icon.\i0" pattern="TraySetState( flag )"/>
          <Keyword text="TraySetToolTip" descr="TraySetToolTip( text )\n\i(Re)Sets the tooltip text for the tray icon.\i0" pattern="TraySetToolTip( text )"/>
          <Keyword text="TrayTip" descr="TrayTip( &quot;title&quot; , &quot;text&quot; , timeout , option )\n\iDisplays a balloon tip from the AutoIt Icon.\i0" pattern="TrayTip( &quot;title&quot; , &quot;text&quot; , timeout , option )"/>
          <Keyword text="UBound" descr="UBound( Array , Dimension )\n\iReturns the size of array dimensions.\i0" pattern="UBound( Array , Dimension )"/>
          <Keyword text="UDPBind" descr="UDPBind( IPAddr , port )\n\iCreate a socket bound to an incoming connection.\i0" pattern="UDPBind( IPAddr , port )"/>
          <Keyword text="UDPCloseSocket" descr="UDPCloseSocket( socketarray )\n\iClose a UDP socket.\i0" pattern="UDPCloseSocket( socketarray )"/>
          <Keyword text="UDPOpen" descr="UDPOpen( IPAddr , port , flag )\n\iOpen a socket connected to an existing server .\i0" pattern="UDPOpen( IPAddr , port , flag )"/>
          <Keyword text="UDPRecv" descr="UDPRecv( socketarray , maxlen , flag )\n\iReceives data from an opened socket\i0" pattern="UDPRecv( socketarray , maxlen , flag )"/>
          <Keyword text="UDPSend" descr="UDPSend( socketarray , data )\n\iSends data on an opened socket\i0" pattern="UDPSend( socketarray , data )"/>
          <Keyword text="UDPShutdown" descr="UDPShutdown()\n\iStops TCP/UDP services.\i0" pattern="UDPShutdown()"/>
          <Keyword text="UDPStartup" descr="UDPStartup()\n\iStarts TCP or UDP services.\i0" pattern="UDPStartup()"/>
          <Keyword text="VarGetType" descr="VarGetType( expression )\n\iReturns the internal type representation of a variant.\i0" pattern="VarGetType( expression )"/>
          <Keyword text="WinActivate" descr="WinActivate( &quot;title&quot; , &quot;text&quot; )\n\iActivates (gives focus to) a window.\i0" pattern="WinActivate( &quot;title&quot; , &quot;text&quot; )"/>
          <Keyword text="WinActive" descr="WinActive( &quot;title&quot; , &quot;text&quot; )\n\iChecks to see if a specified window exists and is currently active.\i0" pattern="WinActive( &quot;title&quot; , &quot;text&quot; )"/>
          <Keyword text="WinClose" descr="WinClose( &quot;title&quot; , &quot;text&quot; )\n\iCloses a window.\i0" pattern="WinClose( &quot;title&quot; , &quot;text&quot; )"/>
          <Keyword text="WinExists" descr="WinExists( &quot;title&quot; , &quot;text&quot; )\n\iChecks to see if a specified window exists.\i0" pattern="WinExists( &quot;title&quot; , &quot;text&quot; )"/>
          <Keyword text="WinFlash" descr="WinFlash( &quot;title&quot; , &quot;text&quot; , flashes , delay )\n\iFlashes a window in the taskbar.\i0" pattern="WinFlash( &quot;title&quot; , &quot;text&quot; , flashes , delay )"/>
          <Keyword text="WinGetCaretPos" descr="WinGetCaretPos()\n\iReturns the coordinates of the caret in the foreground window\i0" pattern="WinGetCaretPos()"/>
          <Keyword text="WinGetClassList" descr="WinGetClassList( &quot;title&quot; , &quot;text&quot; )\n\iRetrieves the classes from a window.\i0" pattern="WinGetClassList( &quot;title&quot; , &quot;text&quot; )"/>
          <Keyword text="WinGetClientSize" descr="WinGetClientSize( &quot;title&quot; , &quot;text&quot; )\n\iRetrieves the size of a given window&apos;s client area.\i0" pattern="WinGetClientSize( &quot;title&quot; , &quot;text&quot; )"/>
          <Keyword text="WinGetHandle" descr="WinGetHandle( &quot;title&quot; , &quot;text&quot; )\n\iRetrieves the internal handle of a window.\i0" pattern="WinGetHandle( &quot;title&quot; , &quot;text&quot; )"/>
          <Keyword text="WinGetPos" descr="WinGetPos( &quot;title&quot; , &quot;text&quot; )\n\iRetrieves the position and size of a given window.\i0" pattern="WinGetPos( &quot;title&quot; , &quot;text&quot; )"/>
          <Keyword text="WinGetProcess" descr="WinGetProcess( &quot;title&quot; , &quot;text&quot; )\n\iRetrieves the Process ID (PID) associated with a window.\i0" pattern="WinGetProcess( &quot;title&quot; , &quot;text&quot; )"/>
          <Keyword text="WinGetState" descr="WinGetState( &quot;title&quot; , &quot;text&quot; )\n\iRetrieves the state of a given window.\i0" pattern="WinGetState( &quot;title&quot; , &quot;text&quot; )"/>
          <Keyword text="WinGetText" descr="WinGetText( &quot;title&quot; , &quot;text&quot; )\n\iRetrieves the text from a window.\i0" pattern="WinGetText( &quot;title&quot; , &quot;text&quot; )"/>
          <Keyword text="WinGetTitle" descr="WinGetTitle( &quot;title&quot; , &quot;text&quot; )\n\iRetrieves the full title from a window.\i0" pattern="WinGetTitle( &quot;title&quot; , &quot;text&quot; )"/>
          <Keyword text="WinKill" descr="WinKill( &quot;title&quot; , &quot;text&quot; )\n\iForces a window to close.\i0" pattern="WinKill( &quot;title&quot; , &quot;text&quot; )"/>
          <Keyword text="WinList" descr="WinList( &quot;title&quot; , &quot;text&quot; )\n\iRetrieves a list of windows.\i0" pattern="WinList( &quot;title&quot; , &quot;text&quot; )"/>
          <Keyword text="WinMenuSelectItem" descr="WinMenuSelectItem( &quot;title&quot; , &quot;text&quot; , &quot;item&quot; , &quot;item&quot; , &quot;item&quot; , &quot;item&quot; , &quot;item&quot; , &quot;item&quot; , &quot;item&quot; )\n\iInvokes a menu item of a window.\i0" pattern="WinMenuSelectItem( &quot;title&quot; , &quot;text&quot; , &quot;item&quot; , &quot;item&quot; , &quot;item&quot; , &quot;item&quot; , &quot;item&quot; , &quot;item&quot; , &quot;item&quot; )"/>
          <Keyword text="WinMinimizeAll" descr="WinMinimizeAll()\n\iMinimizes all windows.\i0" pattern="WinMinimizeAll()"/>
          <Keyword text="WinMinimizeAllUndo" descr="WinMinimizeAllUndo()\n\iUndoes a previous WinMinimizeAll function.\i0" pattern="WinMinimizeAllUndo()"/>
          <Keyword text="WinMove" descr="WinMove( &quot;title&quot; , &quot;text&quot; , x , y , width , height , speed )\n\iMoves and/or resizes a window.\i0" pattern="WinMove( &quot;title&quot; , &quot;text&quot; , x , y , width , height , speed )"/>
          <Keyword text="WinSetOnTop" descr="WinSetOnTop( &quot;title&quot; , &quot;text&quot; , flag )\n\iChange a window&apos;s &quot;Always On Top&quot; attribute.\i0" pattern="WinSetOnTop( &quot;title&quot; , &quot;text&quot; , flag )"/>
          <Keyword text="WinSetState" descr="WinSetState( &quot;title&quot; , &quot;text&quot; , flag )\n\iShows, hides, minimizes, maximizes, or restores a window.\i0" pattern="WinSetState( &quot;title&quot; , &quot;text&quot; , flag )"/>
          <Keyword text="WinSetTitle" descr="WinSetTitle( &quot;title&quot; , &quot;text&quot; , &quot;newtitle&quot; )\n\iChanges the title of a window.\i0" pattern="WinSetTitle( &quot;title&quot; , &quot;text&quot; , &quot;newtitle&quot; )"/>
          <Keyword text="WinSetTrans" descr="WinSetTrans( &quot;title&quot; , &quot;text&quot; , transparency )\n\iSets the transparency of a window. (Windows 2000/XP or later)\i0" pattern="WinSetTrans( &quot;title&quot; , &quot;text&quot; , transparency )"/>
          <Keyword text="WinWait" descr="WinWait( &quot;title&quot; , &quot;text&quot; , timeout )\n\iPauses execution of the script until the requested window exists.\i0" pattern="WinWait( &quot;title&quot; , &quot;text&quot; , timeout )"/>
          <Keyword text="WinWaitActive" descr="WinWaitActive( &quot;title&quot; , &quot;text&quot; , timeout )\n\iPauses execution of the script until the requested window is active.\i0" pattern="WinWaitActive( &quot;title&quot; , &quot;text&quot; , timeout )"/>
          <Keyword text="WinWaitClose" descr="WinWaitClose( &quot;title&quot; , &quot;text&quot; , timeout )\n\iPauses execution of the script until the requested window does not exist.\i0" pattern="WinWaitClose( &quot;title&quot; , &quot;text&quot; , timeout )"/>
          <Keyword text="WinWaitNotActive" descr="WinWaitNotActive( &quot;title&quot; , &quot;text&quot; , timeout )\n\iPauses execution of the script until the requested window is not active.\i0" pattern="WinWaitNotActive( &quot;title&quot; , &quot;text&quot; , timeout )"/>
        </Keywords>
      </Style>
      <Style  id="UDFS" name="UDFS" image="11" bold="0" italic="0" underline="0" clr="Keyword2" bkclr="#FFFFFFFF">
        <Keywords>
          <Keyword text="_ArrayAdd" descr="_ArrayAdd( ByRef $avArray , $vValue )\n\iAdds a specified value at the end of an existing array. (Requires: #include &lt;Array.au3&gt;)\i0" pattern="_ArrayAdd( ByRef $avArray , $vValue )"/>
          <Keyword text="_ArrayBinarySearch" descr="_ArrayBinarySearch( Const ByRef $avArray , $vValue , $iStart = 0 , $iEnd = 0 )\n\iUses the binary search algorithm to search through a 1-dimensional array. (Requires: #include &lt;Array.au3&gt;)\i0" pattern="_ArrayBinarySearch( Const ByRef $avArray , $vValue , $iStart = 0 , $iEnd = 0 )"/>
          <Keyword text="_ArrayCombinations" descr="_ArrayCombinations( ByRef $avArray , $iSet , $sDelim = &quot;&quot; )\n\iReturns an Array of the Combinations of a Set of Elements from a Selected Array (Requires: #include &lt;Array.au3&gt;)\i0" pattern="_ArrayCombinations( ByRef $avArray , $iSet , $sDelim = &quot;&quot; )"/>
          <Keyword text="_ArrayConcatenate" descr="_ArrayConcatenate( ByRef $avArrayTarget , Const ByRef $avArraySource , $iStart = 0 )\n\iConcatenate two arrays. (Requires: #include &lt;Array.au3&gt;)\i0" pattern="_ArrayConcatenate( ByRef $avArrayTarget , Const ByRef $avArraySource , $iStart = 0 )"/>
          <Keyword text="_ArrayDelete" descr="_ArrayDelete( ByRef $avArray , $iElement )\n\iDeletes the specified element from the given array. (Requires: #include &lt;Array.au3&gt;)\i0" pattern="_ArrayDelete( ByRef $avArray , $iElement )"/>
          <Keyword text="_ArrayDisplay" descr="_ArrayDisplay( Const ByRef $avArray , $sTitle = &quot;Array: ListView Display&quot; , $iItemLimit = -1 , $iTranspose = 0 , $sSeparator = &quot;&quot; , $sReplace = &quot;|&quot; , $sHeader = &quot;&quot; )\n\iDisplays given 1D or 2D array in a listview. (Requires: #include &lt;Array.au3&gt;)\i0" pattern="_ArrayDisplay( Const ByRef $avArray , $sTitle = &quot;Array: ListView Display&quot; , $iItemLimit = -1 , $iTranspose = 0 , $sSeparator = &quot;&quot; , $sReplace = &quot;|&quot; , $sHeader = &quot;&quot; )"/>
          <Keyword text="_ArrayFindAll" descr="_ArrayFindAll( Const ByRef $avArray , $vValue , $iStart = 0 , $iEnd = 0 , $iCase = 0 , $iCompare = 0 , $iSubItem = 0 )\n\iFind the indices of all occurrences of a search query between two points in a 1D or 2D array using _ArraySearch(). (Requires: #include &lt;Array.au3&gt;)\i0" pattern="_ArrayFindAll( Const ByRef $avArray , $vValue , $iStart = 0 , $iEnd = 0 , $iCase = 0 , $iCompare = 0 , $iSubItem = 0 )"/>
          <Keyword text="_ArrayInsert" descr="_ArrayInsert( ByRef $avArray , $iElement , $vValue = &quot;&quot; )\n\iAdd a new value at the specified position. (Requires: #include &lt;Array.au3&gt;)\i0" pattern="_ArrayInsert( ByRef $avArray , $iElement , $vValue = &quot;&quot; )"/>
          <Keyword text="_ArrayMax" descr="_ArrayMax( Const ByRef $avArray , $iCompNumeric = 0 , $iStart = 0 , $iEnd = 0 )\n\iReturns the highest value held in an array. (Requires: #include &lt;Array.au3&gt;)\i0" pattern="_ArrayMax( Const ByRef $avArray , $iCompNumeric = 0 , $iStart = 0 , $iEnd = 0 )"/>
          <Keyword text="_ArrayMaxIndex" descr="_ArrayMaxIndex( Const ByRef $avArray , $iCompNumeric = 0 , $iStart = 0 , $iEnd = 0 )\n\iReturns the index where the highest value occurs in the array. (Requires: #include &lt;Array.au3&gt;)\i0" pattern="_ArrayMaxIndex( Const ByRef $avArray , $iCompNumeric = 0 , $iStart = 0 , $iEnd = 0 )"/>
          <Keyword text="_ArrayMin" descr="_ArrayMin( Const ByRef $avArray , $iCompNumeric = 0 , $iStart = 0 , $iEnd = 0 )\n\iReturns the lowest value held in an array. (Requires: #include &lt;Array.au3&gt;)\i0" pattern="_ArrayMin( Const ByRef $avArray , $iCompNumeric = 0 , $iStart = 0 , $iEnd = 0 )"/>
          <Keyword text="_ArrayMinIndex" descr="_ArrayMinIndex( Const ByRef $avArray , $iCompNumeric = 0 , $iStart = 0 , $iEnd = 0 )\n\iReturns the index where the lowest value occurs in the array. (Requires: #include &lt;Array.au3&gt;)\i0" pattern="_ArrayMinIndex( Const ByRef $avArray , $iCompNumeric = 0 , $iStart = 0 , $iEnd = 0 )"/>
          <Keyword text="_ArrayPermute" descr="_ArrayPermute( ByRef $avArray , $sDelim = &quot;&quot; )\n\iReturns an Array of the Permutations of all Elements in an Array (Requires: #include &lt;Array.au3&gt;)\i0" pattern="_ArrayPermute( ByRef $avArray , $sDelim = &quot;&quot; )"/>
          <Keyword text="_ArrayPop" descr="_ArrayPop( ByRef $avArray )\n\iReturns the last element of an array, deleting that element from the array at the same time. (Requires: #include &lt;Array.au3&gt;)\i0" pattern="_ArrayPop( ByRef $avArray )"/>
          <Keyword text="_ArrayPush" descr="_ArrayPush( ByRef $avArray , $vValue , $iDirection = 0 )\n\iAdd new values without increasing array size by inserting at the end the new value and deleting the first one or vice versa. (Requires: #include &lt;Array.au3&gt;)\i0" pattern="_ArrayPush( ByRef $avArray , $vValue , $iDirection = 0 )"/>
          <Keyword text="_ArrayReverse" descr="_ArrayReverse( ByRef $avArray , $iStart = 0 , $iEnd = 0 )\n\iTakes the given array and reverses the order in which the elements appear in the array. (Requires: #include &lt;Array.au3&gt;)\i0" pattern="_ArrayReverse( ByRef $avArray , $iStart = 0 , $iEnd = 0 )"/>
          <Keyword text="_ArraySearch" descr="_ArraySearch( Const ByRef $avArray , $vValue , $iStart = 0 , $iEnd = 0 , $iCase = 0 , $iCompare= 0 , $iForward = 1 , $iSubItem = -1 )\n\iFinds an entry within a 1D or 2D array. Similar to _ArrayBinarySearch(), except that the array does not need to be sorted. (Requires: #include &lt;Array.au3&gt;)\i0" pattern="_ArraySearch( Const ByRef $avArray , $vValue , $iStart = 0 , $iEnd = 0 , $iCase = 0 , $iCompare= 0 , $iForward = 1 , $iSubItem = -1 )"/>
          <Keyword text="_ArraySort" descr="_ArraySort( ByRef $avArray , $iDescending = 0 , $iStart = 0 , $iEnd = 0 , $iSubItem = 0 )\n\iSort a 1D or 2D array on a specific index using the quicksort/insertionsort algorithms. (Requires: #include &lt;Array.au3&gt;)\i0" pattern="_ArraySort( ByRef $avArray , $iDescending = 0 , $iStart = 0 , $iEnd = 0 , $iSubItem = 0 )"/>
          <Keyword text="_ArraySwap" descr="_ArraySwap( ByRef $vItem1 , ByRef $vItem2 )\n\iSwaps two items. (Requires: #include &lt;Array.au3&gt;)\i0" pattern="_ArraySwap( ByRef $vItem1 , ByRef $vItem2 )"/>
          <Keyword text="_ArrayToClip" descr="_ArrayToClip( Const ByRef $avArray , $iStart = 0 , $iEnd = 0 )\n\iSends the contents of an array to the clipboard, each element delimited by a carriage return. (Requires: #include &lt;Array.au3&gt;)\i0" pattern="_ArrayToClip( Const ByRef $avArray , $iStart = 0 , $iEnd = 0 )"/>
          <Keyword text="_ArrayToString" descr="_ArrayToString( Const ByRef $avArray , $sDelim = &quot;|&quot; , $iStart = 0 , $iEnd = 0 )\n\iPlaces the elements of an array into a single string, separated by the specified delimiter. (Requires: #include &lt;Array.au3&gt;)\i0" pattern="_ArrayToString( Const ByRef $avArray , $sDelim = &quot;|&quot; , $iStart = 0 , $iEnd = 0 )"/>
          <Keyword text="_ArrayTrim" descr="_ArrayTrim( ByRef $avArray , $iTrimNum , $iDirection = 0 , $iStart = 0 , $iEnd = 0 )\n\iTrims a certain number of characters from all elements in an array. (Requires: #include &lt;Array.au3&gt;)\i0" pattern="_ArrayTrim( ByRef $avArray , $iTrimNum , $iDirection = 0 , $iStart = 0 , $iEnd = 0 )"/>
          <Keyword text="_ArrayUnique" descr="_ArrayUnique( $aArray , $iDimension = 1 , $iBase = 0 , $iCase = 0 , $vDelim = &quot;|&quot; )\n\iReturns the Unique Elements of a 1-dimensional array. (Requires: #include &lt;Array.au3&gt;)\i0" pattern="_ArrayUnique( $aArray , $iDimension = 1 , $iBase = 0 , $iCase = 0 , $vDelim = &quot;|&quot; )"/>
          <Keyword text="_Assert" descr="_Assert( $sCondition , $bExit = True , $nCode = 0x7FFFFFFF , $sLine = @ScriptLineNumber )\n\iDisplay a message if assertion fails. (Requires: #include &lt;Debug.au3&gt;)\i0" pattern="_Assert( $sCondition , $bExit = True , $nCode = 0x7FFFFFFF , $sLine = @ScriptLineNumber )"/>
          <Keyword text="_ChooseColor" descr="_ChooseColor( $iReturnType = 0 , $iColorRef = 0 , $iRefType = 0 , $hWndOwnder = 0 )\n\iCreates a Color dialog box that enables the user to select a color (Requires: #include &lt;Misc.au3&gt;)\i0" pattern="_ChooseColor( $iReturnType = 0 , $iColorRef = 0 , $iRefType = 0 , $hWndOwnder = 0 )"/>
          <Keyword text="_ChooseFont" descr="_ChooseFont( $sFontName = &quot;Courier New&quot; , $iPointSize = 10 , $iColorRef = 0 , $iFontWeight = 0 , $iItalic = False , $iUnderline = False , $iStrikethru = False , $hWndOwner = 0 )\n\iCreates a Font dialog box that enables the user to choose attributes for a logical font. (Requires: #include &lt;Misc.au3&gt;)\i0" pattern="_ChooseFont( $sFontName = &quot;Courier New&quot; , $iPointSize = 10 , $iColorRef = 0 , $iFontWeight = 0 , $iItalic = False , $iUnderline = False , $iStrikethru = False , $hWndOwner = 0 )"/>
          <Keyword text="_ClipBoard_ChangeChain" descr="_ClipBoard_ChangeChain( $hRemove , $hNewNext )\n\iRemoves a specified window from the chain of clipboard viewers (Requires: #include &lt;Clipboard.au3&gt;)\i0" pattern="_ClipBoard_ChangeChain( $hRemove , $hNewNext )"/>
          <Keyword text="_ClipBoard_Close" descr="_ClipBoard_Close()\n\iCloses the clipboard (Requires: #include &lt;Clipboard.au3&gt;)\i0" pattern="_ClipBoard_Close()"/>
          <Keyword text="_ClipBoard_CountFormats" descr="_ClipBoard_CountFormats()\n\iRetrieves the number of different data formats currently on the clipboard (Requires: #include &lt;Clipboard.au3&gt;)\i0" pattern="_ClipBoard_CountFormats()"/>
          <Keyword text="_ClipBoard_Empty" descr="_ClipBoard_Empty()\n\iEmpties the clipboard and frees handles to data in the clipboard (Requires: #include &lt;Clipboard.au3&gt;)\i0" pattern="_ClipBoard_Empty()"/>
          <Keyword text="_ClipBoard_EnumFormats" descr="_ClipBoard_EnumFormats( $iFormat )\n\iEnumerates the data formats currently available on the clipboard (Requires: #include &lt;Clipboard.au3&gt;)\i0" pattern="_ClipBoard_EnumFormats( $iFormat )"/>
          <Keyword text="_ClipBoard_FormatStr" descr="_ClipBoard_FormatStr( $iFormat )\n\iReturns a string representation of a standard clipboard format (Requires: #include &lt;Clipboard.au3&gt;)\i0" pattern="_ClipBoard_FormatStr( $iFormat )"/>
          <Keyword text="_ClipBoard_GetData" descr="_ClipBoard_GetData( $iFormat = 1 )\n\iRetrieves data from the clipboard in a specified format (Requires: #include &lt;Clipboard.au3&gt;)\i0" pattern="_ClipBoard_GetData( $iFormat = 1 )"/>
          <Keyword text="_ClipBoard_GetDataEx" descr="_ClipBoard_GetDataEx( $iFormat = 1 )\n\iRetrieves data from the clipboard in a specified format (Requires: #include &lt;Clipboard.au3&gt;)\i0" pattern="_ClipBoard_GetDataEx( $iFormat = 1 )"/>
          <Keyword text="_ClipBoard_GetFormatName" descr="_ClipBoard_GetFormatName( $iFormat )\n\iRetrieves the name of the specified registered format (Requires: #include &lt;Clipboard.au3&gt;)\i0" pattern="_ClipBoard_GetFormatName( $iFormat )"/>
          <Keyword text="_ClipBoard_GetOpenWindow" descr="_ClipBoard_GetOpenWindow()\n\iRetrieves the handle to the window that currently has the clipboard open (Requires: #include &lt;Clipboard.au3&gt;)\i0" pattern="_ClipBoard_GetOpenWindow()"/>
          <Keyword text="_ClipBoard_GetOwner" descr="_ClipBoard_GetOwner()\n\iRetrieves the window handle of the current owner of the clipboard (Requires: #include &lt;Clipboard.au3&gt;)\i0" pattern="_ClipBoard_GetOwner()"/>
          <Keyword text="_ClipBoard_GetPriorityFormat" descr="_ClipBoard_GetPriorityFormat( $aFormats )\n\iRetrieves the first available clipboard format in the specified list (Requires: #include &lt;Clipboard.au3&gt;)\i0" pattern="_ClipBoard_GetPriorityFormat( $aFormats )"/>
          <Keyword text="_ClipBoard_GetSequenceNumber" descr="_ClipBoard_GetSequenceNumber()\n\iRetrieves the clipboard sequence number for the current window station (Requires: #include &lt;Clipboard.au3&gt;)\i0" pattern="_ClipBoard_GetSequenceNumber()"/>
          <Keyword text="_ClipBoard_GetViewer" descr="_ClipBoard_GetViewer()\n\iRetrieves the handle to the first window in the clipboard viewer chain (Requires: #include &lt;Clipboard.au3&gt;)\i0" pattern="_ClipBoard_GetViewer()"/>
          <Keyword text="_ClipBoard_IsFormatAvailable" descr="_ClipBoard_IsFormatAvailable( $iFormat )\n\iDetermines whether the clipboard contains data in the specified format (Requires: #include &lt;Clipboard.au3&gt;)\i0" pattern="_ClipBoard_IsFormatAvailable( $iFormat )"/>
          <Keyword text="_ClipBoard_Open" descr="_ClipBoard_Open( $hOwner )\n\iOpens the clipboard and prevents other applications from modifying the clipboard (Requires: #include &lt;Clipboard.au3&gt;)\i0" pattern="_ClipBoard_Open( $hOwner )"/>
          <Keyword text="_ClipBoard_RegisterFormat" descr="_ClipBoard_RegisterFormat( $sFormat )\n\iRegisters a new clipboard format (Requires: #include &lt;Clipboard.au3&gt;)\i0" pattern="_ClipBoard_RegisterFormat( $sFormat )"/>
          <Keyword text="_ClipBoard_SetData" descr="_ClipBoard_SetData( $vData , $iFormat = 1 )\n\iPlaces data on the clipboard in a specified clipboard format (Requires: #include &lt;Clipboard.au3&gt;)\i0" pattern="_ClipBoard_SetData( $vData , $iFormat = 1 )"/>
          <Keyword text="_ClipBoard_SetDataEx" descr="_ClipBoard_SetDataEx( ByRef $hMemory , $iFormat = 1 )\n\iPlaces data on the clipboard in a specified clipboard format (Requires: #include &lt;Clipboard.au3&gt;)\i0" pattern="_ClipBoard_SetDataEx( ByRef $hMemory , $iFormat = 1 )"/>
          <Keyword text="_ClipBoard_SetViewer" descr="_ClipBoard_SetViewer( $hViewer )\n\iAdds the specified window to the chain of clipboard viewers (Requires: #include &lt;Clipboard.au3&gt;)\i0" pattern="_ClipBoard_SetViewer( $hViewer )"/>
          <Keyword text="_ClipPutFile" descr="_ClipPutFile( $sFile , $sSeparator = &quot;|&quot; )\n\iCopy Files to Clipboard Like Explorer does (Requires: #include &lt;Misc.au3&gt;)\i0" pattern="_ClipPutFile( $sFile , $sSeparator = &quot;|&quot; )"/>
          <Keyword text="_ColorConvertHSLtoRGB" descr="_ColorConvertHSLtoRGB( $avArray )\n\iConverts HSL to RGB (Requires: #include &lt;Color.au3&gt;)\i0" pattern="_ColorConvertHSLtoRGB( $avArray )"/>
          <Keyword text="_ColorConvertRGBtoHSL" descr="_ColorConvertRGBtoHSL( $avArray )\n\iConverts RGB to HSL (Requires: #include &lt;Color.au3&gt;)\i0" pattern="_ColorConvertRGBtoHSL( $avArray )"/>
          <Keyword text="_ColorGetBlue" descr="_ColorGetBlue( $nColor )\n\iReturns the blue component of a given color. (Requires: #include &lt;Color.au3&gt;)\i0" pattern="_ColorGetBlue( $nColor )"/>
          <Keyword text="_ColorGetCOLORREF" descr="_ColorGetCOLORREF( $nColor )\n\iReturns the COLORREF color. (Requires: #include &lt;Color.au3&gt;)\i0" pattern="_ColorGetCOLORREF( $nColor )"/>
          <Keyword text="_ColorGetGreen" descr="_ColorGetGreen( $nColor )\n\iReturns the green component of a given color. (Requires: #include &lt;Color.au3&gt;)\i0" pattern="_ColorGetGreen( $nColor )"/>
          <Keyword text="_ColorGetRGB" descr="_ColorGetRGB( $nColor )\n\iReturns an array containing RGB values in their respective positions. (Requires: #include &lt;Color.au3&gt;)\i0" pattern="_ColorGetRGB( $nColor )"/>
          <Keyword text="_ColorGetRed" descr="_ColorGetRed( $nColor )\n\iReturns the red component of a given color. (Requires: #include &lt;Color.au3&gt;)\i0" pattern="_ColorGetRed( $nColor )"/>
          <Keyword text="_ColorSetCOLORREF" descr="_ColorSetCOLORREF( $aColor )\n\iReturns the COLORREF color. (Requires: #include &lt;Color.au3&gt;)\i0" pattern="_ColorSetCOLORREF( $aColor )"/>
          <Keyword text="_ColorSetRGB" descr="_ColorSetRGB( $aColor )\n\iReturns the RGB color. (Requires: #include &lt;Color.au3&gt;)\i0" pattern="_ColorSetRGB( $aColor )"/>
          <Keyword text="_Crypt_DecryptData" descr="_Crypt_DecryptData( $vData , $vCryptKey , $iALG_ID , $fFinal = True )\n\iDecrypts data using the supplied key (Requires: #include &lt;Crypt.au3&gt;)\i0" pattern="_Crypt_DecryptData( $vData , $vCryptKey , $iALG_ID , $fFinal = True )"/>
          <Keyword text="_Crypt_DecryptFile" descr="_Crypt_DecryptFile( $sSourceFile , $sDestinationFile , $vCryptKey , $iALG_ID )\n\iDecrypts a file with specified key and algorithm (Requires: #include &lt;Crypt.au3&gt;)\i0" pattern="_Crypt_DecryptFile( $sSourceFile , $sDestinationFile , $vCryptKey , $iALG_ID )"/>
          <Keyword text="_Crypt_DeriveKey" descr="_Crypt_DeriveKey( $vPassword , $iALG_ID , $iHash_ALG_ID = $CALG_MD5 )\n\iCreates a key from algorithm and password (Requires: #include &lt;Crypt.au3&gt;)\i0" pattern="_Crypt_DeriveKey( $vPassword , $iALG_ID , $iHash_ALG_ID = $CALG_MD5 )"/>
          <Keyword text="_Crypt_DestroyKey" descr="_Crypt_DestroyKey( $hCryptKey )\n\iFrees the resources used by a key (Requires: #include &lt;Crypt.au3&gt;)\i0" pattern="_Crypt_DestroyKey( $hCryptKey )"/>
          <Keyword text="_Crypt_EncryptData" descr="_Crypt_EncryptData( $vData , $vCryptKey , $iALG_ID , $fFinal = True )\n\iEncrypts data using the supplied key (Requires: #include &lt;Crypt.au3&gt;)\i0" pattern="_Crypt_EncryptData( $vData , $vCryptKey , $iALG_ID , $fFinal = True )"/>
          <Keyword text="_Crypt_EncryptFile" descr="_Crypt_EncryptFile( $sSourceFile , $sDestinationFile , $vCryptKey , $iALG_ID )\n\iEncrypts a file with specified key and algorithm (Requires: #include &lt;Crypt.au3&gt;)\i0" pattern="_Crypt_EncryptFile( $sSourceFile , $sDestinationFile , $vCryptKey , $iALG_ID )"/>
          <Keyword text="_Crypt_HashData" descr="_Crypt_HashData( $vData , $iALG_ID , $fFinal = True , $hCryptHash = 0 )\n\iHash data with specified algorithm (Requires: #include &lt;Crypt.au3&gt;)\i0" pattern="_Crypt_HashData( $vData , $iALG_ID , $fFinal = True , $hCryptHash = 0 )"/>
          <Keyword text="_Crypt_HashFile" descr="_Crypt_HashFile( $sFile , $iALG_ID )\n\iHash a string with specified algorithm (Requires: #include &lt;Crypt.au3&gt;)\i0" pattern="_Crypt_HashFile( $sFile , $iALG_ID )"/>
          <Keyword text="_Crypt_Shutdown" descr="_Crypt_Shutdown()\n\iUninitialize the Crypt library (Requires: #include &lt;Crypt.au3&gt;)\i0" pattern="_Crypt_Shutdown()"/>
          <Keyword text="_Crypt_Startup" descr="_Crypt_Startup()\n\iInitialize the Crypt library (Requires: #include &lt;Crypt.au3&gt;)\i0" pattern="_Crypt_Startup()"/>
          <Keyword text="_DateAdd" descr="_DateAdd( $sType , $iValToAdd , $sDate )\n\iCalculates a new date based on a given date and add an interval. (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_DateAdd( $sType , $iValToAdd , $sDate )"/>
          <Keyword text="_DateDayOfWeek" descr="_DateDayOfWeek( $iDayNum , $iShort = 0 )\n\iReturns the name of the weekday, based on the specified day. (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_DateDayOfWeek( $iDayNum , $iShort = 0 )"/>
          <Keyword text="_DateDaysInMonth" descr="_DateDaysInMonth( $iYear , $iMonthNum )\n\iReturns the number of days in a month, based on the specified month and year. (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_DateDaysInMonth( $iYear , $iMonthNum )"/>
          <Keyword text="_DateDiff" descr="_DateDiff( $sType , $sStartDate , $sEndDate )\n\iReturns the difference between 2 dates, expressed in the type requested (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_DateDiff( $sType , $sStartDate , $sEndDate )"/>
          <Keyword text="_DateIsLeapYear" descr="_DateIsLeapYear( $iYear )\n\iChecks a given year to see if it is a leap year. (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_DateIsLeapYear( $iYear )"/>
          <Keyword text="_DateIsValid" descr="_DateIsValid( $sDate )\n\iChecks the given date to determine if it is a valid date. (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_DateIsValid( $sDate )"/>
          <Keyword text="_DateTimeFormat" descr="_DateTimeFormat( $sDate , $sType )\n\iReturns the date in the PC&apos;s regional settings format. (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_DateTimeFormat( $sDate , $sType )"/>
          <Keyword text="_DateTimeSplit" descr="_DateTimeSplit( $sDate , ByRef $asDatePart , ByRef $iTimePart )\n\iSplit a string containing Date and Time into two separate Arrays. (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_DateTimeSplit( $sDate , ByRef $asDatePart , ByRef $iTimePart )"/>
          <Keyword text="_DateToDayOfWeek" descr="_DateToDayOfWeek( $iYear , $iMonth , $iDay )\n\iReturns the weekdaynumber for a given date. (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_DateToDayOfWeek( $iYear , $iMonth , $iDay )"/>
          <Keyword text="_DateToDayOfWeekISO" descr="_DateToDayOfWeekISO( $iYear , $iMonth , $iDay )\n\iReturns the ISO weekdaynumber for a given date. (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_DateToDayOfWeekISO( $iYear , $iMonth , $iDay )"/>
          <Keyword text="_DateToDayValue" descr="_DateToDayValue( $iYear , $iMonth , $iDay )\n\iReturns the daynumber since noon 4713 BC January 1 for a given Gregorian date. (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_DateToDayValue( $iYear , $iMonth , $iDay )"/>
          <Keyword text="_DateToMonth" descr="_DateToMonth( $iMonth , $ishort = 0 )\n\iReturns the name of the Month, based on the specified month number. (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_DateToMonth( $iMonth , $ishort = 0 )"/>
          <Keyword text="_Date_Time_CompareFileTime" descr="_Date_Time_CompareFileTime( $pFileTime1 , $pFileTime2 )\n\iCompares two file times (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_CompareFileTime( $pFileTime1 , $pFileTime2 )"/>
          <Keyword text="_Date_Time_DOSDateTimeToArray" descr="_Date_Time_DOSDateTimeToArray( $iDosDate , $iDosTime )\n\iDecode a DOS date/time to an array (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_DOSDateTimeToArray( $iDosDate , $iDosTime )"/>
          <Keyword text="_Date_Time_DOSDateTimeToFileTime" descr="_Date_Time_DOSDateTimeToFileTime( $iFatDate , $iFatTime )\n\iConverts MS-DOS date and time values to a file time (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_DOSDateTimeToFileTime( $iFatDate , $iFatTime )"/>
          <Keyword text="_Date_Time_DOSDateTimeToStr" descr="_Date_Time_DOSDateTimeToStr( $iDosDate , $iDosTime )\n\iDecode a DOS date to a string (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_DOSDateTimeToStr( $iDosDate , $iDosTime )"/>
          <Keyword text="_Date_Time_DOSDateToArray" descr="_Date_Time_DOSDateToArray( $iDosDate )\n\iDecode a DOS date to an array (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_DOSDateToArray( $iDosDate )"/>
          <Keyword text="_Date_Time_DOSDateToStr" descr="_Date_Time_DOSDateToStr( $iDosDate )\n\iDecode a DOS date to a string (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_DOSDateToStr( $iDosDate )"/>
          <Keyword text="_Date_Time_DOSTimeToArray" descr="_Date_Time_DOSTimeToArray( $iDosTime )\n\iDecode a DOS time to an array (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_DOSTimeToArray( $iDosTime )"/>
          <Keyword text="_Date_Time_DOSTimeToStr" descr="_Date_Time_DOSTimeToStr( $iDosTime )\n\iDecode a DOS time to a string (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_DOSTimeToStr( $iDosTime )"/>
          <Keyword text="_Date_Time_EncodeFileTime" descr="_Date_Time_EncodeFileTime( $iMonth , $iDay , $iYear , $iHour = 0 , $iMinute = 0 , $iSecond = 0 , $iMSeconds = 0 )\n\iEncodes and returns a $tagFILETIME structure (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_EncodeFileTime( $iMonth , $iDay , $iYear , $iHour = 0 , $iMinute = 0 , $iSecond = 0 , $iMSeconds = 0 )"/>
          <Keyword text="_Date_Time_EncodeSystemTime" descr="_Date_Time_EncodeSystemTime( $iMonth , $iDay , $iYear , $iHour = 0 , $iMinute = 0 , $iSecond = 0 , $iMSeconds = 0 )\n\iEncodes and returns a $tagSYSTEMTIME structure (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_EncodeSystemTime( $iMonth , $iDay , $iYear , $iHour = 0 , $iMinute = 0 , $iSecond = 0 , $iMSeconds = 0 )"/>
          <Keyword text="_Date_Time_FileTimeToArray" descr="_Date_Time_FileTimeToArray( ByRef $tFileTime )\n\iDecode a file time to an array (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_FileTimeToArray( ByRef $tFileTime )"/>
          <Keyword text="_Date_Time_FileTimeToDOSDateTime" descr="_Date_Time_FileTimeToDOSDateTime( $pFileTime )\n\iConverts MS-DOS date and time values to a file time (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_FileTimeToDOSDateTime( $pFileTime )"/>
          <Keyword text="_Date_Time_FileTimeToLocalFileTime" descr="_Date_Time_FileTimeToLocalFileTime( $pFileTime )\n\iConverts a file time based on the Coordinated Universal Time to a local file time (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_FileTimeToLocalFileTime( $pFileTime )"/>
          <Keyword text="_Date_Time_FileTimeToStr" descr="_Date_Time_FileTimeToStr( ByRef $tFileTime , $bFmt = 0 )\n\iDecode a file time to a date/time string (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_FileTimeToStr( ByRef $tFileTime , $bFmt = 0 )"/>
          <Keyword text="_Date_Time_FileTimeToSystemTime" descr="_Date_Time_FileTimeToSystemTime( $pFileTime )\n\iConverts a file time to system time format (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_FileTimeToSystemTime( $pFileTime )"/>
          <Keyword text="_Date_Time_GetFileTime" descr="_Date_Time_GetFileTime( $hFile )\n\iRetrieves the date and time that a file was created, accessed and modified (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_GetFileTime( $hFile )"/>
          <Keyword text="_Date_Time_GetLocalTime" descr="_Date_Time_GetLocalTime()\n\iRetrieves the current local date and time (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_GetLocalTime()"/>
          <Keyword text="_Date_Time_GetSystemTime" descr="_Date_Time_GetSystemTime()\n\iRetrieves the current system date and time expressed in UTC (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_GetSystemTime()"/>
          <Keyword text="_Date_Time_GetSystemTimeAdjustment" descr="_Date_Time_GetSystemTimeAdjustment()\n\iDetermines whether the system is applying periodic time adjustments (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_GetSystemTimeAdjustment()"/>
          <Keyword text="_Date_Time_GetSystemTimeAsFileTime" descr="_Date_Time_GetSystemTimeAsFileTime()\n\iRetrieves the current system date and time expressed in UTC (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_GetSystemTimeAsFileTime()"/>
          <Keyword text="_Date_Time_GetSystemTimes" descr="_Date_Time_GetSystemTimes()\n\iRetrieves system timing information (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_GetSystemTimes()"/>
          <Keyword text="_Date_Time_GetTickCount" descr="_Date_Time_GetTickCount()\n\iRetrieves the number of milliseconds that have elapsed since Windows was started (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_GetTickCount()"/>
          <Keyword text="_Date_Time_GetTimeZoneInformation" descr="_Date_Time_GetTimeZoneInformation()\n\iRetrieves the current time zone settings (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_GetTimeZoneInformation()"/>
          <Keyword text="_Date_Time_LocalFileTimeToFileTime" descr="_Date_Time_LocalFileTimeToFileTime( $pLocalTime )\n\iConverts a local file time to a file time based on UTC (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_LocalFileTimeToFileTime( $pLocalTime )"/>
          <Keyword text="_Date_Time_SetFileTime" descr="_Date_Time_SetFileTime( $hFile , $pCreateTime , $pLastAccess , $pLastWrite )\n\iSets the date and time that a file was created, accessed and modified (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_SetFileTime( $hFile , $pCreateTime , $pLastAccess , $pLastWrite )"/>
          <Keyword text="_Date_Time_SetLocalTime" descr="_Date_Time_SetLocalTime( $pSystemTime )\n\iSets the current local date and time (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_SetLocalTime( $pSystemTime )"/>
          <Keyword text="_Date_Time_SetSystemTime" descr="_Date_Time_SetSystemTime( $pSystemTime )\n\iSets the current system time and date, expressed in UTC (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_SetSystemTime( $pSystemTime )"/>
          <Keyword text="_Date_Time_SetSystemTimeAdjustment" descr="_Date_Time_SetSystemTimeAdjustment( $iAdjustment , $fDisabled )\n\iEnables or disables periodic time adjustments to the system&apos;s time of day clock (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_SetSystemTimeAdjustment( $iAdjustment , $fDisabled )"/>
          <Keyword text="_Date_Time_SetTimeZoneInformation" descr="_Date_Time_SetTimeZoneInformation( $iBias , $sStdName , $tStdDate , $iStdBias , $sDayName , $tDayDate , $iDayBias )\n\iSets the current time zone settings (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_SetTimeZoneInformation( $iBias , $sStdName , $tStdDate , $iStdBias , $sDayName , $tDayDate , $iDayBias )"/>
          <Keyword text="_Date_Time_SystemTimeToArray" descr="_Date_Time_SystemTimeToArray( ByRef $tSystemTime )\n\iDecode a system time to an array (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_SystemTimeToArray( ByRef $tSystemTime )"/>
          <Keyword text="_Date_Time_SystemTimeToDateStr" descr="_Date_Time_SystemTimeToDateStr( ByRef $tSystemTime , $bFmt = 0 )\n\iDecode a system time to a date string (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_SystemTimeToDateStr( ByRef $tSystemTime , $bFmt = 0 )"/>
          <Keyword text="_Date_Time_SystemTimeToDateTimeStr" descr="_Date_Time_SystemTimeToDateTimeStr( ByRef $tSystemTime , $bFmt = 0 )\n\iDecode a system time to a date/time string (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_SystemTimeToDateTimeStr( ByRef $tSystemTime , $bFmt = 0 )"/>
          <Keyword text="_Date_Time_SystemTimeToFileTime" descr="_Date_Time_SystemTimeToFileTime( $pSystemTime )\n\iConverts a system time to file time format (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_SystemTimeToFileTime( $pSystemTime )"/>
          <Keyword text="_Date_Time_SystemTimeToTimeStr" descr="_Date_Time_SystemTimeToTimeStr( ByRef $tSystemTime )\n\iDecode a system time to a time string (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_SystemTimeToTimeStr( ByRef $tSystemTime )"/>
          <Keyword text="_Date_Time_SystemTimeToTzSpecificLocalTime" descr="_Date_Time_SystemTimeToTzSpecificLocalTime( $pUTC , $pTimeZone = 0 )\n\iConverts a UTC time to a specified time zone&apos;s corresponding local time (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_SystemTimeToTzSpecificLocalTime( $pUTC , $pTimeZone = 0 )"/>
          <Keyword text="_Date_Time_TzSpecificLocalTimeToSystemTime" descr="_Date_Time_TzSpecificLocalTimeToSystemTime( $pLocalTime , $pTimeZone = 0 )\n\iConverts a local time to a time in UTC (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Date_Time_TzSpecificLocalTimeToSystemTime( $pLocalTime , $pTimeZone = 0 )"/>
          <Keyword text="_DayValueToDate" descr="_DayValueToDate( $iJulianDate , ByRef $iYear , ByRef $iMonth , ByRef $iDay )\n\iAdd the given days since noon 4713 BC January 1 and returns the Gregorian date. (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_DayValueToDate( $iJulianDate , ByRef $iYear , ByRef $iMonth , ByRef $iDay )"/>
          <Keyword text="_DebugBugReportEnv" descr="_DebugBugReportEnv()\n\iOutputs a string containing information for Bug report submission. (Requires: #include &lt;Debug.au3&gt;)\i0" pattern="_DebugBugReportEnv()"/>
          <Keyword text="_DebugOut" descr="_DebugOut( $sOutput , $bActivate )\n\iDisplays output on a debugging session started by _DebugSetup() (Requires: #include &lt;Debug.au3&gt;)\i0" pattern="_DebugOut( $sOutput , $bActivate )"/>
          <Keyword text="_DebugReport" descr="_DebugReport( $sData , $bLastError = False , $bExit = False )\n\iWrites to a debugging session (Requires: #include &lt;Debug.au3&gt;)\i0" pattern="_DebugReport( $sData , $bLastError = False , $bExit = False )"/>
          <Keyword text="_DebugReportEx" descr="_DebugReportEx( $sData , $bLastError = False , $bExit = False )\n\iWrites to a debugging session a formatted message (Requires: #include &lt;Debug.au3&gt;)\i0" pattern="_DebugReportEx( $sData , $bLastError = False , $bExit = False )"/>
          <Keyword text="_DebugReportVar" descr="_DebugReportVar( $sVarname , $vVar , $bErrExt = False )\n\iWrites to debugging session the content of a variable (Requires: #include &lt;Debug.au3&gt;)\i0" pattern="_DebugReportVar( $sVarname , $vVar , $bErrExt = False )"/>
          <Keyword text="_DebugSetup" descr="_DebugSetup( $sTitle = Default , $bBugReportInfos = False , $vReportType = 1 , $sLogFile = &quot;&quot; )\n\iSetups up a debug session using a specify reporting (Requires: #include &lt;Debug.au3&gt;)\i0" pattern="_DebugSetup( $sTitle = Default , $bBugReportInfos = False , $vReportType = 1 , $sLogFile = &quot;&quot; )"/>
          <Keyword text="_Degree" descr="_Degree( $nRadians )\n\iConverts radians to degrees. (Requires: #include &lt;Math.au3&gt;)\i0" pattern="_Degree( $nRadians )"/>
          <Keyword text="_EventLog__Backup" descr="_EventLog__Backup( $hEventLog , $sFileName )\n\iSaves the event log to a backup file (Requires: #include &lt;EventLog.au3&gt;)\i0" pattern="_EventLog__Backup( $hEventLog , $sFileName )"/>
          <Keyword text="_EventLog__Clear" descr="_EventLog__Clear( $hEventLog , $sFileName )\n\iClears the event log (Requires: #include &lt;EventLog.au3&gt;)\i0" pattern="_EventLog__Clear( $hEventLog , $sFileName )"/>
          <Keyword text="_EventLog__Close" descr="_EventLog__Close( $hEventLog )\n\iCloses a read handle to the event log (Requires: #include &lt;EventLog.au3&gt;)\i0" pattern="_EventLog__Close( $hEventLog )"/>
          <Keyword text="_EventLog__Count" descr="_EventLog__Count( $hEventLog )\n\iRetrieves the number of records in the event log (Requires: #include &lt;EventLog.au3&gt;)\i0" pattern="_EventLog__Count( $hEventLog )"/>
          <Keyword text="_EventLog__DeregisterSource" descr="_EventLog__DeregisterSource( $hEventLog )\n\iCloses a write handle to the event log (Requires: #include &lt;EventLog.au3&gt;)\i0" pattern="_EventLog__DeregisterSource( $hEventLog )"/>
          <Keyword text="_EventLog__Full" descr="_EventLog__Full( $hEventLog )\n\iRetrieves whether the event log is full (Requires: #include &lt;EventLog.au3&gt;)\i0" pattern="_EventLog__Full( $hEventLog )"/>
          <Keyword text="_EventLog__Notify" descr="_EventLog__Notify( $hEventLog , $hEvent )\n\iEnables an application to receive event notifications (Requires: #include &lt;EventLog.au3&gt;)\i0" pattern="_EventLog__Notify( $hEventLog , $hEvent )"/>
          <Keyword text="_EventLog__Oldest" descr="_EventLog__Oldest( $hEventLog )\n\iRetrieves the absolute record number of the oldest record in the event log (Requires: #include &lt;EventLog.au3&gt;)\i0" pattern="_EventLog__Oldest( $hEventLog )"/>
          <Keyword text="_EventLog__Open" descr="_EventLog__Open( $sServerName , $sSourceName )\n\iOpens a handle to the event log (Requires: #include &lt;EventLog.au3&gt;)\i0" pattern="_EventLog__Open( $sServerName , $sSourceName )"/>
          <Keyword text="_EventLog__OpenBackup" descr="_EventLog__OpenBackup( $sServerName , $sFileName )\n\iOpens a handle to a backup event log (Requires: #include &lt;EventLog.au3&gt;)\i0" pattern="_EventLog__OpenBackup( $sServerName , $sFileName )"/>
          <Keyword text="_EventLog__Read" descr="_EventLog__Read( $hEventLog , $fRead = True , $fForward = True , $iOffset = 0 )\n\iReads an entry from the event log (Requires: #include &lt;EventLog.au3&gt;)\i0" pattern="_EventLog__Read( $hEventLog , $fRead = True , $fForward = True , $iOffset = 0 )"/>
          <Keyword text="_EventLog__RegisterSource" descr="_EventLog__RegisterSource( $sServerName , $sSourceName )\n\iRetrieves a registered handle to the specified event log (Requires: #include &lt;EventLog.au3&gt;)\i0" pattern="_EventLog__RegisterSource( $sServerName , $sSourceName )"/>
          <Keyword text="_EventLog__Report" descr="_EventLog__Report( $hEventLog , $iType , $iCategory , $iEventID , $sUserName , $sDesc , $aData )\n\iWrites an entry at the end of the specified event log (Requires: #include &lt;EventLog.au3&gt;)\i0" pattern="_EventLog__Report( $hEventLog , $iType , $iCategory , $iEventID , $sUserName , $sDesc , $aData )"/>
          <Keyword text="_ExcelBookAttach" descr="_ExcelBookAttach( $s_string , $s_mode = &quot;FilePath&quot; )\n\iAttach to the first existing instance of Microsoft Excel where the search string matches based on the selected mode. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelBookAttach( $s_string , $s_mode = &quot;FilePath&quot; )"/>
          <Keyword text="_ExcelBookClose" descr="_ExcelBookClose( $oExcel , $fSave = 1 , $fAlerts = 0 )\n\iCloses the active workbook and removes the specified Excel object. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelBookClose( $oExcel , $fSave = 1 , $fAlerts = 0 )"/>
          <Keyword text="_ExcelBookNew" descr="_ExcelBookNew( $fVisible = 1 )\n\iCreates new workbook and returns its object identifier. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelBookNew( $fVisible = 1 )"/>
          <Keyword text="_ExcelBookOpen" descr="_ExcelBookOpen( $sFilePath , $fVisible = 1 , $fReadOnly = False , $sPassword = &quot;&quot; , $sWritePassword = &quot;&quot; )\n\iOpens an existing workbook and returns its object identifier. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelBookOpen( $sFilePath , $fVisible = 1 , $fReadOnly = False , $sPassword = &quot;&quot; , $sWritePassword = &quot;&quot; )"/>
          <Keyword text="_ExcelBookSave" descr="_ExcelBookSave( $oExcel , $fAlerts = 0 )\n\iSaves the active workbook of the specified Excel object. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelBookSave( $oExcel , $fAlerts = 0 )"/>
          <Keyword text="_ExcelBookSaveAs" descr="_ExcelBookSaveAs( $oExcel , $sFilePath , $sType = &quot;xls&quot; , $fAlerts = 0 , $fOverWrite = 0 , $sPassword = &quot;&quot; , $sWritePassword = &quot;&quot; , $iAccessMode = 1 , $iConflictResolution = 2 )\n\iSaves the active workbook of the specified Excel object with a new filename and/or type. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelBookSaveAs( $oExcel , $sFilePath , $sType = &quot;xls&quot; , $fAlerts = 0 , $fOverWrite = 0 , $sPassword = &quot;&quot; , $sWritePassword = &quot;&quot; , $iAccessMode = 1 , $iConflictResolution = 2 )"/>
          <Keyword text="_ExcelColumnDelete" descr="_ExcelColumnDelete( $oExcel , $iColumn , $iNumCols = 1 )\n\iDelete a number of columns from the active worksheet. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelColumnDelete( $oExcel , $iColumn , $iNumCols = 1 )"/>
          <Keyword text="_ExcelColumnInsert" descr="_ExcelColumnInsert( $oExcel , $iColumn , $iNumCols = 1 )\n\iInsert a number of columns into the active worksheet. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelColumnInsert( $oExcel , $iColumn , $iNumCols = 1 )"/>
          <Keyword text="_ExcelFontSetProperties" descr="_ExcelFontSetProperties( $oExcel , $sRangeOrRowStart , $iColStart = 1 , $iRowEnd = 1 , $iColEnd = 1 , $fBold = False , $fItalic = False , $fUnderline = False )\n\iSet the bold, italic, and underline font properties of a range in an Excel object. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelFontSetProperties( $oExcel , $sRangeOrRowStart , $iColStart = 1 , $iRowEnd = 1 , $iColEnd = 1 , $fBold = False , $fItalic = False , $fUnderline = False )"/>
          <Keyword text="_ExcelHorizontalAlignSet" descr="_ExcelHorizontalAlignSet( $oExcel , $sRangeOrRowStart , $iColStart = 1 , $iRowEnd = 1 , $iColEnd = 1 , $sHorizAlign = &quot;left&quot; )\n\iSet the horizontal alignment of each cell in a range. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelHorizontalAlignSet( $oExcel , $sRangeOrRowStart , $iColStart = 1 , $iRowEnd = 1 , $iColEnd = 1 , $sHorizAlign = &quot;left&quot; )"/>
          <Keyword text="_ExcelHyperlinkInsert" descr="_ExcelHyperlinkInsert( $oExcel , $sLinkText , $sAddress , $sScreenTip , $sRangeOrRow , $iColumn = 1 )\n\iInserts a hyperlink into the active page. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelHyperlinkInsert( $oExcel , $sLinkText , $sAddress , $sScreenTip , $sRangeOrRow , $iColumn = 1 )"/>
          <Keyword text="_ExcelNumberFormat" descr="_ExcelNumberFormat( $oExcel , $sFormat , $sRangeOrRowStart , $iColStart = 1 , $iRowEnd = 1 , $iColEnd = 1 )\n\iApplies the specified formatting to the cells in the specified R1C1 Range. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelNumberFormat( $oExcel , $sFormat , $sRangeOrRowStart , $iColStart = 1 , $iRowEnd = 1 , $iColEnd = 1 )"/>
          <Keyword text="_ExcelReadArray" descr="_ExcelReadArray( $oExcel , $iStartRow , $iStartColumn , $iNumCells , $iDirection = 0 , $iIndexBase = 0 )\n\iCreate an array from a row or column of the active worksheet. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelReadArray( $oExcel , $iStartRow , $iStartColumn , $iNumCells , $iDirection = 0 , $iIndexBase = 0 )"/>
          <Keyword text="_ExcelReadCell" descr="_ExcelReadCell( $oExcel , $sRangeOrRow , $iColumn = 1 )\n\iRead information from the active worksheet of the specified Excel object. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelReadCell( $oExcel , $sRangeOrRow , $iColumn = 1 )"/>
          <Keyword text="_ExcelReadSheetToArray" descr="_ExcelReadSheetToArray( $oExcel , $iStartRow = 1 , $iStartColumn = 1 , $iRowCnt = 0 , $iColCnt = 0 , $iColShift = False )\n\iCreate a 2D array from the rows/columns of the active worksheet. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelReadSheetToArray( $oExcel , $iStartRow = 1 , $iStartColumn = 1 , $iRowCnt = 0 , $iColCnt = 0 , $iColShift = False )"/>
          <Keyword text="_ExcelRowDelete" descr="_ExcelRowDelete( $oExcel , $iRow , $iNumRows = 1 )\n\iDelete a number of rows from the active worksheet. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelRowDelete( $oExcel , $iRow , $iNumRows = 1 )"/>
          <Keyword text="_ExcelRowInsert" descr="_ExcelRowInsert( $oExcel , $iRow , $iNumRows = 1 )\n\iInsert a number of rows into the active worksheet. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelRowInsert( $oExcel , $iRow , $iNumRows = 1 )"/>
          <Keyword text="_ExcelSheetActivate" descr="_ExcelSheetActivate( $oExcel , $vSheet )\n\iActivate the specified sheet by string name or by number. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelSheetActivate( $oExcel , $vSheet )"/>
          <Keyword text="_ExcelSheetAddNew" descr="_ExcelSheetAddNew( $oExcel , $sName = &quot;&quot; )\n\iAdd new sheet to workbook - optionally with a name. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelSheetAddNew( $oExcel , $sName = &quot;&quot; )"/>
          <Keyword text="_ExcelSheetDelete" descr="_ExcelSheetDelete( $oExcel , $vSheet , $fAlerts = False )\n\iDelete the specified sheet by string name or by number. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelSheetDelete( $oExcel , $vSheet , $fAlerts = False )"/>
          <Keyword text="_ExcelSheetList" descr="_ExcelSheetList( $oExcel )\n\iReturn a list of all sheets in workbook, by name, as an array. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelSheetList( $oExcel )"/>
          <Keyword text="_ExcelSheetMove" descr="_ExcelSheetMove( $oExcel , $vMoveSheet , $vRelativeSheet = 1 , $fBefore = True )\n\iMove the specified sheet before another specified sheet. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelSheetMove( $oExcel , $vMoveSheet , $vRelativeSheet = 1 , $fBefore = True )"/>
          <Keyword text="_ExcelSheetNameGet" descr="_ExcelSheetNameGet( $oExcel )\n\iReturn the name of the active sheet. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelSheetNameGet( $oExcel )"/>
          <Keyword text="_ExcelSheetNameSet" descr="_ExcelSheetNameSet( $oExcel , $sSheetName )\n\iSet the name of the active sheet. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelSheetNameSet( $oExcel , $sSheetName )"/>
          <Keyword text="_ExcelWriteArray" descr="_ExcelWriteArray( $oExcel , $iStartRow , $iStartColumn , $aArray , $iDirection = 0 , $iIndexBase = 0 )\n\iWrite an array to a row or column on the active worksheet of the specified Excel object. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelWriteArray( $oExcel , $iStartRow , $iStartColumn , $aArray , $iDirection = 0 , $iIndexBase = 0 )"/>
          <Keyword text="_ExcelWriteCell" descr="_ExcelWriteCell( $oExcel , $sValue , $sRangeOrRow , $iColumn = 1 )\n\iWrite information to a cell on the active worksheet of the specified Excel object. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelWriteCell( $oExcel , $sValue , $sRangeOrRow , $iColumn = 1 )"/>
          <Keyword text="_ExcelWriteFormula" descr="_ExcelWriteFormula( $oExcel , $sFormula , $sRangeOrRow , $iColumn = 1 )\n\iWrite a formula to a cell on the active worksheet of the specified Excel object. (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelWriteFormula( $oExcel , $sFormula , $sRangeOrRow , $iColumn = 1 )"/>
          <Keyword text="_ExcelWriteSheetFromArray" descr="_ExcelWriteSheetFromArray( $oExcel , ByRef $aArray , $iStartRow = 1 , $iStartColumn = 1 , $iRowBase = 1 , $iColBase = 1 )\n\iWrites a 2D array to the active worksheet (Requires: #include &lt;Excel.au3&gt;)\i0" pattern="_ExcelWriteSheetFromArray( $oExcel , ByRef $aArray , $iStartRow = 1 , $iStartColumn = 1 , $iRowBase = 1 , $iColBase = 1 )"/>
          <Keyword text="_FTP_Close" descr="_FTP_Close( $l_InternetSession )\n\iCloses the _FTP_Open session. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_Close( $l_InternetSession )"/>
          <Keyword text="_FTP_Command" descr="_FTP_Command( $l_FTPSession , $s_FTPCommand , $l_Flags = 0x00000001 , $l_ExpectResponse = 0 , $l_Context = 0 )\n\iSends a command to an FTP server. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_Command( $l_FTPSession , $s_FTPCommand , $l_Flags = 0x00000001 , $l_ExpectResponse = 0 , $l_Context = 0 )"/>
          <Keyword text="_FTP_Connect" descr="_FTP_Connect( $l_InternetSession , $s_ServerName , $s_Username , $s_Password , $i_Passive = 0 , $i_ServerPort = 0 , $l_Service = 1 , $l_Flags = 0 , $l_Context = 0 )\n\iConnects to an FTP server. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_Connect( $l_InternetSession , $s_ServerName , $s_Username , $s_Password , $i_Passive = 0 , $i_ServerPort = 0 , $l_Service = 1 , $l_Flags = 0 , $l_Context = 0 )"/>
          <Keyword text="_FTP_DecodeInternetStatus" descr="_FTP_DecodeInternetStatus( $dwInternetStatus )\n\iDecode a received Internet Status. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_DecodeInternetStatus( $dwInternetStatus )"/>
          <Keyword text="_FTP_DirCreate" descr="_FTP_DirCreate( $l_FTPSession , $s_Remote )\n\iMakes an Directory on an FTP server. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_DirCreate( $l_FTPSession , $s_Remote )"/>
          <Keyword text="_FTP_DirDelete" descr="_FTP_DirDelete( $l_FTPSession , $s_Remote )\n\iDelete&apos;s an Directory on an FTP server. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_DirDelete( $l_FTPSession , $s_Remote )"/>
          <Keyword text="_FTP_DirGetCurrent" descr="_FTP_DirGetCurrent( $l_FTPSession )\n\iGet Current Directory on an FTP server. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_DirGetCurrent( $l_FTPSession )"/>
          <Keyword text="_FTP_DirPutContents" descr="_FTP_DirPutContents( $l_InternetSession , $s_LocalFolder , $s_RemoteFolder , $b_RecursivePut , $l_Context )\n\iPuts an folder on an FTP server. Recursivley if selected. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_DirPutContents( $l_InternetSession , $s_LocalFolder , $s_RemoteFolder , $b_RecursivePut , $l_Context )"/>
          <Keyword text="_FTP_DirSetCurrent" descr="_FTP_DirSetCurrent( $l_FTPSession , $s_Remote )\n\iSet Current Directory on an FTP server. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_DirSetCurrent( $l_FTPSession , $s_Remote )"/>
          <Keyword text="_FTP_FileClose" descr="_FTP_FileClose( $l_InternetSession )\n\iCloses the Handle returned by _FTP_FileOpen. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_FileClose( $l_InternetSession )"/>
          <Keyword text="_FTP_FileDelete" descr="_FTP_FileDelete( $l_FTPSession , $s_RemoteFile )\n\iDelete an file from an FTP server. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_FileDelete( $l_FTPSession , $s_RemoteFile )"/>
          <Keyword text="_FTP_FileGet" descr="_FTP_FileGet( $l_FTPSession , $s_RemoteFile , $s_LocalFile , $fFailIfExists = False , $dwFlagsAndAttributes = 0 , $l_Flags = 0 , $l_Context = 0 )\n\iGet file from a FTP server. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_FileGet( $l_FTPSession , $s_RemoteFile , $s_LocalFile , $fFailIfExists = False , $dwFlagsAndAttributes = 0 , $l_Flags = 0 , $l_Context = 0 )"/>
          <Keyword text="_FTP_FileGetSize" descr="_FTP_FileGetSize( $l_FTPSession , $s_FileName )\n\iGets filesize of a file on the FTP server. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_FileGetSize( $l_FTPSession , $s_FileName )"/>
          <Keyword text="_FTP_FileOpen" descr="_FTP_FileOpen( $hConnect , $lpszFileName , $dwAccess = 0x80000000 , $dwFlags = 2 , $dwContext = 0 )\n\iInitiates access to a remote file on an FTP server for reading or writing. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_FileOpen( $hConnect , $lpszFileName , $dwAccess = 0x80000000 , $dwFlags = 2 , $dwContext = 0 )"/>
          <Keyword text="_FTP_FilePut" descr="_FTP_FilePut( $l_FTPSession , $s_LocalFile , $s_RemoteFile , $l_Flags = 0 , $l_Context = 0 )\n\iPuts an file on an FTP server. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_FilePut( $l_FTPSession , $s_LocalFile , $s_RemoteFile , $l_Flags = 0 , $l_Context = 0 )"/>
          <Keyword text="_FTP_FileRead" descr="_FTP_FileRead( $h_File , $dwNumberOfBytesToRead )\n\iReads data from a handle opened by _FTP_FileOpen() (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_FileRead( $h_File , $dwNumberOfBytesToRead )"/>
          <Keyword text="_FTP_FileRename" descr="_FTP_FileRename( $l_FTPSession , $s_Existing , $s_New )\n\iRenames an file on an FTP server. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_FileRename( $l_FTPSession , $s_Existing , $s_New )"/>
          <Keyword text="_FTP_FileTimeLoHiToStr" descr="_FTP_FileTimeLoHiToStr( $LoDWORD , $HiDWORD , $bFmt = 0 )\n\iCloses the _FTP_Open session. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_FileTimeLoHiToStr( $LoDWORD , $HiDWORD , $bFmt = 0 )"/>
          <Keyword text="_FTP_FindFileClose" descr="_FTP_FindFileClose( $h_Handle )\n\iDelete FindFile Handle. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_FindFileClose( $h_Handle )"/>
          <Keyword text="_FTP_FindFileFirst" descr="_FTP_FindFileFirst( $l_FTPSession , $s_RemotePath , ByRef $h_Handle , $l_Flags = 0 , $l_Context = 0 )\n\iFind First File on an FTP server. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_FindFileFirst( $l_FTPSession , $s_RemotePath , ByRef $h_Handle , $l_Flags = 0 , $l_Context = 0 )"/>
          <Keyword text="_FTP_FindFileNext" descr="_FTP_FindFileNext( $h_Handle )\n\iFind Next File on an FTP server. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_FindFileNext( $h_Handle )"/>
          <Keyword text="_FTP_GetLastResponseInfo" descr="_FTP_GetLastResponseInfo( ByRef $dwError , ByRef $szMessage )\n\iRetrieves the last error description or server response on the thread calling this function. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_GetLastResponseInfo( ByRef $dwError , ByRef $szMessage )"/>
          <Keyword text="_FTP_ListToArray" descr="_FTP_ListToArray( $l_FTPSession , $Return_Type = 0 , $l_Flags = 0 , $l_Context )\n\iGet Filenames, Directories or Both of current remote directory. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_ListToArray( $l_FTPSession , $Return_Type = 0 , $l_Flags = 0 , $l_Context )"/>
          <Keyword text="_FTP_ListToArray2D" descr="_FTP_ListToArray2D( $l_FTPSession , $Return_Type = 0 , $l_Flags = 0 , $l_Context )\n\iGet Filenames and filesizes of current remote directory. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_ListToArray2D( $l_FTPSession , $Return_Type = 0 , $l_Flags = 0 , $l_Context )"/>
          <Keyword text="_FTP_ListToArrayEx" descr="_FTP_ListToArrayEx( $l_FTPSession , $Return_Type = 0 , $l_Flags = 0 , $b_Fmt = 1 , $l_Context )\n\iGet names, sizes, attributes aand times of files/dir of current remote directory. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_ListToArrayEx( $l_FTPSession , $Return_Type = 0 , $l_Flags = 0 , $b_Fmt = 1 , $l_Context )"/>
          <Keyword text="_FTP_Open" descr="_FTP_Open( $s_Agent , $l_AccessType = 1 , $s_ProxyName = &apos;&apos; , $s_ProxyBypass = &apos;&apos; , $l_Flags = 0 )\n\iOpens an FTP session. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_Open( $s_Agent , $l_AccessType = 1 , $s_ProxyName = &apos;&apos; , $s_ProxyBypass = &apos;&apos; , $l_Flags = 0 )"/>
          <Keyword text="_FTP_ProgressDownload" descr="_FTP_ProgressDownload( $l_FTPSession , $s_LocalFile , $s_RemoteFile , $FunctionToCall = &quot;&quot; )\n\iDownloads a file in Binary Mode and shows a Progress window or by Calling a User defined Function. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_ProgressDownload( $l_FTPSession , $s_LocalFile , $s_RemoteFile , $FunctionToCall = &quot;&quot; )"/>
          <Keyword text="_FTP_ProgressUpload" descr="_FTP_ProgressUpload( $l_FTPSession , $s_LocalFile , $s_RemoteFile , $FunctionToCall = &quot;&quot; )\n\iUploads a file in Binary Mode and shows a Progress window or by Calling a User defined Function (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_ProgressUpload( $l_FTPSession , $s_LocalFile , $s_RemoteFile , $FunctionToCall = &quot;&quot; )"/>
          <Keyword text="_FTP_SetStatusCallback" descr="_FTP_SetStatusCallback( $l_InternetSession , $sFunctionName )\n\iRegisters callback function that WinINet functions can call as progress is made during an operation. (Requires: #include &lt;FTPEx.au3&gt;)\i0" pattern="_FTP_SetStatusCallback( $l_InternetSession , $sFunctionName )"/>
          <Keyword text="_FileCountLines" descr="_FileCountLines( $sFilePath )\n\iReturns the number of lines in the specified file. (Requires: #include &lt;File.au3&gt;)\i0" pattern="_FileCountLines( $sFilePath )"/>
          <Keyword text="_FileCreate" descr="_FileCreate( $sFilePath )\n\iCreates or zero&apos;s out the length of the file specified. (Requires: #include &lt;File.au3&gt;)\i0" pattern="_FileCreate( $sFilePath )"/>
          <Keyword text="_FileListToArray" descr="_FileListToArray( $sPath , $sFilter = &quot;*&quot; , $iFlag = 0 )\n\iLists files and\or folders in a specified path (Similar to using Dir with the /B Switch) (Requires: #include &lt;File.au3&gt;)\i0" pattern="_FileListToArray( $sPath , $sFilter = &quot;*&quot; , $iFlag = 0 )"/>
          <Keyword text="_FilePrint" descr="_FilePrint( $s_File , $i_Show = @SW_HIDE )\n\iPrints a plain text file. (Requires: #include &lt;File.au3&gt;)\i0" pattern="_FilePrint( $s_File , $i_Show = @SW_HIDE )"/>
          <Keyword text="_FileReadToArray" descr="_FileReadToArray( $sFilePath , ByRef $aArray )\n\iReads the specified file into an array. (Requires: #include &lt;File.au3&gt;)\i0" pattern="_FileReadToArray( $sFilePath , ByRef $aArray )"/>
          <Keyword text="_FileWriteFromArray" descr="_FileWriteFromArray( $File , $a_Array , $i_Base = 0 , $i_UBound = 0 , $s_Delim= &quot;|&quot; )\n\iWrites Array records to the specified file. (Requires: #include &lt;File.au3&gt;)\i0" pattern="_FileWriteFromArray( $File , $a_Array , $i_Base = 0 , $i_UBound = 0 , $s_Delim= &quot;|&quot; )"/>
          <Keyword text="_FileWriteLog" descr="_FileWriteLog( $sLogPath , $sLogMsg , $iFlag = -1 )\n\iWrites current date, time and the specified text to a log file. (Requires: #include &lt;File.au3&gt;)\i0" pattern="_FileWriteLog( $sLogPath , $sLogMsg , $iFlag = -1 )"/>
          <Keyword text="_FileWriteToLine" descr="_FileWriteToLine( $sFile , $iLine , $sText , $fOverWrite = 0 )\n\iWrites text to a specific line in a file. (Requires: #include &lt;File.au3&gt;)\i0" pattern="_FileWriteToLine( $sFile , $iLine , $sText , $fOverWrite = 0 )"/>
          <Keyword text="_GDIPlus_ArrowCapCreate" descr="_GDIPlus_ArrowCapCreate( $fHeight , $fWidth , $bFilled = True )\n\iCreates an adjustable arrow line cap with the specified height and width (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ArrowCapCreate( $fHeight , $fWidth , $bFilled = True )"/>
          <Keyword text="_GDIPlus_ArrowCapDispose" descr="_GDIPlus_ArrowCapDispose( $hCap )\n\iRelease an adjustable arrow line cap object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ArrowCapDispose( $hCap )"/>
          <Keyword text="_GDIPlus_ArrowCapGetFillState" descr="_GDIPlus_ArrowCapGetFillState( $hArrowCap )\n\iDetermines whether the arrow cap is filled (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ArrowCapGetFillState( $hArrowCap )"/>
          <Keyword text="_GDIPlus_ArrowCapGetHeight" descr="_GDIPlus_ArrowCapGetHeight( $hArrowCap )\n\iGets the height of the arrow cap (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ArrowCapGetHeight( $hArrowCap )"/>
          <Keyword text="_GDIPlus_ArrowCapGetMiddleInset" descr="_GDIPlus_ArrowCapGetMiddleInset( $hArrowCap )\n\iGets the value of the inset (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ArrowCapGetMiddleInset( $hArrowCap )"/>
          <Keyword text="_GDIPlus_ArrowCapGetWidth" descr="_GDIPlus_ArrowCapGetWidth( $hArrowCap )\n\iGets the width of the arrow cap (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ArrowCapGetWidth( $hArrowCap )"/>
          <Keyword text="_GDIPlus_ArrowCapSetFillState" descr="_GDIPlus_ArrowCapSetFillState( $hArrowCap , $bFilled = True )\n\iSets whether the arrow cap is filled (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ArrowCapSetFillState( $hArrowCap , $bFilled = True )"/>
          <Keyword text="_GDIPlus_ArrowCapSetHeight" descr="_GDIPlus_ArrowCapSetHeight( $hArrowCap , $fHeight )\n\iSets the height of the arrow cap (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ArrowCapSetHeight( $hArrowCap , $fHeight )"/>
          <Keyword text="_GDIPlus_ArrowCapSetMiddleInset" descr="_GDIPlus_ArrowCapSetMiddleInset( $hArrowCap , $fInset )\n\iGets the value of the inset (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ArrowCapSetMiddleInset( $hArrowCap , $fInset )"/>
          <Keyword text="_GDIPlus_ArrowCapSetWidth" descr="_GDIPlus_ArrowCapSetWidth( $hArrowCap , $fWidth )\n\iSets the width of the arrow cap (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ArrowCapSetWidth( $hArrowCap , $fWidth )"/>
          <Keyword text="_GDIPlus_BitmapCloneArea" descr="_GDIPlus_BitmapCloneArea( $hBmp , $iLeft , $iTop , $iWidth , $iHeight , $iFormat = 0x00021808 )\n\iCreate a clone of a Bitmap object from the coordinates and format specified (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_BitmapCloneArea( $hBmp , $iLeft , $iTop , $iWidth , $iHeight , $iFormat = 0x00021808 )"/>
          <Keyword text="_GDIPlus_BitmapCreateFromFile" descr="_GDIPlus_BitmapCreateFromFile( $sFileName )\n\iCreate a Bitmap object from file (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_BitmapCreateFromFile( $sFileName )"/>
          <Keyword text="_GDIPlus_BitmapCreateFromGraphics" descr="_GDIPlus_BitmapCreateFromGraphics( $iWidth , $iHeight , $hGraphics )\n\iCreates a Bitmap object based on a Graphics object, a width, and a height (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_BitmapCreateFromGraphics( $iWidth , $iHeight , $hGraphics )"/>
          <Keyword text="_GDIPlus_BitmapCreateFromHBITMAP" descr="_GDIPlus_BitmapCreateFromHBITMAP( $hBmp , $hPal = 0 )\n\iCreate a Bitmap object from a bitmap handle (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_BitmapCreateFromHBITMAP( $hBmp , $hPal = 0 )"/>
          <Keyword text="_GDIPlus_BitmapCreateHBITMAPFromBitmap" descr="_GDIPlus_BitmapCreateHBITMAPFromBitmap( $hBitmap , $iARGB = 0xFF000000 )\n\iCreate a handle to a bitmap from a bitmap object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_BitmapCreateHBITMAPFromBitmap( $hBitmap , $iARGB = 0xFF000000 )"/>
          <Keyword text="_GDIPlus_BitmapDispose" descr="_GDIPlus_BitmapDispose( $hBitmap )\n\iRelease a bitmap object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_BitmapDispose( $hBitmap )"/>
          <Keyword text="_GDIPlus_BitmapLockBits" descr="_GDIPlus_BitmapLockBits( $hBitmap , $iLeft , $iTop , $iWidth , $iHeight , $iFlags = $GDIP_ILMREAD , $iFormat = $GDIP_PXF32RGB )\n\iLocks a portion of a bitmap for reading or writing (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_BitmapLockBits( $hBitmap , $iLeft , $iTop , $iWidth , $iHeight , $iFlags = $GDIP_ILMREAD , $iFormat = $GDIP_PXF32RGB )"/>
          <Keyword text="_GDIPlus_BitmapUnlockBits" descr="_GDIPlus_BitmapUnlockBits( $hBitmap , $tBitmapData )\n\iUnlocks a portion of a bitmap that was locked by _GDIPlus_BitmapLockBits (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_BitmapUnlockBits( $hBitmap , $tBitmapData )"/>
          <Keyword text="_GDIPlus_BrushClone" descr="_GDIPlus_BrushClone( $hBrush )\n\iClone a Brush object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_BrushClone( $hBrush )"/>
          <Keyword text="_GDIPlus_BrushCreateSolid" descr="_GDIPlus_BrushCreateSolid( $iARGB = 0xFF000000 )\n\iCreate a solid Brush object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_BrushCreateSolid( $iARGB = 0xFF000000 )"/>
          <Keyword text="_GDIPlus_BrushDispose" descr="_GDIPlus_BrushDispose( $hBrush )\n\iRelease a Brush object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_BrushDispose( $hBrush )"/>
          <Keyword text="_GDIPlus_BrushGetSolidColor" descr="_GDIPlus_BrushGetSolidColor( $hBrush , $iARGB = 0xFF000000 )\n\iGet the color of a Solid Brush object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_BrushGetSolidColor( $hBrush , $iARGB = 0xFF000000 )"/>
          <Keyword text="_GDIPlus_BrushGetType" descr="_GDIPlus_BrushGetType( $hBrush )\n\iRetrieve the type of Brush object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_BrushGetType( $hBrush )"/>
          <Keyword text="_GDIPlus_BrushSetSolidColor" descr="_GDIPlus_BrushSetSolidColor( $hBrush , $iARGB = 0xFF000000 )\n\iSet the color of a Solid Brush object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_BrushSetSolidColor( $hBrush , $iARGB = 0xFF000000 )"/>
          <Keyword text="_GDIPlus_CustomLineCapDispose" descr="_GDIPlus_CustomLineCapDispose( $hCap )\n\iRelease a custom line cap object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_CustomLineCapDispose( $hCap )"/>
          <Keyword text="_GDIPlus_Decoders" descr="_GDIPlus_Decoders()\n\iGet an array of information about the available image decoders (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_Decoders()"/>
          <Keyword text="_GDIPlus_DecodersGetCount" descr="_GDIPlus_DecodersGetCount()\n\iGet the number of available image decoders (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_DecodersGetCount()"/>
          <Keyword text="_GDIPlus_DecodersGetSize" descr="_GDIPlus_DecodersGetSize()\n\iGet the total size of the structure that is returned by _GDIPlus_GetImageDecoders (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_DecodersGetSize()"/>
          <Keyword text="_GDIPlus_DrawImagePoints" descr="_GDIPlus_DrawImagePoints( $hGraphic , $hImage , $nULX , $nULY , $nURX , $nURY , $nLLX , $nLLY , $count = 3 )\n\iDraws an image at a specified location. (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_DrawImagePoints( $hGraphic , $hImage , $nULX , $nULY , $nURX , $nURY , $nLLX , $nLLY , $count = 3 )"/>
          <Keyword text="_GDIPlus_Encoders" descr="_GDIPlus_Encoders()\n\iGet an array of information about the available image encoders (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_Encoders()"/>
          <Keyword text="_GDIPlus_EncodersGetCLSID" descr="_GDIPlus_EncodersGetCLSID( $sFileExt )\n\iReturn the encoder CLSID for a specific image file type (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_EncodersGetCLSID( $sFileExt )"/>
          <Keyword text="_GDIPlus_EncodersGetCount" descr="_GDIPlus_EncodersGetCount()\n\iGet the number of available image encoders (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_EncodersGetCount()"/>
          <Keyword text="_GDIPlus_EncodersGetParamList" descr="_GDIPlus_EncodersGetParamList( $hImage , $sEncoder )\n\iGet the parameter list for a specified image encoder (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_EncodersGetParamList( $hImage , $sEncoder )"/>
          <Keyword text="_GDIPlus_EncodersGetParamListSize" descr="_GDIPlus_EncodersGetParamListSize( $hImage , $sEncoder )\n\iGet the size of the parameter list for a specified image encoder (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_EncodersGetParamListSize( $hImage , $sEncoder )"/>
          <Keyword text="_GDIPlus_EncodersGetSize" descr="_GDIPlus_EncodersGetSize()\n\iGet the total size of the structure that is returned by _GDIPlus_GetImageEncoders (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_EncodersGetSize()"/>
          <Keyword text="_GDIPlus_FontCreate" descr="_GDIPlus_FontCreate( $hFamily , $fSize , $iStyle = 0 , $iUnit = 3 )\n\iCreate a Font object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_FontCreate( $hFamily , $fSize , $iStyle = 0 , $iUnit = 3 )"/>
          <Keyword text="_GDIPlus_FontDispose" descr="_GDIPlus_FontDispose( $hFont )\n\iRelease a Font object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_FontDispose( $hFont )"/>
          <Keyword text="_GDIPlus_FontFamilyCreate" descr="_GDIPlus_FontFamilyCreate( $sFamily )\n\iCreate a Font Family object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_FontFamilyCreate( $sFamily )"/>
          <Keyword text="_GDIPlus_FontFamilyDispose" descr="_GDIPlus_FontFamilyDispose( $hFamily )\n\iRelease a Font Family object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_FontFamilyDispose( $hFamily )"/>
          <Keyword text="_GDIPlus_GraphicsClear" descr="_GDIPlus_GraphicsClear( $hGraphics , $iARGB = 0xFF000000 )\n\iClears a Graphics object to a specified color (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsClear( $hGraphics , $iARGB = 0xFF000000 )"/>
          <Keyword text="_GDIPlus_GraphicsCreateFromHDC" descr="_GDIPlus_GraphicsCreateFromHDC( $hDC )\n\iCreate a Graphics object from a device context (DC) (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsCreateFromHDC( $hDC )"/>
          <Keyword text="_GDIPlus_GraphicsCreateFromHWND" descr="_GDIPlus_GraphicsCreateFromHWND( $hWnd )\n\iCreate a Graphics object from a window handle (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsCreateFromHWND( $hWnd )"/>
          <Keyword text="_GDIPlus_GraphicsDispose" descr="_GDIPlus_GraphicsDispose( $hGraphics )\n\iRelease a Graphics object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsDispose( $hGraphics )"/>
          <Keyword text="_GDIPlus_GraphicsDrawArc" descr="_GDIPlus_GraphicsDrawArc( $hGraphics , $iX , $iY , $iWidth , $iHeight , $fStartAngle , $fSweepAngle , $hPen = 0 )\n\iDraw an arc (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsDrawArc( $hGraphics , $iX , $iY , $iWidth , $iHeight , $fStartAngle , $fSweepAngle , $hPen = 0 )"/>
          <Keyword text="_GDIPlus_GraphicsDrawBezier" descr="_GDIPlus_GraphicsDrawBezier( $hGraphics , $iX1 , $iY1 , $iX2 , $iY2 , $iX3 , $iY3 , $iX4 , $iY4 , $hPen = 0 )\n\iDraw a bezier spline (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsDrawBezier( $hGraphics , $iX1 , $iY1 , $iX2 , $iY2 , $iX3 , $iY3 , $iX4 , $iY4 , $hPen = 0 )"/>
          <Keyword text="_GDIPlus_GraphicsDrawClosedCurve" descr="_GDIPlus_GraphicsDrawClosedCurve( $hGraphics , $aPoints , $hPen = 0 )\n\iDraw a closed cardinal spline (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsDrawClosedCurve( $hGraphics , $aPoints , $hPen = 0 )"/>
          <Keyword text="_GDIPlus_GraphicsDrawCurve" descr="_GDIPlus_GraphicsDrawCurve( $hGraphics , $aPoints , $hPen = 0 )\n\iDraw a cardinal spline (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsDrawCurve( $hGraphics , $aPoints , $hPen = 0 )"/>
          <Keyword text="_GDIPlus_GraphicsDrawEllipse" descr="_GDIPlus_GraphicsDrawEllipse( $hGraphics , $iX , $iY , $iWidth , $iHeight , $hPen = 0 )\n\iDraw an ellipse (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsDrawEllipse( $hGraphics , $iX , $iY , $iWidth , $iHeight , $hPen = 0 )"/>
          <Keyword text="_GDIPlus_GraphicsDrawImage" descr="_GDIPlus_GraphicsDrawImage( $hGraphics , $hImage , $iX , $iY )\n\iDraw an Image object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsDrawImage( $hGraphics , $hImage , $iX , $iY )"/>
          <Keyword text="_GDIPlus_GraphicsDrawImageRect" descr="_GDIPlus_GraphicsDrawImageRect( $hGraphics , $hImage , $iX , $iY , $iW , $iH )\n\iDraws an image at a specified location (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsDrawImageRect( $hGraphics , $hImage , $iX , $iY , $iW , $iH )"/>
          <Keyword text="_GDIPlus_GraphicsDrawImageRectRect" descr="_GDIPlus_GraphicsDrawImageRectRect( $hGraphics , $hImage , $iSrcX , $iSrcY , $iSrcWidth , $iSrcHeight , $iDstX , $iDstY , $iDstWidth , $iDstHeight , $iUnit = 2 )\n\iDraw an Image object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsDrawImageRectRect( $hGraphics , $hImage , $iSrcX , $iSrcY , $iSrcWidth , $iSrcHeight , $iDstX , $iDstY , $iDstWidth , $iDstHeight , $iUnit = 2 )"/>
          <Keyword text="_GDIPlus_GraphicsDrawLine" descr="_GDIPlus_GraphicsDrawLine( $hGraphics , $iX1 , $iY1 , $iX2 , $iY2 , $hPen = 0 )\n\iDraw a line (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsDrawLine( $hGraphics , $iX1 , $iY1 , $iX2 , $iY2 , $hPen = 0 )"/>
          <Keyword text="_GDIPlus_GraphicsDrawPie" descr="_GDIPlus_GraphicsDrawPie( $hGraphics , $iX , $iY , $iWidth , $iHeight , $fStartAngle , $fSweepAngle , $hPen = 0 )\n\iDraw a pie (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsDrawPie( $hGraphics , $iX , $iY , $iWidth , $iHeight , $fStartAngle , $fSweepAngle , $hPen = 0 )"/>
          <Keyword text="_GDIPlus_GraphicsDrawPolygon" descr="_GDIPlus_GraphicsDrawPolygon( $hGraphics , $aPoints , $hPen = 0 )\n\iDraw a polygon (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsDrawPolygon( $hGraphics , $aPoints , $hPen = 0 )"/>
          <Keyword text="_GDIPlus_GraphicsDrawRect" descr="_GDIPlus_GraphicsDrawRect( $hGraphics , $iX , $iY , $iWidth , $iHeight , $hPen = 0 )\n\iDraw a rectangle (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsDrawRect( $hGraphics , $iX , $iY , $iWidth , $iHeight , $hPen = 0 )"/>
          <Keyword text="_GDIPlus_GraphicsDrawString" descr="_GDIPlus_GraphicsDrawString( $hGraphics , $sString , $nX , $nY , $sFont = &quot;Arial&quot; , $fSize = 10 , $iFormat = 0 )\n\iDraw a string (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsDrawString( $hGraphics , $sString , $nX , $nY , $sFont = &quot;Arial&quot; , $fSize = 10 , $iFormat = 0 )"/>
          <Keyword text="_GDIPlus_GraphicsDrawStringEx" descr="_GDIPlus_GraphicsDrawStringEx( $hGraphics , $sString , $hFont , $tLayout , $hFormat , $hBrush )\n\iDraw a string (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsDrawStringEx( $hGraphics , $sString , $hFont , $tLayout , $hFormat , $hBrush )"/>
          <Keyword text="_GDIPlus_GraphicsFillClosedCurve" descr="_GDIPlus_GraphicsFillClosedCurve( $hGraphics , $aPoints , $hBrush = 0 )\n\iFill a closed cardinal spline (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsFillClosedCurve( $hGraphics , $aPoints , $hBrush = 0 )"/>
          <Keyword text="_GDIPlus_GraphicsFillEllipse" descr="_GDIPlus_GraphicsFillEllipse( $hGraphics , $iX , $iY , $iWidth , $iHeight , $hBrush = 0 )\n\iFill an ellipse (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsFillEllipse( $hGraphics , $iX , $iY , $iWidth , $iHeight , $hBrush = 0 )"/>
          <Keyword text="_GDIPlus_GraphicsFillPie" descr="_GDIPlus_GraphicsFillPie( $hGraphics , $iX , $iY , $iWidth , $iHeight , $fStartAngle , $fSweepAngle , $hBrush = 0 )\n\iFill a pie (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsFillPie( $hGraphics , $iX , $iY , $iWidth , $iHeight , $fStartAngle , $fSweepAngle , $hBrush = 0 )"/>
          <Keyword text="_GDIPlus_GraphicsFillPolygon" descr="_GDIPlus_GraphicsFillPolygon( $hGraphics , $aPoints , $hBrush = 0 )\n\iFill a polygon (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsFillPolygon( $hGraphics , $aPoints , $hBrush = 0 )"/>
          <Keyword text="_GDIPlus_GraphicsFillRect" descr="_GDIPlus_GraphicsFillRect( $hGraphics , $iX , $iY , $iWidth , $iHeight , $hBrush = 0 )\n\iFill a rectangle (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsFillRect( $hGraphics , $iX , $iY , $iWidth , $iHeight , $hBrush = 0 )"/>
          <Keyword text="_GDIPlus_GraphicsGetDC" descr="_GDIPlus_GraphicsGetDC( $hGraphics )\n\iGets a handle to the device context of the Graphics object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsGetDC( $hGraphics )"/>
          <Keyword text="_GDIPlus_GraphicsGetSmoothingMode" descr="_GDIPlus_GraphicsGetSmoothingMode( $hGraphics )\n\iGets the graphics object rendering quality (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsGetSmoothingMode( $hGraphics )"/>
          <Keyword text="_GDIPlus_GraphicsMeasureString" descr="_GDIPlus_GraphicsMeasureString( $hGraphics , $sString , $hFont , $tLayout , $hFormat )\n\iMeasures the size of a string (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsMeasureString( $hGraphics , $sString , $hFont , $tLayout , $hFormat )"/>
          <Keyword text="_GDIPlus_GraphicsReleaseDC" descr="_GDIPlus_GraphicsReleaseDC( $hGraphics , $hDC )\n\iReleases the device context of the Graphics object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsReleaseDC( $hGraphics , $hDC )"/>
          <Keyword text="_GDIPlus_GraphicsSetSmoothingMode" descr="_GDIPlus_GraphicsSetSmoothingMode( $hGraphics , $iSmooth )\n\iSets the graphics object rendering quality (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsSetSmoothingMode( $hGraphics , $iSmooth )"/>
          <Keyword text="_GDIPlus_GraphicsSetTransform" descr="_GDIPlus_GraphicsSetTransform( $hGraphics , $hMatrix )\n\iSets the world transformation for a graphics object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_GraphicsSetTransform( $hGraphics , $hMatrix )"/>
          <Keyword text="_GDIPlus_ImageDispose" descr="_GDIPlus_ImageDispose( $hImage )\n\iRelease an image object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ImageDispose( $hImage )"/>
          <Keyword text="_GDIPlus_ImageGetFlags" descr="_GDIPlus_ImageGetFlags( $hImage )\n\iReturns enumeration of pixel data attributes contained in an image (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ImageGetFlags( $hImage )"/>
          <Keyword text="_GDIPlus_ImageGetGraphicsContext" descr="_GDIPlus_ImageGetGraphicsContext( $hImage )\n\iGet the graphics context of the image (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ImageGetGraphicsContext( $hImage )"/>
          <Keyword text="_GDIPlus_ImageGetHeight" descr="_GDIPlus_ImageGetHeight( $hImage )\n\iGet the image height (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ImageGetHeight( $hImage )"/>
          <Keyword text="_GDIPlus_ImageGetHorizontalResolution" descr="_GDIPlus_ImageGetHorizontalResolution( $hImage )\n\iReturns horizontal resolution in DPI (pixels per inch) of an image (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ImageGetHorizontalResolution( $hImage )"/>
          <Keyword text="_GDIPlus_ImageGetPixelFormat" descr="_GDIPlus_ImageGetPixelFormat( $hImage )\n\iReturns pixel format of an image: Bits per pixel, Alpha channels, RGB, Grayscale, Indexed etc. (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ImageGetPixelFormat( $hImage )"/>
          <Keyword text="_GDIPlus_ImageGetRawFormat" descr="_GDIPlus_ImageGetRawFormat( $hImage )\n\iReturns file format GUID and image format name of an image (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ImageGetRawFormat( $hImage )"/>
          <Keyword text="_GDIPlus_ImageGetType" descr="_GDIPlus_ImageGetType( $hImage )\n\iReturns type (bitmap or metafile) of an image (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ImageGetType( $hImage )"/>
          <Keyword text="_GDIPlus_ImageGetVerticalResolution" descr="_GDIPlus_ImageGetVerticalResolution( $hImage )\n\iReturns horizontal resolution in DPI (pixels per inch) of an image (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ImageGetVerticalResolution( $hImage )"/>
          <Keyword text="_GDIPlus_ImageGetWidth" descr="_GDIPlus_ImageGetWidth( $hImage )\n\iGet the image width (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ImageGetWidth( $hImage )"/>
          <Keyword text="_GDIPlus_ImageLoadFromFile" descr="_GDIPlus_ImageLoadFromFile( $sFileName )\n\iCreate an image object based on a file (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ImageLoadFromFile( $sFileName )"/>
          <Keyword text="_GDIPlus_ImageSaveToFile" descr="_GDIPlus_ImageSaveToFile( $hImage , $sFileName )\n\iSave an image to file (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ImageSaveToFile( $hImage , $sFileName )"/>
          <Keyword text="_GDIPlus_ImageSaveToFileEx" descr="_GDIPlus_ImageSaveToFileEx( $hImage , $sFileName , $sEncoder , $pParams = 0 )\n\iSave an image to file (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ImageSaveToFileEx( $hImage , $sFileName , $sEncoder , $pParams = 0 )"/>
          <Keyword text="_GDIPlus_MatrixCreate" descr="_GDIPlus_MatrixCreate()\n\iCreates and initializes a Matrix object that represents the identity matrix (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_MatrixCreate()"/>
          <Keyword text="_GDIPlus_MatrixDispose" descr="_GDIPlus_MatrixDispose( $hMatrix )\n\iRelease a matrix object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_MatrixDispose( $hMatrix )"/>
          <Keyword text="_GDIPlus_MatrixRotate" descr="_GDIPlus_MatrixRotate( $hMatrix , $fAngle , $bAppend = False )\n\iUpdates a matrix with the product of itself and a rotation matrix (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_MatrixRotate( $hMatrix , $fAngle , $bAppend = False )"/>
          <Keyword text="_GDIPlus_MatrixScale" descr="_GDIPlus_MatrixScale( $hMatrix , $fScaleX , $fScaleY , $bOrder = False )\n\iUpdates a matrix with the product of itself and a scaling matrix (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_MatrixScale( $hMatrix , $fScaleX , $fScaleY , $bOrder = False )"/>
          <Keyword text="_GDIPlus_MatrixTranslate" descr="_GDIPlus_MatrixTranslate( $hMatrix , $fOffsetX , $fOffsetY , $bAppend = False )\n\iUpdates a matrix with the product of itself and a translation matrix (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_MatrixTranslate( $hMatrix , $fOffsetX , $fOffsetY , $bAppend = False )"/>
          <Keyword text="_GDIPlus_ParamAdd" descr="_GDIPlus_ParamAdd( ByRef $tParams , $sGUID , $iCount , $iType , $pValues )\n\iAdd a value to an encoder parameter list (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ParamAdd( ByRef $tParams , $sGUID , $iCount , $iType , $pValues )"/>
          <Keyword text="_GDIPlus_ParamInit" descr="_GDIPlus_ParamInit( $iCount )\n\iInitialize an encoder parameter list (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_ParamInit( $iCount )"/>
          <Keyword text="_GDIPlus_PenCreate" descr="_GDIPlus_PenCreate( $iARGB = 0xFF000000 , $nWidth = 1 , $iUnit = 2 )\n\iCreate a pen object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_PenCreate( $iARGB = 0xFF000000 , $nWidth = 1 , $iUnit = 2 )"/>
          <Keyword text="_GDIPlus_PenDispose" descr="_GDIPlus_PenDispose( $hPen )\n\iRelease a pen object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_PenDispose( $hPen )"/>
          <Keyword text="_GDIPlus_PenGetAlignment" descr="_GDIPlus_PenGetAlignment( $hPen )\n\iGets the pen alignment (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_PenGetAlignment( $hPen )"/>
          <Keyword text="_GDIPlus_PenGetColor" descr="_GDIPlus_PenGetColor( $hPen )\n\iGets the pen color (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_PenGetColor( $hPen )"/>
          <Keyword text="_GDIPlus_PenGetCustomEndCap" descr="_GDIPlus_PenGetCustomEndCap( $hPen )\n\iGets the custom end cap for the pen (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_PenGetCustomEndCap( $hPen )"/>
          <Keyword text="_GDIPlus_PenGetDashCap" descr="_GDIPlus_PenGetDashCap( $hPen )\n\iGets the pen dash cap style (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_PenGetDashCap( $hPen )"/>
          <Keyword text="_GDIPlus_PenGetDashStyle" descr="_GDIPlus_PenGetDashStyle( $hPen )\n\iGets the pen dash style (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_PenGetDashStyle( $hPen )"/>
          <Keyword text="_GDIPlus_PenGetEndCap" descr="_GDIPlus_PenGetEndCap( $hPen )\n\iGets the pen end cap (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_PenGetEndCap( $hPen )"/>
          <Keyword text="_GDIPlus_PenGetWidth" descr="_GDIPlus_PenGetWidth( $hPen )\n\iRetrieve the width of a pen (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_PenGetWidth( $hPen )"/>
          <Keyword text="_GDIPlus_PenSetAlignment" descr="_GDIPlus_PenSetAlignment( $hPen , $iAlignment = 0 )\n\iSets the pen alignment (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_PenSetAlignment( $hPen , $iAlignment = 0 )"/>
          <Keyword text="_GDIPlus_PenSetColor" descr="_GDIPlus_PenSetColor( $hPen , $iARGB )\n\iSets the pen color (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_PenSetColor( $hPen , $iARGB )"/>
          <Keyword text="_GDIPlus_PenSetCustomEndCap" descr="_GDIPlus_PenSetCustomEndCap( $hPen , $hEndCap )\n\iSets the custom end cap for the pen (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_PenSetCustomEndCap( $hPen , $hEndCap )"/>
          <Keyword text="_GDIPlus_PenSetDashCap" descr="_GDIPlus_PenSetDashCap( $hPen , $iDash = 0 )\n\iSets the pen dash cap style (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_PenSetDashCap( $hPen , $iDash = 0 )"/>
          <Keyword text="_GDIPlus_PenSetDashStyle" descr="_GDIPlus_PenSetDashStyle( $hPen , $iStyle = 0 )\n\iSets the pen dash style (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_PenSetDashStyle( $hPen , $iStyle = 0 )"/>
          <Keyword text="_GDIPlus_PenSetEndCap" descr="_GDIPlus_PenSetEndCap( $hPen , $iEndCap )\n\iSets the pen end cap (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_PenSetEndCap( $hPen , $iEndCap )"/>
          <Keyword text="_GDIPlus_PenSetWidth" descr="_GDIPlus_PenSetWidth( $hPen , $fWidth )\n\iSets the width of a pen (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_PenSetWidth( $hPen , $fWidth )"/>
          <Keyword text="_GDIPlus_RectFCreate" descr="_GDIPlus_RectFCreate( $nX = 0 , $nY = 0 , $nWidth = 0 , $nHeight = 0 )\n\iCreate a $tagGDIPRECTF structure (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_RectFCreate( $nX = 0 , $nY = 0 , $nWidth = 0 , $nHeight = 0 )"/>
          <Keyword text="_GDIPlus_Shutdown" descr="_GDIPlus_Shutdown()\n\iClean up resources used by Microsoft Windows GDI+ (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_Shutdown()"/>
          <Keyword text="_GDIPlus_Startup" descr="_GDIPlus_Startup()\n\iInitialize Microsoft Windows GDI+ (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_Startup()"/>
          <Keyword text="_GDIPlus_StringFormatCreate" descr="_GDIPlus_StringFormatCreate( $iFormat = 0 , $iLangID = 0 )\n\iCreate a String Format object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_StringFormatCreate( $iFormat = 0 , $iLangID = 0 )"/>
          <Keyword text="_GDIPlus_StringFormatDispose" descr="_GDIPlus_StringFormatDispose( $hFormat )\n\iRelease a String Format object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_StringFormatDispose( $hFormat )"/>
          <Keyword text="_GDIPlus_StringFormatSetAlign" descr="_GDIPlus_StringFormatSetAlign( $hStringFormat , $iFlag )\n\iSets the text alignment of a string format object (Requires: #include &lt;GDIPlus.au3&gt;)\i0" pattern="_GDIPlus_StringFormatSetAlign( $hStringFormat , $iFlag )"/>
          <Keyword text="_GUICtrlAVI_Close" descr="_GUICtrlAVI_Close( $hWnd )\n\iCloses an AVI clip (Requires: #include &lt;GuiAVI.au3&gt;)\i0" pattern="_GUICtrlAVI_Close( $hWnd )"/>
          <Keyword text="_GUICtrlAVI_Create" descr="_GUICtrlAVI_Create( $hWnd , $sFile = &quot;&quot; , $subfileid = -1 , $iX = 0 , $iY = 0 , $iWidth = 0 , $iHeight = 0 , $iStyle = 0x00000006 , $iExStyle = 0x00000000 )\n\iCreates an AVI control (Requires: #include &lt;GuiAVI.au3&gt;)\i0" pattern="_GUICtrlAVI_Create( $hWnd , $sFile = &quot;&quot; , $subfileid = -1 , $iX = 0 , $iY = 0 , $iWidth = 0 , $iHeight = 0 , $iStyle = 0x00000006 , $iExStyle = 0x00000000 )"/>
          <Keyword text="_GUICtrlAVI_Destroy" descr="_GUICtrlAVI_Destroy( ByRef $hWnd )\n\iDelete the control (Requires: #include &lt;GuiAVI.au3&gt;)\i0" pattern="_GUICtrlAVI_Destroy( ByRef $hWnd )"/>
          <Keyword text="_GUICtrlAVI_IsPlaying" descr="_GUICtrlAVI_IsPlaying( $hWnd )\n\iChecks whether an Audio-Video Interleaved (AVI) clip is playing (Requires: #include &lt;GuiAVI.au3&gt;)\i0" pattern="_GUICtrlAVI_IsPlaying( $hWnd )"/>
          <Keyword text="_GUICtrlAVI_Open" descr="_GUICtrlAVI_Open( $hWnd , $sFileName )\n\iOpens an AVI clip and displays its first frame in an animation control (Requires: #include &lt;GuiAVI.au3&gt;)\i0" pattern="_GUICtrlAVI_Open( $hWnd , $sFileName )"/>
          <Keyword text="_GUICtrlAVI_OpenEx" descr="_GUICtrlAVI_OpenEx( $hWnd , $sFileName , $iResourceID )\n\iOpens an AVI clip and displays its first frame in an animation control (Requires: #include &lt;GuiAVI.au3&gt;)\i0" pattern="_GUICtrlAVI_OpenEx( $hWnd , $sFileName , $iResourceID )"/>
          <Keyword text="_GUICtrlAVI_Play" descr="_GUICtrlAVI_Play( $hWnd , $iFrom = 0 , $iTo = -1 , $iRepeat = -1 )\n\iPlays an AVI clip in an animation control (Requires: #include &lt;GuiAVI.au3&gt;)\i0" pattern="_GUICtrlAVI_Play( $hWnd , $iFrom = 0 , $iTo = -1 , $iRepeat = -1 )"/>
          <Keyword text="_GUICtrlAVI_Seek" descr="_GUICtrlAVI_Seek( $hWnd , $iFrame )\n\iDirects an AVI control to display a particular frame of an AVI clip (Requires: #include &lt;GuiAVI.au3&gt;)\i0" pattern="_GUICtrlAVI_Seek( $hWnd , $iFrame )"/>
          <Keyword text="_GUICtrlAVI_Show" descr="_GUICtrlAVI_Show( $hWnd , $iState )\n\iShow/Hide the AVI control (Requires: #include &lt;GuiAVI.au3&gt;)\i0" pattern="_GUICtrlAVI_Show( $hWnd , $iState )"/>
          <Keyword text="_GUICtrlAVI_Stop" descr="_GUICtrlAVI_Stop( $hWnd )\n\iStops playing an AVI clip (Requires: #include &lt;GuiAVI.au3&gt;)\i0" pattern="_GUICtrlAVI_Stop( $hWnd )"/>
          <Keyword text="_GUICtrlButton_Click" descr="_GUICtrlButton_Click( $hWnd )\n\iSimulates the user clicking a button (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_Click( $hWnd )"/>
          <Keyword text="_GUICtrlButton_Create" descr="_GUICtrlButton_Create( $hWnd , $sText , $iX , $iY , $iWidth , $iHeight , $iStyle = -1 , $iExStyle = -1 )\n\iCreates a Button control (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_Create( $hWnd , $sText , $iX , $iY , $iWidth , $iHeight , $iStyle = -1 , $iExStyle = -1 )"/>
          <Keyword text="_GUICtrlButton_Destroy" descr="_GUICtrlButton_Destroy( ByRef $hWnd )\n\iDelete the Button control (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_Destroy( ByRef $hWnd )"/>
          <Keyword text="_GUICtrlButton_Enable" descr="_GUICtrlButton_Enable( $hWnd , $fEnable = True )\n\iEnables or disables mouse and keyboard input to the specified button (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_Enable( $hWnd , $fEnable = True )"/>
          <Keyword text="_GUICtrlButton_GetCheck" descr="_GUICtrlButton_GetCheck( $hWnd )\n\iGets the check state of a radio button or check box (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_GetCheck( $hWnd )"/>
          <Keyword text="_GUICtrlButton_GetFocus" descr="_GUICtrlButton_GetFocus( $hWnd )\n\iRetrieves if the button has keyboard focus (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_GetFocus( $hWnd )"/>
          <Keyword text="_GUICtrlButton_GetIdealSize" descr="_GUICtrlButton_GetIdealSize( $hWnd )\n\iGets the size of the button that best fits its text and image, if an image list is present (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_GetIdealSize( $hWnd )"/>
          <Keyword text="_GUICtrlButton_GetImage" descr="_GUICtrlButton_GetImage( $hWnd )\n\iRetrieves a handle to the image (icon or bitmap) associated with the button (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_GetImage( $hWnd )"/>
          <Keyword text="_GUICtrlButton_GetImageList" descr="_GUICtrlButton_GetImageList( $hWnd )\n\iRetrieves an array that describes the image list assigned to a button control (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_GetImageList( $hWnd )"/>
          <Keyword text="_GUICtrlButton_GetNote" descr="_GUICtrlButton_GetNote( $hWnd )\n\iGets the text of the note associated with the Command Link button (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_GetNote( $hWnd )"/>
          <Keyword text="_GUICtrlButton_GetNoteLength" descr="_GUICtrlButton_GetNoteLength( $hWnd )\n\iGets the length of the note text that may be displayed in the description for a command link button (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_GetNoteLength( $hWnd )"/>
          <Keyword text="_GUICtrlButton_GetSplitInfo" descr="_GUICtrlButton_GetSplitInfo( $hWnd )\n\iGets information for a split button control (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_GetSplitInfo( $hWnd )"/>
          <Keyword text="_GUICtrlButton_GetState" descr="_GUICtrlButton_GetState( $hWnd )\n\iDetermines the state of a button or check box (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_GetState( $hWnd )"/>
          <Keyword text="_GUICtrlButton_GetText" descr="_GUICtrlButton_GetText( $hWnd )\n\iRetrieve the text of the button (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_GetText( $hWnd )"/>
          <Keyword text="_GUICtrlButton_GetTextMargin" descr="_GUICtrlButton_GetTextMargin( $hWnd )\n\iGets the margins used to draw text in a button control (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_GetTextMargin( $hWnd )"/>
          <Keyword text="_GUICtrlButton_SetCheck" descr="_GUICtrlButton_SetCheck( $hWnd , $iState = $BST_CHECKED )\n\iSets the check state of a radio button or check box (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_SetCheck( $hWnd , $iState = $BST_CHECKED )"/>
          <Keyword text="_GUICtrlButton_SetDontClick" descr="_GUICtrlButton_SetDontClick( $hWnd , $fState = True )\n\iSets the state of $BST_DONTCLICK flag on a button (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_SetDontClick( $hWnd , $fState = True )"/>
          <Keyword text="_GUICtrlButton_SetFocus" descr="_GUICtrlButton_SetFocus( $hWnd , $fFocus = True )\n\iSets the keyboard focus to the specified button (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_SetFocus( $hWnd , $fFocus = True )"/>
          <Keyword text="_GUICtrlButton_SetImage" descr="_GUICtrlButton_SetImage( $hWnd , $sImageFile , $nIconId = -1 , $fLarge = False )\n\iSets the image of a button (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_SetImage( $hWnd , $sImageFile , $nIconId = -1 , $fLarge = False )"/>
          <Keyword text="_GUICtrlButton_SetImageList" descr="_GUICtrlButton_SetImageList( $hWnd , $hImage , $nAlign = 0 , $iLeft = 1 , $iTop = 1 , $iRight = 1 , $iBottom = 1 )\n\iAssigns an image list to a button control (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_SetImageList( $hWnd , $hImage , $nAlign = 0 , $iLeft = 1 , $iTop = 1 , $iRight = 1 , $iBottom = 1 )"/>
          <Keyword text="_GUICtrlButton_SetNote" descr="_GUICtrlButton_SetNote( $hWnd , $sNote )\n\iSets the text of the note associated with a command link button (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_SetNote( $hWnd , $sNote )"/>
          <Keyword text="_GUICtrlButton_SetShield" descr="_GUICtrlButton_SetShield( $hWnd , $fRequired = True )\n\iSets the elevation required state for a specified button or command link to display an elevated icon (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_SetShield( $hWnd , $fRequired = True )"/>
          <Keyword text="_GUICtrlButton_SetSize" descr="_GUICtrlButton_SetSize( $hWnd , $iWidth , $iHeight )\n\iSets the size of the button (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_SetSize( $hWnd , $iWidth , $iHeight )"/>
          <Keyword text="_GUICtrlButton_SetSplitInfo" descr="_GUICtrlButton_SetSplitInfo( $hWnd , $himlGlyph = -1 , $iSplitStyle = $BCSS_ALIGNLEFT , $iWidth = 0 , $iHeight = 0 )\n\iGets information for a split button control (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_SetSplitInfo( $hWnd , $himlGlyph = -1 , $iSplitStyle = $BCSS_ALIGNLEFT , $iWidth = 0 , $iHeight = 0 )"/>
          <Keyword text="_GUICtrlButton_SetState" descr="_GUICtrlButton_SetState( $hWnd , $fHighlighted = True )\n\iSets the highlight state of a button. The highlight state indicates whether the button is highlighted as if the user had pushed it. (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_SetState( $hWnd , $fHighlighted = True )"/>
          <Keyword text="_GUICtrlButton_SetStyle" descr="_GUICtrlButton_SetStyle( $hWnd , $iStyle )\n\iSets the style of a button (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_SetStyle( $hWnd , $iStyle )"/>
          <Keyword text="_GUICtrlButton_SetText" descr="_GUICtrlButton_SetText( $hWnd , $sText )\n\iSets the text of the button (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_SetText( $hWnd , $sText )"/>
          <Keyword text="_GUICtrlButton_SetTextMargin" descr="_GUICtrlButton_SetTextMargin( $hWnd , $iLeft = 1 , $iTop = 1 , $iRight = 1 , $iBottom = 1 )\n\iSets the margins for drawing text in a button control (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_SetTextMargin( $hWnd , $iLeft = 1 , $iTop = 1 , $iRight = 1 , $iBottom = 1 )"/>
          <Keyword text="_GUICtrlButton_Show" descr="_GUICtrlButton_Show( $hWnd , $fShow = True )\n\iShow/Hide button (Requires: #include &lt;GuiButton.au3&gt;)\i0" pattern="_GUICtrlButton_Show( $hWnd , $fShow = True )"/>
          <Keyword text="_GUICtrlComboBoxEx_AddDir" descr="_GUICtrlComboBoxEx_AddDir( $hWnd , $sFile , $iAttributes = 0 , $fBrackets = True )\n\iAdds the names of directories and files (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_AddDir( $hWnd , $sFile , $iAttributes = 0 , $fBrackets = True )"/>
          <Keyword text="_GUICtrlComboBoxEx_AddString" descr="_GUICtrlComboBoxEx_AddString( $hWnd , $sText , $iImage = -1 , $iSelecteImage = -1 , $iOverlayImage = -1 , $iIndent = -1 , $iParam = -1 )\n\iAdd a string (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_AddString( $hWnd , $sText , $iImage = -1 , $iSelecteImage = -1 , $iOverlayImage = -1 , $iIndent = -1 , $iParam = -1 )"/>
          <Keyword text="_GUICtrlComboBoxEx_BeginUpdate" descr="_GUICtrlComboBoxEx_BeginUpdate( $hWnd )\n\iPrevents updating of the control until the EndUpdate function is called (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_BeginUpdate( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_Create" descr="_GUICtrlComboBoxEx_Create( $hWnd , $sText , $iX , $iY , $iWidth = 100 , $iHeight = 200 , $iStyle = 0x00200002 , $iExStyle = 0x00000000 )\n\iCreate a ComboBoxEx control (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_Create( $hWnd , $sText , $iX , $iY , $iWidth = 100 , $iHeight = 200 , $iStyle = 0x00200002 , $iExStyle = 0x00000000 )"/>
          <Keyword text="_GUICtrlComboBoxEx_CreateSolidBitMap" descr="_GUICtrlComboBoxEx_CreateSolidBitMap( $hWnd , $iColor , $iWidth , $iHeight )\n\iCreates a solid color bitmap (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_CreateSolidBitMap( $hWnd , $iColor , $iWidth , $iHeight )"/>
          <Keyword text="_GUICtrlComboBoxEx_DeleteString" descr="_GUICtrlComboBoxEx_DeleteString( $hWnd , $iIndex )\n\iRemoves an item from a ComboBoxEx control (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_DeleteString( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlComboBoxEx_Destroy" descr="_GUICtrlComboBoxEx_Destroy( ByRef $hWnd )\n\iDelete the control (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_Destroy( ByRef $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_EndUpdate" descr="_GUICtrlComboBoxEx_EndUpdate( $hWnd )\n\iEnables screen repainting that was turned off with the BeginUpdate function (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_EndUpdate( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_FindStringExact" descr="_GUICtrlComboBoxEx_FindStringExact( $hWnd , $sText , $iIndex = -1 )\n\iSearch for a string (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_FindStringExact( $hWnd , $sText , $iIndex = -1 )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetComboBoxInfo" descr="_GUICtrlComboBoxEx_GetComboBoxInfo( $hWnd , ByRef $tInfo )\n\iGets information about the specified ComboBox (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetComboBoxInfo( $hWnd , ByRef $tInfo )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetComboControl" descr="_GUICtrlComboBoxEx_GetComboControl( $hWnd )\n\iGets the handle to the child combo box control (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetComboControl( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetCount" descr="_GUICtrlComboBoxEx_GetCount( $hWnd )\n\iRetrieve the number of items (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetCount( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetCurSel" descr="_GUICtrlComboBoxEx_GetCurSel( $hWnd )\n\iRetrieve the index of the currently selected item (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetCurSel( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetDroppedControlRect" descr="_GUICtrlComboBoxEx_GetDroppedControlRect( $hWnd )\n\iRetrieve the screen coordinates of a combo box in its dropped-down state (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetDroppedControlRect( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetDroppedControlRectEx" descr="_GUICtrlComboBoxEx_GetDroppedControlRectEx( $hWnd )\n\iRetrieve the screen coordinates of a combo box in its dropped-down state (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetDroppedControlRectEx( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetDroppedState" descr="_GUICtrlComboBoxEx_GetDroppedState( $hWnd )\n\iDetermines whether the ListBox of a ComboBox is dropped down (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetDroppedState( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetDroppedWidth" descr="_GUICtrlComboBoxEx_GetDroppedWidth( $hWnd )\n\iRetrieve the minimum allowable width, of the ListBox of a ComboBox (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetDroppedWidth( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetEditControl" descr="_GUICtrlComboBoxEx_GetEditControl( $hWnd )\n\iGets the handle to the edit control portion of a ComboBoxEx control (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetEditControl( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetEditSel" descr="_GUICtrlComboBoxEx_GetEditSel( $hWnd )\n\iGets the starting and ending character positions of the current selection in the edit control of a ComboBox (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetEditSel( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetEditText" descr="_GUICtrlComboBoxEx_GetEditText( $hWnd )\n\iGet the text from the edit control of a ComboBoxEx (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetEditText( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetExtendedStyle" descr="_GUICtrlComboBoxEx_GetExtendedStyle( $hWnd )\n\iGets the extended styles that are in use for a ComboBoxEx control (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetExtendedStyle( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetExtendedUI" descr="_GUICtrlComboBoxEx_GetExtendedUI( $hWnd )\n\iDetermines whether a ComboBox has the default user interface or the extended user interface (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetExtendedUI( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetImageList" descr="_GUICtrlComboBoxEx_GetImageList( $hWnd )\n\iRetrieves the handle to an image list assigned to a ComboBoxEx control (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetImageList( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetItem" descr="_GUICtrlComboBoxEx_GetItem( $hWnd , $iIndex )\n\iRetrieves an item&apos;s attributes (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetItem( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetItemEx" descr="_GUICtrlComboBoxEx_GetItemEx( $hWnd , ByRef $tItem )\n\iRetrieves some or all of an item&apos;s attributes (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetItemEx( $hWnd , ByRef $tItem )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetItemHeight" descr="_GUICtrlComboBoxEx_GetItemHeight( $hWnd , $iComponent = -1 )\n\iDetermines the height of list items or the selection field in a ComboBox (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetItemHeight( $hWnd , $iComponent = -1 )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetItemImage" descr="_GUICtrlComboBoxEx_GetItemImage( $hWnd , $iIndex )\n\iRetrieves the index of the item&apos;s icon (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetItemImage( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetItemIndent" descr="_GUICtrlComboBoxEx_GetItemIndent( $hWnd , $iIndex )\n\iRetrieves the number of image widths the item is indented (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetItemIndent( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetItemOverlayImage" descr="_GUICtrlComboBoxEx_GetItemOverlayImage( $hWnd , $iIndex )\n\iRetrieves the index of the item&apos;s overlay image icon (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetItemOverlayImage( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetItemParam" descr="_GUICtrlComboBoxEx_GetItemParam( $hWnd , $iIndex )\n\iRetrieves the application specific value of the item (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetItemParam( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetItemSelectedImage" descr="_GUICtrlComboBoxEx_GetItemSelectedImage( $hWnd , $iIndex )\n\iRetrieves the index of the item&apos;s selected image icon (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetItemSelectedImage( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetItemText" descr="_GUICtrlComboBoxEx_GetItemText( $hWnd , $iIndex , ByRef $sText )\n\iRetrieve a string from the list of a ComboBox (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetItemText( $hWnd , $iIndex , ByRef $sText )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetItemTextLen" descr="_GUICtrlComboBoxEx_GetItemTextLen( $hWnd , $iIndex )\n\iGets the length, in characters, of a string in the list of a combo box (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetItemTextLen( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetList" descr="_GUICtrlComboBoxEx_GetList( $hWnd )\n\iRetrieves all items from the list portion of a ComboBox control (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetList( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetListArray" descr="_GUICtrlComboBoxEx_GetListArray( $hWnd )\n\iRetrieves all items from the list portion of a ComboBox control (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetListArray( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetLocale" descr="_GUICtrlComboBoxEx_GetLocale( $hWnd )\n\iRetrieves the current locale (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetLocale( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetLocaleCountry" descr="_GUICtrlComboBoxEx_GetLocaleCountry( $hWnd )\n\iRetrieves the current country code (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetLocaleCountry( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetLocaleLang" descr="_GUICtrlComboBoxEx_GetLocaleLang( $hWnd )\n\iRetrieves the current language identifier (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetLocaleLang( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetLocalePrimLang" descr="_GUICtrlComboBoxEx_GetLocalePrimLang( $hWnd )\n\iExtract primary language id from a language id (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetLocalePrimLang( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetLocaleSubLang" descr="_GUICtrlComboBoxEx_GetLocaleSubLang( $hWnd )\n\iExtract sublanguage id from a language id (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetLocaleSubLang( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetMinVisible" descr="_GUICtrlComboBoxEx_GetMinVisible( $hWnd )\n\iRetrieve the minimum number of visible items in the drop-down list of a ComboBox (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetMinVisible( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetTopIndex" descr="_GUICtrlComboBoxEx_GetTopIndex( $hWnd )\n\iRetrieve the zero-based index of the first visible item in the ListBox portion of a ComboBox (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetTopIndex( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_GetUnicode" descr="_GUICtrlComboBoxEx_GetUnicode( $hWnd )\n\iRetrieves if control is using Unicode (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_GetUnicode( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_InitStorage" descr="_GUICtrlComboBoxEx_InitStorage( $hWnd , $iNum , $iBytes )\n\iAllocates memory for storing ListBox items (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_InitStorage( $hWnd , $iNum , $iBytes )"/>
          <Keyword text="_GUICtrlComboBoxEx_InsertString" descr="_GUICtrlComboBoxEx_InsertString( $hWnd , $sText , $iIndex = 0 , $iImage = -1 , $iSelecteImage = -1 , $iOverlayImage = -1 , $iIndent = -1 , $iParam = -1 )\n\iInserts a new item in the control (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_InsertString( $hWnd , $sText , $iIndex = 0 , $iImage = -1 , $iSelecteImage = -1 , $iOverlayImage = -1 , $iIndent = -1 , $iParam = -1 )"/>
          <Keyword text="_GUICtrlComboBoxEx_LimitText" descr="_GUICtrlComboBoxEx_LimitText( $hWnd , $iLimit = 0 )\n\iLimits the length of the text the user may type into the edit control of a ComboBox (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_LimitText( $hWnd , $iLimit = 0 )"/>
          <Keyword text="_GUICtrlComboBoxEx_ReplaceEditSel" descr="_GUICtrlComboBoxEx_ReplaceEditSel( $hWnd , $sText )\n\iReplace text selected in edit box (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_ReplaceEditSel( $hWnd , $sText )"/>
          <Keyword text="_GUICtrlComboBoxEx_ResetContent" descr="_GUICtrlComboBoxEx_ResetContent( $hWnd )\n\iRemoves all items (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_ResetContent( $hWnd )"/>
          <Keyword text="_GUICtrlComboBoxEx_SetCurSel" descr="_GUICtrlComboBoxEx_SetCurSel( $hWnd , $iIndex = -1 )\n\iSelect a string in the list of a ComboBox (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_SetCurSel( $hWnd , $iIndex = -1 )"/>
          <Keyword text="_GUICtrlComboBoxEx_SetDroppedWidth" descr="_GUICtrlComboBoxEx_SetDroppedWidth( $hWnd , $iWidth )\n\iSet the maximum allowable width, in pixels, of the ListBox of a ComboBox (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_SetDroppedWidth( $hWnd , $iWidth )"/>
          <Keyword text="_GUICtrlComboBoxEx_SetEditSel" descr="_GUICtrlComboBoxEx_SetEditSel( $hWnd , $iStart , $iStop )\n\iSelect characters in the edit control of a ComboBox (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_SetEditSel( $hWnd , $iStart , $iStop )"/>
          <Keyword text="_GUICtrlComboBoxEx_SetEditText" descr="_GUICtrlComboBoxEx_SetEditText( $hWnd , $sText )\n\iSet the text of the edit control of the ComboBox (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_SetEditText( $hWnd , $sText )"/>
          <Keyword text="_GUICtrlComboBoxEx_SetExtendedStyle" descr="_GUICtrlComboBoxEx_SetExtendedStyle( $hWnd , $iExStyle , $iExMask = 0 )\n\iSets extended styles within a ComboBoxEx control (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_SetExtendedStyle( $hWnd , $iExStyle , $iExMask = 0 )"/>
          <Keyword text="_GUICtrlComboBoxEx_SetExtendedUI" descr="_GUICtrlComboBoxEx_SetExtendedUI( $hWnd , $fExtended = False )\n\iSelect either the default user interface or the extended user interface (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_SetExtendedUI( $hWnd , $fExtended = False )"/>
          <Keyword text="_GUICtrlComboBoxEx_SetImageList" descr="_GUICtrlComboBoxEx_SetImageList( $hWnd , $hHandle )\n\iSets an image list for a ComboBoxEx control (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_SetImageList( $hWnd , $hHandle )"/>
          <Keyword text="_GUICtrlComboBoxEx_SetItem" descr="_GUICtrlComboBoxEx_SetItem( $hWnd , $sText , $iIndex = 0 , $iImage = -1 , $iSelectedImage = -1 , $iOverlayImage = -1 , $iIndent = -1 , $iParam = -1 )\n\iSets some or all of a item&apos;s attributes (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_SetItem( $hWnd , $sText , $iIndex = 0 , $iImage = -1 , $iSelectedImage = -1 , $iOverlayImage = -1 , $iIndent = -1 , $iParam = -1 )"/>
          <Keyword text="_GUICtrlComboBoxEx_SetItemEx" descr="_GUICtrlComboBoxEx_SetItemEx( $hWnd , ByRef $tItem )\n\iSets some or all of a item&apos;s attributes (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_SetItemEx( $hWnd , ByRef $tItem )"/>
          <Keyword text="_GUICtrlComboBoxEx_SetItemHeight" descr="_GUICtrlComboBoxEx_SetItemHeight( $hWnd , $iComponent , $iHeight )\n\iSet the height of list items or the selection field in a ComboBox (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_SetItemHeight( $hWnd , $iComponent , $iHeight )"/>
          <Keyword text="_GUICtrlComboBoxEx_SetItemImage" descr="_GUICtrlComboBoxEx_SetItemImage( $hWnd , $iIndex , $iImage )\n\iSets the index of the item&apos;s icon in the control&apos;s image list (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_SetItemImage( $hWnd , $iIndex , $iImage )"/>
          <Keyword text="_GUICtrlComboBoxEx_SetItemIndent" descr="_GUICtrlComboBoxEx_SetItemIndent( $hWnd , $iIndex , $iIndent )\n\iSets the number of image widths to indent the item (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_SetItemIndent( $hWnd , $iIndex , $iIndent )"/>
          <Keyword text="_GUICtrlComboBoxEx_SetItemOverlayImage" descr="_GUICtrlComboBoxEx_SetItemOverlayImage( $hWnd , $iIndex , $iImage )\n\iSets the index of the item&apos;s overlay icon in the control&apos;s image list (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_SetItemOverlayImage( $hWnd , $iIndex , $iImage )"/>
          <Keyword text="_GUICtrlComboBoxEx_SetItemParam" descr="_GUICtrlComboBoxEx_SetItemParam( $hWnd , $iIndex , $iParam )\n\iSets the value specific to the item (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_SetItemParam( $hWnd , $iIndex , $iParam )"/>
          <Keyword text="_GUICtrlComboBoxEx_SetItemSelectedImage" descr="_GUICtrlComboBoxEx_SetItemSelectedImage( $hWnd , $iIndex , $iImage )\n\iSets the index of the item&apos;s overlay icon in the control&apos;s image list (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_SetItemSelectedImage( $hWnd , $iIndex , $iImage )"/>
          <Keyword text="_GUICtrlComboBoxEx_SetMinVisible" descr="_GUICtrlComboBoxEx_SetMinVisible( $hWnd , $iMinimum )\n\iSet the minimum number of visible items in the drop-down list of a ComboBox (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_SetMinVisible( $hWnd , $iMinimum )"/>
          <Keyword text="_GUICtrlComboBoxEx_SetTopIndex" descr="_GUICtrlComboBoxEx_SetTopIndex( $hWnd , $iIndex )\n\iEnsure that a particular item is visible in the ListBox of a ComboBox (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_SetTopIndex( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlComboBoxEx_SetUnicode" descr="_GUICtrlComboBoxEx_SetUnicode( $hWnd , $fUnicode = True )\n\iSets if control is using Unicode (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_SetUnicode( $hWnd , $fUnicode = True )"/>
          <Keyword text="_GUICtrlComboBoxEx_ShowDropDown" descr="_GUICtrlComboBoxEx_ShowDropDown( $hWnd , $fShow = False )\n\iShow or hide the ListBox of a ComboBox (Requires: #include &lt;GuiComboBoxEx.au3&gt;)\i0" pattern="_GUICtrlComboBoxEx_ShowDropDown( $hWnd , $fShow = False )"/>
          <Keyword text="_GUICtrlComboBox_AddDir" descr="_GUICtrlComboBox_AddDir( $hWnd , $sFile , $iAttributes = 0 , $fBrackets = True )\n\iAdds the names of directories and files (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_AddDir( $hWnd , $sFile , $iAttributes = 0 , $fBrackets = True )"/>
          <Keyword text="_GUICtrlComboBox_AddString" descr="_GUICtrlComboBox_AddString( $hWnd , $sText )\n\iAdd a string (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_AddString( $hWnd , $sText )"/>
          <Keyword text="_GUICtrlComboBox_AutoComplete" descr="_GUICtrlComboBox_AutoComplete( $hWnd )\n\iAutoComplete a ComboBox edit control (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_AutoComplete( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_BeginUpdate" descr="_GUICtrlComboBox_BeginUpdate( $hWnd )\n\iPrevents updating of the control until the EndUpdate function is called (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_BeginUpdate( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_Create" descr="_GUICtrlComboBox_Create( $hWnd , $sText , $iX , $iY , $iWidth = 100 , $iHeight = 120 , $iStyle = 0x00200042 , $iExStyle = 0x00000000 )\n\iCreate a ComboBox control (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_Create( $hWnd , $sText , $iX , $iY , $iWidth = 100 , $iHeight = 120 , $iStyle = 0x00200042 , $iExStyle = 0x00000000 )"/>
          <Keyword text="_GUICtrlComboBox_DeleteString" descr="_GUICtrlComboBox_DeleteString( $hWnd , $iIndex )\n\iDelete a string (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_DeleteString( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlComboBox_Destroy" descr="_GUICtrlComboBox_Destroy( ByRef $hWnd )\n\iDelete the control (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_Destroy( ByRef $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_EndUpdate" descr="_GUICtrlComboBox_EndUpdate( $hWnd )\n\iEnables screen repainting that was turned off with the BeginUpdate function (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_EndUpdate( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_FindString" descr="_GUICtrlComboBox_FindString( $hWnd , $sText , $iIndex = -1 )\n\iSearch for a string (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_FindString( $hWnd , $sText , $iIndex = -1 )"/>
          <Keyword text="_GUICtrlComboBox_FindStringExact" descr="_GUICtrlComboBox_FindStringExact( $hWnd , $sText , $iIndex = -1 )\n\iSearch for a string (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_FindStringExact( $hWnd , $sText , $iIndex = -1 )"/>
          <Keyword text="_GUICtrlComboBox_GetComboBoxInfo" descr="_GUICtrlComboBox_GetComboBoxInfo( $hWnd , ByRef $tInfo )\n\iGets information about the specified ComboBox (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetComboBoxInfo( $hWnd , ByRef $tInfo )"/>
          <Keyword text="_GUICtrlComboBox_GetCount" descr="_GUICtrlComboBox_GetCount( $hWnd )\n\iRetrieve the number of items (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetCount( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_GetCueBanner" descr="_GUICtrlComboBox_GetCueBanner( $hWnd )\n\iGets the cue banner text displayed in the edit control of a combo box (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetCueBanner( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_GetCurSel" descr="_GUICtrlComboBox_GetCurSel( $hWnd )\n\iRetrieve the index of the currently selected item (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetCurSel( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_GetDroppedControlRect" descr="_GUICtrlComboBox_GetDroppedControlRect( $hWnd )\n\iRetrieve the screen coordinates of a combo box in its dropped-down state (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetDroppedControlRect( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_GetDroppedControlRectEx" descr="_GUICtrlComboBox_GetDroppedControlRectEx( $hWnd )\n\iRetrieve the screen coordinates of a combo box in its dropped-down state (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetDroppedControlRectEx( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_GetDroppedState" descr="_GUICtrlComboBox_GetDroppedState( $hWnd )\n\iDetermines whether the ListBox of a ComboBox is dropped down (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetDroppedState( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_GetDroppedWidth" descr="_GUICtrlComboBox_GetDroppedWidth( $hWnd )\n\iRetrieve the minimum allowable width, of the ListBox of a ComboBox (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetDroppedWidth( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_GetEditSel" descr="_GUICtrlComboBox_GetEditSel( $hWnd )\n\iGets the starting and ending character positions of the current selection in the edit control of a ComboBox (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetEditSel( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_GetEditText" descr="_GUICtrlComboBox_GetEditText( $hWnd )\n\iGet the text from the edit control of a ComboBox (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetEditText( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_GetExtendedUI" descr="_GUICtrlComboBox_GetExtendedUI( $hWnd )\n\iDetermines whether a ComboBox has the default user interface or the extended user interface (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetExtendedUI( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_GetHorizontalExtent" descr="_GUICtrlComboBox_GetHorizontalExtent( $hWnd )\n\iGets the width, in pixels, that the ListBox of a ComboBox control can be scrolled horizontally (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetHorizontalExtent( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_GetItemHeight" descr="_GUICtrlComboBox_GetItemHeight( $hWnd , $iIndex = -1 )\n\iDetermines the height of list items or the selection field in a ComboBox (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetItemHeight( $hWnd , $iIndex = -1 )"/>
          <Keyword text="_GUICtrlComboBox_GetLBText" descr="_GUICtrlComboBox_GetLBText( $hWnd , $iIndex , ByRef $sText )\n\iRetrieve a string from the list of a ComboBox (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetLBText( $hWnd , $iIndex , ByRef $sText )"/>
          <Keyword text="_GUICtrlComboBox_GetLBTextLen" descr="_GUICtrlComboBox_GetLBTextLen( $hWnd , $iIndex )\n\iGets the length, in characters, of a string in the list of a combo box (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetLBTextLen( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlComboBox_GetList" descr="_GUICtrlComboBox_GetList( $hWnd )\n\iRetrieves all items from the list portion of a ComboBox control (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetList( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_GetListArray" descr="_GUICtrlComboBox_GetListArray( $hWnd )\n\iRetrieves all items from the list portion of a ComboBox control (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetListArray( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_GetLocale" descr="_GUICtrlComboBox_GetLocale( $hWnd )\n\iRetrieves the current locale (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetLocale( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_GetLocaleCountry" descr="_GUICtrlComboBox_GetLocaleCountry( $hWnd )\n\iRetrieves the current country code (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetLocaleCountry( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_GetLocaleLang" descr="_GUICtrlComboBox_GetLocaleLang( $hWnd )\n\iRetrieves the current language identifier (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetLocaleLang( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_GetLocalePrimLang" descr="_GUICtrlComboBox_GetLocalePrimLang( $hWnd )\n\iExtract primary language id from a language id (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetLocalePrimLang( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_GetLocaleSubLang" descr="_GUICtrlComboBox_GetLocaleSubLang( $hWnd )\n\iExtract sublanguage id from a language id (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetLocaleSubLang( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_GetMinVisible" descr="_GUICtrlComboBox_GetMinVisible( $hWnd )\n\iRetrieve the minimum number of visible items in the drop-down list of a ComboBox (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetMinVisible( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_GetTopIndex" descr="_GUICtrlComboBox_GetTopIndex( $hWnd )\n\iRetrieve the zero-based index of the first visible item in the ListBox portion of a ComboBox (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_GetTopIndex( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_InitStorage" descr="_GUICtrlComboBox_InitStorage( $hWnd , $iNum , $iBytes )\n\iAllocates memory for storing ListBox items (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_InitStorage( $hWnd , $iNum , $iBytes )"/>
          <Keyword text="_GUICtrlComboBox_InsertString" descr="_GUICtrlComboBox_InsertString( $hWnd , $sText , $iIndex = -1 )\n\iInsert a string (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_InsertString( $hWnd , $sText , $iIndex = -1 )"/>
          <Keyword text="_GUICtrlComboBox_LimitText" descr="_GUICtrlComboBox_LimitText( $hWnd , $iLimit = 0 )\n\iLimits the length of the text the user may type into the edit control of a ComboBox (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_LimitText( $hWnd , $iLimit = 0 )"/>
          <Keyword text="_GUICtrlComboBox_ReplaceEditSel" descr="_GUICtrlComboBox_ReplaceEditSel( $hWnd , $sText )\n\iReplace text selected in edit box (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_ReplaceEditSel( $hWnd , $sText )"/>
          <Keyword text="_GUICtrlComboBox_ResetContent" descr="_GUICtrlComboBox_ResetContent( $hWnd )\n\iRemove all items from the ListBox and edit control of a ComboBox (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_ResetContent( $hWnd )"/>
          <Keyword text="_GUICtrlComboBox_SelectString" descr="_GUICtrlComboBox_SelectString( $hWnd , $sText , $iIndex = -1 )\n\iSearches the ListBox of a ComboBox for an item that begins with the characters in a specified string (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_SelectString( $hWnd , $sText , $iIndex = -1 )"/>
          <Keyword text="_GUICtrlComboBox_SetCueBanner" descr="_GUICtrlComboBox_SetCueBanner( $hWnd , $sText )\n\iSets the cue banner text that is displayed for the edit control of a combo box (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_SetCueBanner( $hWnd , $sText )"/>
          <Keyword text="_GUICtrlComboBox_SetCurSel" descr="_GUICtrlComboBox_SetCurSel( $hWnd , $iIndex = -1 )\n\iSelect a string in the list of a ComboBox (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_SetCurSel( $hWnd , $iIndex = -1 )"/>
          <Keyword text="_GUICtrlComboBox_SetDroppedWidth" descr="_GUICtrlComboBox_SetDroppedWidth( $hWnd , $iWidth )\n\iSet the maximum allowable width, in pixels, of the ListBox of a ComboBox (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_SetDroppedWidth( $hWnd , $iWidth )"/>
          <Keyword text="_GUICtrlComboBox_SetEditSel" descr="_GUICtrlComboBox_SetEditSel( $hWnd , $iStart , $iStop )\n\iSelect characters in the edit control of a ComboBox (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_SetEditSel( $hWnd , $iStart , $iStop )"/>
          <Keyword text="_GUICtrlComboBox_SetEditText" descr="_GUICtrlComboBox_SetEditText( $hWnd , $sText )\n\iSet the text of the edit control of the ComboBox (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_SetEditText( $hWnd , $sText )"/>
          <Keyword text="_GUICtrlComboBox_SetExtendedUI" descr="_GUICtrlComboBox_SetExtendedUI( $hWnd , $fExtended = False )\n\iSelect either the default user interface or the extended user interface (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_SetExtendedUI( $hWnd , $fExtended = False )"/>
          <Keyword text="_GUICtrlComboBox_SetHorizontalExtent" descr="_GUICtrlComboBox_SetHorizontalExtent( $hWnd , $iWidth )\n\iSet the width, in pixels, by which a list box can be scrolled horizontally (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_SetHorizontalExtent( $hWnd , $iWidth )"/>
          <Keyword text="_GUICtrlComboBox_SetItemHeight" descr="_GUICtrlComboBox_SetItemHeight( $hWnd , $iHeight , $iComponent = -1 )\n\iSet the height of list items or the selection field in a ComboBox (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_SetItemHeight( $hWnd , $iHeight , $iComponent = -1 )"/>
          <Keyword text="_GUICtrlComboBox_SetMinVisible" descr="_GUICtrlComboBox_SetMinVisible( $hWnd , $iMinimum )\n\iSet the minimum number of visible items in the drop-down list of a ComboBox (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_SetMinVisible( $hWnd , $iMinimum )"/>
          <Keyword text="_GUICtrlComboBox_SetTopIndex" descr="_GUICtrlComboBox_SetTopIndex( $hWnd , $iIndex )\n\iEnsure that a particular item is visible in the ListBox of a ComboBox (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_SetTopIndex( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlComboBox_ShowDropDown" descr="_GUICtrlComboBox_ShowDropDown( $hWnd , $fShow = False )\n\iShow or hide the ListBox of a ComboBox (Requires: #include &lt;GuiComboBox.au3&gt;)\i0" pattern="_GUICtrlComboBox_ShowDropDown( $hWnd , $fShow = False )"/>
          <Keyword text="_GUICtrlDTP_Create" descr="_GUICtrlDTP_Create( $hWnd , $iX , $iY , $iWidth = 120 , $iHeight = 21 , $iStyle = 0x00000000 , $iExStyle = 0x00000000 )\n\iCreate a DTP control (Requires: #include &lt;GuiDateTimePicker.au3&gt;)\i0" pattern="_GUICtrlDTP_Create( $hWnd , $iX , $iY , $iWidth = 120 , $iHeight = 21 , $iStyle = 0x00000000 , $iExStyle = 0x00000000 )"/>
          <Keyword text="_GUICtrlDTP_Destroy" descr="_GUICtrlDTP_Destroy( ByRef $hWnd )\n\iDelete the control (Requires: #include &lt;GuiDateTimePicker.au3&gt;)\i0" pattern="_GUICtrlDTP_Destroy( ByRef $hWnd )"/>
          <Keyword text="_GUICtrlDTP_GetMCColor" descr="_GUICtrlDTP_GetMCColor( $hWnd , $iIndex )\n\iRetrieves the specified color (Requires: #include &lt;GuiDateTimePicker.au3&gt;)\i0" pattern="_GUICtrlDTP_GetMCColor( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlDTP_GetMCFont" descr="_GUICtrlDTP_GetMCFont( $hWnd )\n\iRetrieves the month calendar font handle (Requires: #include &lt;GuiDateTimePicker.au3&gt;)\i0" pattern="_GUICtrlDTP_GetMCFont( $hWnd )"/>
          <Keyword text="_GUICtrlDTP_GetMonthCal" descr="_GUICtrlDTP_GetMonthCal( $hWnd )\n\iRetrieves the handle to child month calendar control (Requires: #include &lt;GuiDateTimePicker.au3&gt;)\i0" pattern="_GUICtrlDTP_GetMonthCal( $hWnd )"/>
          <Keyword text="_GUICtrlDTP_GetRange" descr="_GUICtrlDTP_GetRange( $hWnd )\n\iRetrieves the current minimum and maximum allowable system times (Requires: #include &lt;GuiDateTimePicker.au3&gt;)\i0" pattern="_GUICtrlDTP_GetRange( $hWnd )"/>
          <Keyword text="_GUICtrlDTP_GetRangeEx" descr="_GUICtrlDTP_GetRangeEx( $hWnd )\n\iRetrieves the current minimum and maximum allowable system times (Requires: #include &lt;GuiDateTimePicker.au3&gt;)\i0" pattern="_GUICtrlDTP_GetRangeEx( $hWnd )"/>
          <Keyword text="_GUICtrlDTP_GetSystemTime" descr="_GUICtrlDTP_GetSystemTime( $hWnd )\n\iRetrieves the currently selected date and time (Requires: #include &lt;GuiDateTimePicker.au3&gt;)\i0" pattern="_GUICtrlDTP_GetSystemTime( $hWnd )"/>
          <Keyword text="_GUICtrlDTP_GetSystemTimeEx" descr="_GUICtrlDTP_GetSystemTimeEx( $hWnd )\n\iRetrieves the currently selected date and time (Requires: #include &lt;GuiDateTimePicker.au3&gt;)\i0" pattern="_GUICtrlDTP_GetSystemTimeEx( $hWnd )"/>
          <Keyword text="_GUICtrlDTP_SetFormat" descr="_GUICtrlDTP_SetFormat( $hWnd , $sFormat )\n\iSets the display based on a given format string (Requires: #include &lt;GuiDateTimePicker.au3&gt;)\i0" pattern="_GUICtrlDTP_SetFormat( $hWnd , $sFormat )"/>
          <Keyword text="_GUICtrlDTP_SetMCColor" descr="_GUICtrlDTP_SetMCColor( $hWnd , $iIndex , $iColor )\n\iSets the color for a given portion of the month calendar (Requires: #include &lt;GuiDateTimePicker.au3&gt;)\i0" pattern="_GUICtrlDTP_SetMCColor( $hWnd , $iIndex , $iColor )"/>
          <Keyword text="_GUICtrlDTP_SetMCFont" descr="_GUICtrlDTP_SetMCFont( $hWnd , $hFont , $fRedraw = True )\n\iSets the month calendar font (Requires: #include &lt;GuiDateTimePicker.au3&gt;)\i0" pattern="_GUICtrlDTP_SetMCFont( $hWnd , $hFont , $fRedraw = True )"/>
          <Keyword text="_GUICtrlDTP_SetRange" descr="_GUICtrlDTP_SetRange( $hWnd , ByRef $aRange )\n\iSets the current minimum and maximum allowable system times (Requires: #include &lt;GuiDateTimePicker.au3&gt;)\i0" pattern="_GUICtrlDTP_SetRange( $hWnd , ByRef $aRange )"/>
          <Keyword text="_GUICtrlDTP_SetRangeEx" descr="_GUICtrlDTP_SetRangeEx( $hWnd , ByRef $tRange )\n\iSets the current minimum and maximum allowable system times (Requires: #include &lt;GuiDateTimePicker.au3&gt;)\i0" pattern="_GUICtrlDTP_SetRangeEx( $hWnd , ByRef $tRange )"/>
          <Keyword text="_GUICtrlDTP_SetSystemTime" descr="_GUICtrlDTP_SetSystemTime( $hWnd , ByRef $aDate )\n\iSets the currently selected date and time (Requires: #include &lt;GuiDateTimePicker.au3&gt;)\i0" pattern="_GUICtrlDTP_SetSystemTime( $hWnd , ByRef $aDate )"/>
          <Keyword text="_GUICtrlDTP_SetSystemTimeEx" descr="_GUICtrlDTP_SetSystemTimeEx( $hWnd , ByRef $tDate , $fFlag = False )\n\iSets the currently selected date and time (Requires: #include &lt;GuiDateTimePicker.au3&gt;)\i0" pattern="_GUICtrlDTP_SetSystemTimeEx( $hWnd , ByRef $tDate , $fFlag = False )"/>
          <Keyword text="_GUICtrlEdit_AppendText" descr="_GUICtrlEdit_AppendText( $hWnd , $sText )\n\iAppend text (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_AppendText( $hWnd , $sText )"/>
          <Keyword text="_GUICtrlEdit_BeginUpdate" descr="_GUICtrlEdit_BeginUpdate( $hWnd )\n\iPrevents updating of the control until the EndUpdate function is called (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_BeginUpdate( $hWnd )"/>
          <Keyword text="_GUICtrlEdit_CanUndo" descr="_GUICtrlEdit_CanUndo( $hWnd )\n\iDetermines whether there are any actions in an edit control&apos;s undo queue (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_CanUndo( $hWnd )"/>
          <Keyword text="_GUICtrlEdit_CharFromPos" descr="_GUICtrlEdit_CharFromPos( $hWnd , $iX , $iY )\n\iRetrieve information about the character closest to a specified point in the client area (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_CharFromPos( $hWnd , $iX , $iY )"/>
          <Keyword text="_GUICtrlEdit_Create" descr="_GUICtrlEdit_Create( $hWnd , $sText , $iX , $iY , $iWidth = 150 , $iHeight = 150 , $iStyle = 0x003010C4 , $iExStyle = 0x00000200 )\n\iCreate an Edit control (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_Create( $hWnd , $sText , $iX , $iY , $iWidth = 150 , $iHeight = 150 , $iStyle = 0x003010C4 , $iExStyle = 0x00000200 )"/>
          <Keyword text="_GUICtrlEdit_Destroy" descr="_GUICtrlEdit_Destroy( ByRef $hWnd )\n\iDelete the Edit control (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_Destroy( ByRef $hWnd )"/>
          <Keyword text="_GUICtrlEdit_EmptyUndoBuffer" descr="_GUICtrlEdit_EmptyUndoBuffer( $hWnd )\n\iResets the undo flag of an edit control (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_EmptyUndoBuffer( $hWnd )"/>
          <Keyword text="_GUICtrlEdit_EndUpdate" descr="_GUICtrlEdit_EndUpdate( $hWnd )\n\iEnables screen repainting that was turned off with the BeginUpdate function (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_EndUpdate( $hWnd )"/>
          <Keyword text="_GUICtrlEdit_Find" descr="_GUICtrlEdit_Find( $hWnd , $fReplace = False )\n\iInitiates a find dialog (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_Find( $hWnd , $fReplace = False )"/>
          <Keyword text="_GUICtrlEdit_FmtLines" descr="_GUICtrlEdit_FmtLines( $hWnd , $fSoftBreak = False )\n\iDetermines whether an edit control includes soft line-break characters (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_FmtLines( $hWnd , $fSoftBreak = False )"/>
          <Keyword text="_GUICtrlEdit_GetFirstVisibleLine" descr="_GUICtrlEdit_GetFirstVisibleLine( $hWnd )\n\iRetrieves the zero-based index of the uppermost visible line in a multiline edit control (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_GetFirstVisibleLine( $hWnd )"/>
          <Keyword text="_GUICtrlEdit_GetLimitText" descr="_GUICtrlEdit_GetLimitText( $hWnd )\n\iGets the current text limit for an edit control (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_GetLimitText( $hWnd )"/>
          <Keyword text="_GUICtrlEdit_GetLine" descr="_GUICtrlEdit_GetLine( $hWnd , $iLine )\n\iRetrieves a line of text from an edit control (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_GetLine( $hWnd , $iLine )"/>
          <Keyword text="_GUICtrlEdit_GetLineCount" descr="_GUICtrlEdit_GetLineCount( $hWnd )\n\iRetrieves the number of lines (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_GetLineCount( $hWnd )"/>
          <Keyword text="_GUICtrlEdit_GetMargins" descr="_GUICtrlEdit_GetMargins( $hWnd )\n\iRetrieves the widths of the left and right margins (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_GetMargins( $hWnd )"/>
          <Keyword text="_GUICtrlEdit_GetModify" descr="_GUICtrlEdit_GetModify( $hWnd )\n\iRetrieves the state of an edit control&apos;s modification flag (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_GetModify( $hWnd )"/>
          <Keyword text="_GUICtrlEdit_GetPasswordChar" descr="_GUICtrlEdit_GetPasswordChar( $hWnd )\n\iGets the password character that an edit control displays when the user enters text (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_GetPasswordChar( $hWnd )"/>
          <Keyword text="_GUICtrlEdit_GetRECT" descr="_GUICtrlEdit_GetRECT( $hWnd )\n\iRetrieves the formatting rectangle of an edit control (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_GetRECT( $hWnd )"/>
          <Keyword text="_GUICtrlEdit_GetRECTEx" descr="_GUICtrlEdit_GetRECTEx( $hWnd )\n\iRetrieves the formatting rectangle of an edit control (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_GetRECTEx( $hWnd )"/>
          <Keyword text="_GUICtrlEdit_GetSel" descr="_GUICtrlEdit_GetSel( $hWnd )\n\iRetrieves the starting and ending character positions of the current selection (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_GetSel( $hWnd )"/>
          <Keyword text="_GUICtrlEdit_GetText" descr="_GUICtrlEdit_GetText( $hWnd )\n\iGet the text from the edit control (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_GetText( $hWnd )"/>
          <Keyword text="_GUICtrlEdit_GetTextLen" descr="_GUICtrlEdit_GetTextLen( $hWnd )\n\iGet the length of all the text from the edit control (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_GetTextLen( $hWnd )"/>
          <Keyword text="_GUICtrlEdit_HideBalloonTip" descr="_GUICtrlEdit_HideBalloonTip( $hWnd )\n\iHides any balloon tip associated with an edit control (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_HideBalloonTip( $hWnd )"/>
          <Keyword text="_GUICtrlEdit_InsertText" descr="_GUICtrlEdit_InsertText( $hWnd , $sText , $iIndex = -1 )\n\iInsert text (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_InsertText( $hWnd , $sText , $iIndex = -1 )"/>
          <Keyword text="_GUICtrlEdit_LineFromChar" descr="_GUICtrlEdit_LineFromChar( $hWnd , $iIndex = -1 )\n\iRetrieves the index of the line that contains the specified character index (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_LineFromChar( $hWnd , $iIndex = -1 )"/>
          <Keyword text="_GUICtrlEdit_LineIndex" descr="_GUICtrlEdit_LineIndex( $hWnd , $iIndex = 0 )\n\iRetrieves the character index of the first character of a specified line (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_LineIndex( $hWnd , $iIndex = 0 )"/>
          <Keyword text="_GUICtrlEdit_LineLength" descr="_GUICtrlEdit_LineLength( $hWnd , $iIndex = -1 )\n\iRetrieves the length, in characters, of a line (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_LineLength( $hWnd , $iIndex = -1 )"/>
          <Keyword text="_GUICtrlEdit_LineScroll" descr="_GUICtrlEdit_LineScroll( $hWnd , $iHoriz , $iVert )\n\iScrolls the text (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_LineScroll( $hWnd , $iHoriz , $iVert )"/>
          <Keyword text="_GUICtrlEdit_PosFromChar" descr="_GUICtrlEdit_PosFromChar( $hWnd , $iIndex )\n\iRetrieves the client area coordinates of a specified character in an edit control (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_PosFromChar( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlEdit_ReplaceSel" descr="_GUICtrlEdit_ReplaceSel( $hWnd , $sText , $fUndo = True )\n\iReplaces the current selection (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_ReplaceSel( $hWnd , $sText , $fUndo = True )"/>
          <Keyword text="_GUICtrlEdit_Scroll" descr="_GUICtrlEdit_Scroll( $hWnd , $iDirection )\n\iScrolls the text vertically (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_Scroll( $hWnd , $iDirection )"/>
          <Keyword text="_GUICtrlEdit_SetLimitText" descr="_GUICtrlEdit_SetLimitText( $hWnd , $iLimit )\n\iSets the text limit (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_SetLimitText( $hWnd , $iLimit )"/>
          <Keyword text="_GUICtrlEdit_SetMargins" descr="_GUICtrlEdit_SetMargins( $hWnd , $iMargin = 0x1 , $iLeft = 0xFFFF , $iRight = 0xFFFF )\n\iSets the widths of the left and right margins (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_SetMargins( $hWnd , $iMargin = 0x1 , $iLeft = 0xFFFF , $iRight = 0xFFFF )"/>
          <Keyword text="_GUICtrlEdit_SetModify" descr="_GUICtrlEdit_SetModify( $hWnd , $fModified )\n\iSets or clears the modification flag (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_SetModify( $hWnd , $fModified )"/>
          <Keyword text="_GUICtrlEdit_SetPasswordChar" descr="_GUICtrlEdit_SetPasswordChar( $hWnd , $cDisplayChar = &quot;0&quot; )\n\iSets or removes the password character for an edit control (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_SetPasswordChar( $hWnd , $cDisplayChar = &quot;0&quot; )"/>
          <Keyword text="_GUICtrlEdit_SetRECT" descr="_GUICtrlEdit_SetRECT( $hWnd , $aRect )\n\iSets the formatting rectangle of a multiline edit control (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_SetRECT( $hWnd , $aRect )"/>
          <Keyword text="_GUICtrlEdit_SetRECTEx" descr="_GUICtrlEdit_SetRECTEx( $hWnd , $tRect )\n\iSets the formatting rectangle of a multiline edit control (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_SetRECTEx( $hWnd , $tRect )"/>
          <Keyword text="_GUICtrlEdit_SetRECTNP" descr="_GUICtrlEdit_SetRECTNP( $hWnd , $aRect )\n\iSets the formatting rectangle of a multiline edit control (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_SetRECTNP( $hWnd , $aRect )"/>
          <Keyword text="_GUICtrlEdit_SetReadOnly" descr="_GUICtrlEdit_SetReadOnly( $hWnd , $fReadOnly )\n\iSets or removes the read-only style ($ES_READONLY) (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_SetReadOnly( $hWnd , $fReadOnly )"/>
          <Keyword text="_GUICtrlEdit_SetRectNPEx" descr="_GUICtrlEdit_SetRectNPEx( $hWnd , $tRect )\n\iSets the formatting rectangle of a multiline edit control (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_SetRectNPEx( $hWnd , $tRect )"/>
          <Keyword text="_GUICtrlEdit_SetSel" descr="_GUICtrlEdit_SetSel( $hWnd , $iStart , $iEnd )\n\iSelects a range of characters (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_SetSel( $hWnd , $iStart , $iEnd )"/>
          <Keyword text="_GUICtrlEdit_SetTabStops" descr="_GUICtrlEdit_SetTabStops( $hWnd , $aTabStops )\n\iSets the tab stops (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_SetTabStops( $hWnd , $aTabStops )"/>
          <Keyword text="_GUICtrlEdit_SetText" descr="_GUICtrlEdit_SetText( $hWnd , $sText )\n\iSet the text (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_SetText( $hWnd , $sText )"/>
          <Keyword text="_GUICtrlEdit_ShowBalloonTip" descr="_GUICtrlEdit_ShowBalloonTip( $hWnd , $sTitle , $sText , $iIcon )\n\iDisplays a balloon tip associated with an edit control (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_ShowBalloonTip( $hWnd , $sTitle , $sText , $iIcon )"/>
          <Keyword text="_GUICtrlEdit_Undo" descr="_GUICtrlEdit_Undo( $hWnd )\n\iUndoes the last edit control operation in the control&apos;s undo queue (Requires: #include &lt;GuiEdit.au3&gt;)\i0" pattern="_GUICtrlEdit_Undo( $hWnd )"/>
          <Keyword text="_GUICtrlHeader_AddItem" descr="_GUICtrlHeader_AddItem( $hWnd , $sText , $iWidth = 50 , $iAlign = 0 , $iImage = -1 , $fOnRight = False )\n\iAdds a new header item (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_AddItem( $hWnd , $sText , $iWidth = 50 , $iAlign = 0 , $iImage = -1 , $fOnRight = False )"/>
          <Keyword text="_GUICtrlHeader_ClearFilter" descr="_GUICtrlHeader_ClearFilter( $hWnd , $iIndex )\n\iClears the filter (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_ClearFilter( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlHeader_ClearFilterAll" descr="_GUICtrlHeader_ClearFilterAll( $hWnd )\n\iClears all of the filters (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_ClearFilterAll( $hWnd )"/>
          <Keyword text="_GUICtrlHeader_Create" descr="_GUICtrlHeader_Create( $hWnd , $iStyle = 0x00000046 )\n\iCreates a Header control (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_Create( $hWnd , $iStyle = 0x00000046 )"/>
          <Keyword text="_GUICtrlHeader_CreateDragImage" descr="_GUICtrlHeader_CreateDragImage( $hWnd , $iIndex )\n\iCreates a semi-transparent version of an item&apos;s image for use as a dragging image (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_CreateDragImage( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlHeader_DeleteItem" descr="_GUICtrlHeader_DeleteItem( $hWnd , $iIndex )\n\iDeletes a header item (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_DeleteItem( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlHeader_Destroy" descr="_GUICtrlHeader_Destroy( ByRef $hWnd )\n\iDelete the Header control (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_Destroy( ByRef $hWnd )"/>
          <Keyword text="_GUICtrlHeader_EditFilter" descr="_GUICtrlHeader_EditFilter( $hWnd , $iIndex , $fDiscard = True )\n\iStarts editing the specified filter (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_EditFilter( $hWnd , $iIndex , $fDiscard = True )"/>
          <Keyword text="_GUICtrlHeader_GetBitmapMargin" descr="_GUICtrlHeader_GetBitmapMargin( $hWnd )\n\iRetrieves the width of the bitmap margin (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_GetBitmapMargin( $hWnd )"/>
          <Keyword text="_GUICtrlHeader_GetImageList" descr="_GUICtrlHeader_GetImageList( $hWnd )\n\iRetrieves the handle to the image list (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_GetImageList( $hWnd )"/>
          <Keyword text="_GUICtrlHeader_GetItem" descr="_GUICtrlHeader_GetItem( $hWnd , $iIndex , ByRef $tItem )\n\iRetrieves information about an item (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_GetItem( $hWnd , $iIndex , ByRef $tItem )"/>
          <Keyword text="_GUICtrlHeader_GetItemAlign" descr="_GUICtrlHeader_GetItemAlign( $hWnd , $iIndex )\n\iRetrieves the item text alignment (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_GetItemAlign( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlHeader_GetItemBitmap" descr="_GUICtrlHeader_GetItemBitmap( $hWnd , $iIndex )\n\iRetrieves the item bitmap handle (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_GetItemBitmap( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlHeader_GetItemCount" descr="_GUICtrlHeader_GetItemCount( $hWnd )\n\iRetrieves a count of the items (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_GetItemCount( $hWnd )"/>
          <Keyword text="_GUICtrlHeader_GetItemDisplay" descr="_GUICtrlHeader_GetItemDisplay( $hWnd , $iIndex )\n\iReturns the item display information (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_GetItemDisplay( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlHeader_GetItemFlags" descr="_GUICtrlHeader_GetItemFlags( $hWnd , $iIndex )\n\iReturns the item flag information (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_GetItemFlags( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlHeader_GetItemFormat" descr="_GUICtrlHeader_GetItemFormat( $hWnd , $iIndex )\n\iReturns the format of the item (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_GetItemFormat( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlHeader_GetItemImage" descr="_GUICtrlHeader_GetItemImage( $hWnd , $iIndex )\n\iRetrieves the index of an image within the image list (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_GetItemImage( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlHeader_GetItemOrder" descr="_GUICtrlHeader_GetItemOrder( $hWnd , $iIndex )\n\iRetrieves the order in which the item appears (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_GetItemOrder( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlHeader_GetItemParam" descr="_GUICtrlHeader_GetItemParam( $hWnd , $iIndex )\n\iRetrieves the param value of the item (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_GetItemParam( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlHeader_GetItemRect" descr="_GUICtrlHeader_GetItemRect( $hWnd , $iIndex )\n\iRetrieves the bounding rectangle for a given item (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_GetItemRect( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlHeader_GetItemRectEx" descr="_GUICtrlHeader_GetItemRectEx( $hWnd , $iIndex )\n\iRetrieves the bounding rectangle for a given item (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_GetItemRectEx( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlHeader_GetItemText" descr="_GUICtrlHeader_GetItemText( $hWnd , $iIndex )\n\iRetrieves the item text (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_GetItemText( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlHeader_GetItemWidth" descr="_GUICtrlHeader_GetItemWidth( $hWnd , $iIndex )\n\iRetrieves the item&apos;s width (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_GetItemWidth( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlHeader_GetOrderArray" descr="_GUICtrlHeader_GetOrderArray( $hWnd )\n\iRetrieves the current left-to-right order of items in a header control (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_GetOrderArray( $hWnd )"/>
          <Keyword text="_GUICtrlHeader_GetUnicodeFormat" descr="_GUICtrlHeader_GetUnicodeFormat( $hWnd )\n\iRetrieves the Unicode character format flag for the control (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_GetUnicodeFormat( $hWnd )"/>
          <Keyword text="_GUICtrlHeader_HitTest" descr="_GUICtrlHeader_HitTest( $hWnd , $iX , $iY )\n\iTests a point to determine which item is at the specified point (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_HitTest( $hWnd , $iX , $iY )"/>
          <Keyword text="_GUICtrlHeader_InsertItem" descr="_GUICtrlHeader_InsertItem( $hWnd , $iIndex , $sText , $iWidth = 50 , $iAlign = 0 , $iImage = -1 , $fOnRight = False )\n\iInserts a new header item (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_InsertItem( $hWnd , $iIndex , $sText , $iWidth = 50 , $iAlign = 0 , $iImage = -1 , $fOnRight = False )"/>
          <Keyword text="_GUICtrlHeader_Layout" descr="_GUICtrlHeader_Layout( $hWnd , ByRef $tRect )\n\iRetrieves the correct size and position of the control (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_Layout( $hWnd , ByRef $tRect )"/>
          <Keyword text="_GUICtrlHeader_OrderToIndex" descr="_GUICtrlHeader_OrderToIndex( $hWnd , $iOrder )\n\iRetrieves an index value for an item based on its order (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_OrderToIndex( $hWnd , $iOrder )"/>
          <Keyword text="_GUICtrlHeader_SetBitmapMargin" descr="_GUICtrlHeader_SetBitmapMargin( $hWnd , $iWidth )\n\iSets the width of the margin, specified in pixels, of a bitmap (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_SetBitmapMargin( $hWnd , $iWidth )"/>
          <Keyword text="_GUICtrlHeader_SetFilterChangeTimeout" descr="_GUICtrlHeader_SetFilterChangeTimeout( $hWnd , $iTimeOut )\n\iSets the filter change timeout interval (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_SetFilterChangeTimeout( $hWnd , $iTimeOut )"/>
          <Keyword text="_GUICtrlHeader_SetHotDivider" descr="_GUICtrlHeader_SetHotDivider( $hWnd , $iFlag , $iInputValue )\n\iChanges the hot divider color (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_SetHotDivider( $hWnd , $iFlag , $iInputValue )"/>
          <Keyword text="_GUICtrlHeader_SetImageList" descr="_GUICtrlHeader_SetImageList( $hWnd , $hImage )\n\iAssigns an image list (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_SetImageList( $hWnd , $hImage )"/>
          <Keyword text="_GUICtrlHeader_SetItem" descr="_GUICtrlHeader_SetItem( $hWnd , $iIndex , ByRef $tItem )\n\iSets information about an item (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_SetItem( $hWnd , $iIndex , ByRef $tItem )"/>
          <Keyword text="_GUICtrlHeader_SetItemAlign" descr="_GUICtrlHeader_SetItemAlign( $hWnd , $iIndex , $iAlign )\n\iSets the item text alignment (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_SetItemAlign( $hWnd , $iIndex , $iAlign )"/>
          <Keyword text="_GUICtrlHeader_SetItemBitmap" descr="_GUICtrlHeader_SetItemBitmap( $hWnd , $iIndex , $hBmp )\n\iSets the item bitmap handle (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_SetItemBitmap( $hWnd , $iIndex , $hBmp )"/>
          <Keyword text="_GUICtrlHeader_SetItemDisplay" descr="_GUICtrlHeader_SetItemDisplay( $hWnd , $iIndex , $iDisplay )\n\iReturns the item display information (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_SetItemDisplay( $hWnd , $iIndex , $iDisplay )"/>
          <Keyword text="_GUICtrlHeader_SetItemFlags" descr="_GUICtrlHeader_SetItemFlags( $hWnd , $iIndex , $iFlags )\n\iReturns the item flag information (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_SetItemFlags( $hWnd , $iIndex , $iFlags )"/>
          <Keyword text="_GUICtrlHeader_SetItemFormat" descr="_GUICtrlHeader_SetItemFormat( $hWnd , $iIndex , $iFormat )\n\iSets the format of the item (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_SetItemFormat( $hWnd , $iIndex , $iFormat )"/>
          <Keyword text="_GUICtrlHeader_SetItemImage" descr="_GUICtrlHeader_SetItemImage( $hWnd , $iIndex , $iImage )\n\iSets the index of an image within the image list (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_SetItemImage( $hWnd , $iIndex , $iImage )"/>
          <Keyword text="_GUICtrlHeader_SetItemOrder" descr="_GUICtrlHeader_SetItemOrder( $hWnd , $iIndex , $iOrder )\n\iSets the order in which the item appears (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_SetItemOrder( $hWnd , $iIndex , $iOrder )"/>
          <Keyword text="_GUICtrlHeader_SetItemParam" descr="_GUICtrlHeader_SetItemParam( $hWnd , $iIndex , $iParam )\n\iSets the param value of the item (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_SetItemParam( $hWnd , $iIndex , $iParam )"/>
          <Keyword text="_GUICtrlHeader_SetItemText" descr="_GUICtrlHeader_SetItemText( $hWnd , $iIndex , $sText )\n\iSets the item text (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_SetItemText( $hWnd , $iIndex , $sText )"/>
          <Keyword text="_GUICtrlHeader_SetItemWidth" descr="_GUICtrlHeader_SetItemWidth( $hWnd , $iIndex , $iWidth )\n\iSets the item&apos;s width (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_SetItemWidth( $hWnd , $iIndex , $iWidth )"/>
          <Keyword text="_GUICtrlHeader_SetOrderArray" descr="_GUICtrlHeader_SetOrderArray( $hWnd , ByRef $aOrder )\n\iSets the current left-to-right order of items (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_SetOrderArray( $hWnd , ByRef $aOrder )"/>
          <Keyword text="_GUICtrlHeader_SetUnicodeFormat" descr="_GUICtrlHeader_SetUnicodeFormat( $hWnd , $fUnicode )\n\iSets the Unicode character format flag for the control (Requires: #include &lt;GuiHeader.au3&gt;)\i0" pattern="_GUICtrlHeader_SetUnicodeFormat( $hWnd , $fUnicode )"/>
          <Keyword text="_GUICtrlIpAddress_ClearAddress" descr="_GUICtrlIpAddress_ClearAddress( $hWnd )\n\iClears the contents of the IP address control (Requires: #include &lt;GuiIPAddress.au3&gt;)\i0" pattern="_GUICtrlIpAddress_ClearAddress( $hWnd )"/>
          <Keyword text="_GUICtrlIpAddress_Create" descr="_GUICtrlIpAddress_Create( $hWnd , $iX , $iY , $iWidth = 125 , $iHeight = 25 , $iStyles = 0x00000000 , $iExstyles = 0x00000000 )\n\iCreate a GUI IP Address Control (Requires: #include &lt;GuiIPAddress.au3&gt;)\i0" pattern="_GUICtrlIpAddress_Create( $hWnd , $iX , $iY , $iWidth = 125 , $iHeight = 25 , $iStyles = 0x00000000 , $iExstyles = 0x00000000 )"/>
          <Keyword text="_GUICtrlIpAddress_Destroy" descr="_GUICtrlIpAddress_Destroy( ByRef $hWnd )\n\iDelete the control (Requires: #include &lt;GuiIPAddress.au3&gt;)\i0" pattern="_GUICtrlIpAddress_Destroy( ByRef $hWnd )"/>
          <Keyword text="_GUICtrlIpAddress_Get" descr="_GUICtrlIpAddress_Get( $hWnd )\n\iRetrieves the address from the IP address control (Requires: #include &lt;GuiIPAddress.au3&gt;)\i0" pattern="_GUICtrlIpAddress_Get( $hWnd )"/>
          <Keyword text="_GUICtrlIpAddress_GetArray" descr="_GUICtrlIpAddress_GetArray( $hWnd )\n\iRetrieves the address from the IP address control (Requires: #include &lt;GuiIPAddress.au3&gt;)\i0" pattern="_GUICtrlIpAddress_GetArray( $hWnd )"/>
          <Keyword text="_GUICtrlIpAddress_GetEx" descr="_GUICtrlIpAddress_GetEx( $hWnd )\n\iRetrieves the address from the IP address control (Requires: #include &lt;GuiIPAddress.au3&gt;)\i0" pattern="_GUICtrlIpAddress_GetEx( $hWnd )"/>
          <Keyword text="_GUICtrlIpAddress_IsBlank" descr="_GUICtrlIpAddress_IsBlank( $hWnd )\n\iDetermines if all fields in the IP address control are blank (Requires: #include &lt;GuiIPAddress.au3&gt;)\i0" pattern="_GUICtrlIpAddress_IsBlank( $hWnd )"/>
          <Keyword text="_GUICtrlIpAddress_Set" descr="_GUICtrlIpAddress_Set( $hWnd , $sAddress )\n\iSets the address in the IP address control (Requires: #include &lt;GuiIPAddress.au3&gt;)\i0" pattern="_GUICtrlIpAddress_Set( $hWnd , $sAddress )"/>
          <Keyword text="_GUICtrlIpAddress_SetArray" descr="_GUICtrlIpAddress_SetArray( $hWnd , $aAddress )\n\iSets the address in the IP address control (Requires: #include &lt;GuiIPAddress.au3&gt;)\i0" pattern="_GUICtrlIpAddress_SetArray( $hWnd , $aAddress )"/>
          <Keyword text="_GUICtrlIpAddress_SetEx" descr="_GUICtrlIpAddress_SetEx( $hWnd , $tIP )\n\iSets the address in the IP address control (Requires: #include &lt;GuiIPAddress.au3&gt;)\i0" pattern="_GUICtrlIpAddress_SetEx( $hWnd , $tIP )"/>
          <Keyword text="_GUICtrlIpAddress_SetFocus" descr="_GUICtrlIpAddress_SetFocus( $hWnd , $iIndex )\n\iSets the keyboard focus to the specified field in the IP address control (Requires: #include &lt;GuiIPAddress.au3&gt;)\i0" pattern="_GUICtrlIpAddress_SetFocus( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlIpAddress_SetFont" descr="_GUICtrlIpAddress_SetFont( $hWnd , $sFaceName = &quot;Arial&quot; , $iFontSize = 12 , $iFontWeight = 400 , $fFontItalic = False )\n\iSet font of the control (Requires: #include &lt;GuiIPAddress.au3&gt;)\i0" pattern="_GUICtrlIpAddress_SetFont( $hWnd , $sFaceName = &quot;Arial&quot; , $iFontSize = 12 , $iFontWeight = 400 , $fFontItalic = False )"/>
          <Keyword text="_GUICtrlIpAddress_SetRange" descr="_GUICtrlIpAddress_SetRange( $hWnd , $iIndex , $iLowRange = 0 , $iHighRange = 255 )\n\iSets the valid range for the specified field in the IP address control (Requires: #include &lt;GuiIPAddress.au3&gt;)\i0" pattern="_GUICtrlIpAddress_SetRange( $hWnd , $iIndex , $iLowRange = 0 , $iHighRange = 255 )"/>
          <Keyword text="_GUICtrlIpAddress_ShowHide" descr="_GUICtrlIpAddress_ShowHide( $hWnd , $iState )\n\iShows/Hides the IP address control (Requires: #include &lt;GuiIPAddress.au3&gt;)\i0" pattern="_GUICtrlIpAddress_ShowHide( $hWnd , $iState )"/>
          <Keyword text="_GUICtrlListBox_AddFile" descr="_GUICtrlListBox_AddFile( $hWnd , $sFile )\n\iAdds the specified filename that contains a directory listing (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_AddFile( $hWnd , $sFile )"/>
          <Keyword text="_GUICtrlListBox_AddString" descr="_GUICtrlListBox_AddString( $hWnd , $sText )\n\iAdd a string (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_AddString( $hWnd , $sText )"/>
          <Keyword text="_GUICtrlListBox_BeginUpdate" descr="_GUICtrlListBox_BeginUpdate( $hWnd )\n\iPrevents updating of the control until the EndUpdate function is called (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_BeginUpdate( $hWnd )"/>
          <Keyword text="_GUICtrlListBox_ClickItem" descr="_GUICtrlListBox_ClickItem( $hWnd , $iIndex , $sButton = &quot;left&quot; , $fMove = False , $iClicks = 1 , $iSpeed = 0 )\n\iClicks an item (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_ClickItem( $hWnd , $iIndex , $sButton = &quot;left&quot; , $fMove = False , $iClicks = 1 , $iSpeed = 0 )"/>
          <Keyword text="_GUICtrlListBox_Create" descr="_GUICtrlListBox_Create( $hWnd , $sText , $iX , $iY , $iWidth = 100 , $iHeight = 200 , $iStyle = 0x00B00002 , $iExStyle = 0x00000200 )\n\iCreate a Listbox control (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_Create( $hWnd , $sText , $iX , $iY , $iWidth = 100 , $iHeight = 200 , $iStyle = 0x00B00002 , $iExStyle = 0x00000200 )"/>
          <Keyword text="_GUICtrlListBox_DeleteString" descr="_GUICtrlListBox_DeleteString( $hWnd , $iIndex )\n\iDelete a string (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_DeleteString( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListBox_Destroy" descr="_GUICtrlListBox_Destroy( ByRef $hWnd )\n\iDelete the control (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_Destroy( ByRef $hWnd )"/>
          <Keyword text="_GUICtrlListBox_Dir" descr="_GUICtrlListBox_Dir( $hWnd , $sFile , $iAttributes = 0 , $fBrackets = True )\n\iAdds the names of directories and files (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_Dir( $hWnd , $sFile , $iAttributes = 0 , $fBrackets = True )"/>
          <Keyword text="_GUICtrlListBox_EndUpdate" descr="_GUICtrlListBox_EndUpdate( $hWnd )\n\iEnables screen repainting that was turned off with the BeginUpdate function (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_EndUpdate( $hWnd )"/>
          <Keyword text="_GUICtrlListBox_FindInText" descr="_GUICtrlListBox_FindInText( $hWnd , $sText , $iStart = -1 , $fWrapOK = True )\n\iSearches for an item that contains the specified text anywhere in its text (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_FindInText( $hWnd , $sText , $iStart = -1 , $fWrapOK = True )"/>
          <Keyword text="_GUICtrlListBox_FindString" descr="_GUICtrlListBox_FindString( $hWnd , $sText , $fExact = False )\n\iSearch for a string (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_FindString( $hWnd , $sText , $fExact = False )"/>
          <Keyword text="_GUICtrlListBox_GetAnchorIndex" descr="_GUICtrlListBox_GetAnchorIndex( $hWnd )\n\iRetrieves the index of the anchor item (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_GetAnchorIndex( $hWnd )"/>
          <Keyword text="_GUICtrlListBox_GetCaretIndex" descr="_GUICtrlListBox_GetCaretIndex( $hWnd )\n\iReturn index of item that has the focus rectangle (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_GetCaretIndex( $hWnd )"/>
          <Keyword text="_GUICtrlListBox_GetCount" descr="_GUICtrlListBox_GetCount( $hWnd )\n\iRetrieves the number of items (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_GetCount( $hWnd )"/>
          <Keyword text="_GUICtrlListBox_GetCurSel" descr="_GUICtrlListBox_GetCurSel( $hWnd )\n\iRetrieve the index of the currently selected item (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_GetCurSel( $hWnd )"/>
          <Keyword text="_GUICtrlListBox_GetHorizontalExtent" descr="_GUICtrlListBox_GetHorizontalExtent( $hWnd )\n\iRetrieve from a list box the the scrollable width (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_GetHorizontalExtent( $hWnd )"/>
          <Keyword text="_GUICtrlListBox_GetItemData" descr="_GUICtrlListBox_GetItemData( $hWnd , $iIndex )\n\iRetrieves the application defined value associated with an item (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_GetItemData( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListBox_GetItemHeight" descr="_GUICtrlListBox_GetItemHeight( $hWnd )\n\iRetrieves the height of items (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_GetItemHeight( $hWnd )"/>
          <Keyword text="_GUICtrlListBox_GetItemRect" descr="_GUICtrlListBox_GetItemRect( $hWnd , $iIndex )\n\iRetrieves the rectangle that bounds an item (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_GetItemRect( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListBox_GetItemRectEx" descr="_GUICtrlListBox_GetItemRectEx( $hWnd , $iIndex )\n\iRetrieves the rectangle that bounds an item (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_GetItemRectEx( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListBox_GetListBoxInfo" descr="_GUICtrlListBox_GetListBoxInfo( $hWnd )\n\iRetrieve the number of items per column in a specified list box (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_GetListBoxInfo( $hWnd )"/>
          <Keyword text="_GUICtrlListBox_GetLocale" descr="_GUICtrlListBox_GetLocale( $hWnd )\n\iRetrieves the current locale (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_GetLocale( $hWnd )"/>
          <Keyword text="_GUICtrlListBox_GetLocaleCountry" descr="_GUICtrlListBox_GetLocaleCountry( $hWnd )\n\iRetrieves the current country code (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_GetLocaleCountry( $hWnd )"/>
          <Keyword text="_GUICtrlListBox_GetLocaleLang" descr="_GUICtrlListBox_GetLocaleLang( $hWnd )\n\iRetrieves the current language identifier (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_GetLocaleLang( $hWnd )"/>
          <Keyword text="_GUICtrlListBox_GetLocalePrimLang" descr="_GUICtrlListBox_GetLocalePrimLang( $hWnd )\n\iExtract primary language id from a language id (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_GetLocalePrimLang( $hWnd )"/>
          <Keyword text="_GUICtrlListBox_GetLocaleSubLang" descr="_GUICtrlListBox_GetLocaleSubLang( $hWnd )\n\iExtract sublanguage id from a language id (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_GetLocaleSubLang( $hWnd )"/>
          <Keyword text="_GUICtrlListBox_GetSel" descr="_GUICtrlListBox_GetSel( $hWnd , $iIndex )\n\iRetrieves the selection state of an item (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_GetSel( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListBox_GetSelCount" descr="_GUICtrlListBox_GetSelCount( $hWnd )\n\iRetrieves the total number of selected items (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_GetSelCount( $hWnd )"/>
          <Keyword text="_GUICtrlListBox_GetSelItems" descr="_GUICtrlListBox_GetSelItems( $hWnd )\n\iFills a buffer with an array of selected items (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_GetSelItems( $hWnd )"/>
          <Keyword text="_GUICtrlListBox_GetSelItemsText" descr="_GUICtrlListBox_GetSelItemsText( $hWnd )\n\iRetrieves the text of selected items (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_GetSelItemsText( $hWnd )"/>
          <Keyword text="_GUICtrlListBox_GetText" descr="_GUICtrlListBox_GetText( $hWnd , $iIndex )\n\iReturns the item (string) at the specified index (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_GetText( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListBox_GetTextLen" descr="_GUICtrlListBox_GetTextLen( $hWnd , $iIndex )\n\iGets the length of a string in a list box (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_GetTextLen( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListBox_GetTopIndex" descr="_GUICtrlListBox_GetTopIndex( $hWnd )\n\iRetrieve the index of the first visible item in a list (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_GetTopIndex( $hWnd )"/>
          <Keyword text="_GUICtrlListBox_InitStorage" descr="_GUICtrlListBox_InitStorage( $hWnd , $iItems , $iBytes )\n\iThis message allocates memory for storing items (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_InitStorage( $hWnd , $iItems , $iBytes )"/>
          <Keyword text="_GUICtrlListBox_InsertString" descr="_GUICtrlListBox_InsertString( $hWnd , $sText , $iIndex = -1 )\n\iInsert a string into the list (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_InsertString( $hWnd , $sText , $iIndex = -1 )"/>
          <Keyword text="_GUICtrlListBox_ItemFromPoint" descr="_GUICtrlListBox_ItemFromPoint( $hWnd , $iX , $iY )\n\iRetrieves the zero based index of the item nearest the specified point (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_ItemFromPoint( $hWnd , $iX , $iY )"/>
          <Keyword text="_GUICtrlListBox_ReplaceString" descr="_GUICtrlListBox_ReplaceString( $hWnd , $iIndex , $sText )\n\iReplaces the text of an item (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_ReplaceString( $hWnd , $iIndex , $sText )"/>
          <Keyword text="_GUICtrlListBox_ResetContent" descr="_GUICtrlListBox_ResetContent( $hWnd )\n\iRemove all items from the list box (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_ResetContent( $hWnd )"/>
          <Keyword text="_GUICtrlListBox_SelItemRange" descr="_GUICtrlListBox_SelItemRange( $hWnd , $iFirst , $iLast , $fSelect = True )\n\iSelect one or more consecutive items in a multiple-selection list box (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_SelItemRange( $hWnd , $iFirst , $iLast , $fSelect = True )"/>
          <Keyword text="_GUICtrlListBox_SelItemRangeEx" descr="_GUICtrlListBox_SelItemRangeEx( $hWnd , $iFirst , $iLast )\n\iSelect one or more consecutive items in a multiple-selection list box (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_SelItemRangeEx( $hWnd , $iFirst , $iLast )"/>
          <Keyword text="_GUICtrlListBox_SelectString" descr="_GUICtrlListBox_SelectString( $hWnd , $sText , $iIndex = -1 )\n\iSearchs for an item that begins with the specified string (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_SelectString( $hWnd , $sText , $iIndex = -1 )"/>
          <Keyword text="_GUICtrlListBox_SetAnchorIndex" descr="_GUICtrlListBox_SetAnchorIndex( $hWnd , $iIndex )\n\iSet the anchor item-that is, the item from which a multiple selection starts (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_SetAnchorIndex( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListBox_SetCaretIndex" descr="_GUICtrlListBox_SetCaretIndex( $hWnd , $iIndex , $fPartial = False )\n\iSet the focus rectangle to the item at the specified index in a multiple-selection list box (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_SetCaretIndex( $hWnd , $iIndex , $fPartial = False )"/>
          <Keyword text="_GUICtrlListBox_SetColumnWidth" descr="_GUICtrlListBox_SetColumnWidth( $hWnd , $iWidth )\n\iSet the width, in pixels, of all columns (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_SetColumnWidth( $hWnd , $iWidth )"/>
          <Keyword text="_GUICtrlListBox_SetCurSel" descr="_GUICtrlListBox_SetCurSel( $hWnd , $iIndex )\n\iSelect a string and scroll it into view, if necessary (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_SetCurSel( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListBox_SetHorizontalExtent" descr="_GUICtrlListBox_SetHorizontalExtent( $hWnd , $iWidth )\n\iSet the width, in pixels, by which a list box can be scrolled horizontally (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_SetHorizontalExtent( $hWnd , $iWidth )"/>
          <Keyword text="_GUICtrlListBox_SetItemData" descr="_GUICtrlListBox_SetItemData( $hWnd , $iIndex , $iValue )\n\iSets the value associated with the specified item (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_SetItemData( $hWnd , $iIndex , $iValue )"/>
          <Keyword text="_GUICtrlListBox_SetItemHeight" descr="_GUICtrlListBox_SetItemHeight( $hWnd , $iHeight , $iIndex = 0 )\n\iSets the height, in pixels, of items (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_SetItemHeight( $hWnd , $iHeight , $iIndex = 0 )"/>
          <Keyword text="_GUICtrlListBox_SetLocale" descr="_GUICtrlListBox_SetLocale( $hWnd , $iLocal )\n\iSet the current locale (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_SetLocale( $hWnd , $iLocal )"/>
          <Keyword text="_GUICtrlListBox_SetSel" descr="_GUICtrlListBox_SetSel( $hWnd , $iIndex = -1 , $fSelect = -1 )\n\iSelect a string(s) in a multiple-selection list box (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_SetSel( $hWnd , $iIndex = -1 , $fSelect = -1 )"/>
          <Keyword text="_GUICtrlListBox_SetTabStops" descr="_GUICtrlListBox_SetTabStops( $hWnd , $aTabStops )\n\iSets the tab-stop positions (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_SetTabStops( $hWnd , $aTabStops )"/>
          <Keyword text="_GUICtrlListBox_SetTopIndex" descr="_GUICtrlListBox_SetTopIndex( $hWnd , $iIndex )\n\iEnsure that a particular item in a list box is visible (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_SetTopIndex( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListBox_Sort" descr="_GUICtrlListBox_Sort( $hWnd )\n\iRe-sorts list box if it has the $LBS_SORT style (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_Sort( $hWnd )"/>
          <Keyword text="_GUICtrlListBox_SwapString" descr="_GUICtrlListBox_SwapString( $hWnd , $iIndexA , $iIndexB )\n\iSwaps the text of two items at the specified indices (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_SwapString( $hWnd , $iIndexA , $iIndexB )"/>
          <Keyword text="_GUICtrlListBox_UpdateHScroll" descr="_GUICtrlListBox_UpdateHScroll( $hWnd )\n\iUpdate the horizontal scroll bar based on the longest string (Requires: #include &lt;GuiListBox.au3&gt;)\i0" pattern="_GUICtrlListBox_UpdateHScroll( $hWnd )"/>
          <Keyword text="_GUICtrlListView_AddArray" descr="_GUICtrlListView_AddArray( $hWnd , ByRef $aItems )\n\iAdds items from an array to the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_AddArray( $hWnd , ByRef $aItems )"/>
          <Keyword text="_GUICtrlListView_AddColumn" descr="_GUICtrlListView_AddColumn( $hWnd , $sText , $iWidth = 50 , $iAlign = -1 , $iImage = -1 , $fOnRight = False )\n\iAdds a new column in the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_AddColumn( $hWnd , $sText , $iWidth = 50 , $iAlign = -1 , $iImage = -1 , $fOnRight = False )"/>
          <Keyword text="_GUICtrlListView_AddItem" descr="_GUICtrlListView_AddItem( $hWnd , $sText , $iImage = -1 , $iParam = 0 )\n\iAdds a new item to the end of the list (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_AddItem( $hWnd , $sText , $iImage = -1 , $iParam = 0 )"/>
          <Keyword text="_GUICtrlListView_AddSubItem" descr="_GUICtrlListView_AddSubItem( $hWnd , $iIndex , $sText , $iSubItem , $iImage = -1 )\n\iAdds a new subitem to the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_AddSubItem( $hWnd , $iIndex , $sText , $iSubItem , $iImage = -1 )"/>
          <Keyword text="_GUICtrlListView_ApproximateViewHeight" descr="_GUICtrlListView_ApproximateViewHeight( $hWnd , $iCount = -1 , $iCX = -1 , $iCY = -1 )\n\iCalculates the approximate height required to display a given number of items (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_ApproximateViewHeight( $hWnd , $iCount = -1 , $iCX = -1 , $iCY = -1 )"/>
          <Keyword text="_GUICtrlListView_ApproximateViewRect" descr="_GUICtrlListView_ApproximateViewRect( $hWnd , $iCount = -1 , $iCX = -1 , $iCY = -1 )\n\iCalculates the approximate size required to display a given number of items (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_ApproximateViewRect( $hWnd , $iCount = -1 , $iCX = -1 , $iCY = -1 )"/>
          <Keyword text="_GUICtrlListView_ApproximateViewWidth" descr="_GUICtrlListView_ApproximateViewWidth( $hWnd , $iCount = -1 , $iCX = -1 , $iCY = -1 )\n\iCalculates the approximate width required to display a given number of items (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_ApproximateViewWidth( $hWnd , $iCount = -1 , $iCX = -1 , $iCY = -1 )"/>
          <Keyword text="_GUICtrlListView_Arrange" descr="_GUICtrlListView_Arrange( $hWnd , $iArrange = 0 )\n\iArranges items in icon view (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_Arrange( $hWnd , $iArrange = 0 )"/>
          <Keyword text="_GUICtrlListView_BeginUpdate" descr="_GUICtrlListView_BeginUpdate( $hWnd )\n\iPrevents updating of the control until the EndUpdate function is called (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_BeginUpdate( $hWnd )"/>
          <Keyword text="_GUICtrlListView_CancelEditLabel" descr="_GUICtrlListView_CancelEditLabel( $hWnd )\n\iCancels an item text editing operation (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_CancelEditLabel( $hWnd )"/>
          <Keyword text="_GUICtrlListView_ClickItem" descr="_GUICtrlListView_ClickItem( $hWnd , $iIndex , $sButton = &quot;left&quot; , $fMove = False , $iClicks = 1 , $iSpeed = 1 )\n\iClicks an item (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_ClickItem( $hWnd , $iIndex , $sButton = &quot;left&quot; , $fMove = False , $iClicks = 1 , $iSpeed = 1 )"/>
          <Keyword text="_GUICtrlListView_CopyItems" descr="_GUICtrlListView_CopyItems( $hWnd_Source , $hWnd_Destination , $fDelFlag = False )\n\iCopy Items between 2 list-view controls (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_CopyItems( $hWnd_Source , $hWnd_Destination , $fDelFlag = False )"/>
          <Keyword text="_GUICtrlListView_Create" descr="_GUICtrlListView_Create( $hWnd , $sHeaderText , $iX , $iY , $iWidth = 150 , $iHeight = 150 , $iStyle = 0x0000000D , $iExStyle = 0x00000000 , $fCoInit = False )\n\iCreate a ListView control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_Create( $hWnd , $sHeaderText , $iX , $iY , $iWidth = 150 , $iHeight = 150 , $iStyle = 0x0000000D , $iExStyle = 0x00000000 , $fCoInit = False )"/>
          <Keyword text="_GUICtrlListView_CreateDragImage" descr="_GUICtrlListView_CreateDragImage( $hWnd , $iIndex )\n\iCreates a drag image list for the specified item (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_CreateDragImage( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListView_CreateSolidBitMap" descr="_GUICtrlListView_CreateSolidBitMap( $hWnd , $iColor , $iWidth , $iHeight )\n\iCreates a solid color bitmap (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_CreateSolidBitMap( $hWnd , $iColor , $iWidth , $iHeight )"/>
          <Keyword text="_GUICtrlListView_DeleteAllItems" descr="_GUICtrlListView_DeleteAllItems( $hWnd )\n\iRemoves all items from a list-view control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_DeleteAllItems( $hWnd )"/>
          <Keyword text="_GUICtrlListView_DeleteColumn" descr="_GUICtrlListView_DeleteColumn( $hWnd , $iCol )\n\iRemoves a column from a list-view control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_DeleteColumn( $hWnd , $iCol )"/>
          <Keyword text="_GUICtrlListView_DeleteItem" descr="_GUICtrlListView_DeleteItem( $hWnd , $iIndex )\n\iRemoves an item from a list-view control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_DeleteItem( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListView_DeleteItemsSelected" descr="_GUICtrlListView_DeleteItemsSelected( $hWnd )\n\iDeletes item(s) selected (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_DeleteItemsSelected( $hWnd )"/>
          <Keyword text="_GUICtrlListView_Destroy" descr="_GUICtrlListView_Destroy( ByRef $hWnd )\n\iDelete the listview control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_Destroy( ByRef $hWnd )"/>
          <Keyword text="_GUICtrlListView_DrawDragImage" descr="_GUICtrlListView_DrawDragImage( ByRef $hWnd , ByRef $aDrag )\n\iDraw the Drage Image (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_DrawDragImage( ByRef $hWnd , ByRef $aDrag )"/>
          <Keyword text="_GUICtrlListView_EditLabel" descr="_GUICtrlListView_EditLabel( $hWnd , $iIndex )\n\iBegins in place editing of the specified item text (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_EditLabel( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListView_EnableGroupView" descr="_GUICtrlListView_EnableGroupView( $hWnd , $fEnable = True )\n\iEnables or disables whether the items in the control display as a group (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_EnableGroupView( $hWnd , $fEnable = True )"/>
          <Keyword text="_GUICtrlListView_EndUpdate" descr="_GUICtrlListView_EndUpdate( $hWnd )\n\iEnables screen repainting that was turned off with the BeginUpdate function (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_EndUpdate( $hWnd )"/>
          <Keyword text="_GUICtrlListView_EnsureVisible" descr="_GUICtrlListView_EnsureVisible( $hWnd , $iIndex , $fPartialOK = False )\n\iEnsures that a list-view item is either entirely or partially visible (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_EnsureVisible( $hWnd , $iIndex , $fPartialOK = False )"/>
          <Keyword text="_GUICtrlListView_FindInText" descr="_GUICtrlListView_FindInText( $hWnd , $sText , $iStart = -1 , $fWrapOK = True , $fReverse = False )\n\iSearches for an item that contains the specified text anywhere in its text (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_FindInText( $hWnd , $sText , $iStart = -1 , $fWrapOK = True , $fReverse = False )"/>
          <Keyword text="_GUICtrlListView_FindItem" descr="_GUICtrlListView_FindItem( $hWnd , $iStart , ByRef $tFindInfo , $sText = &quot;&quot; )\n\iSearches for an item with the specified characteristics (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_FindItem( $hWnd , $iStart , ByRef $tFindInfo , $sText = &quot;&quot; )"/>
          <Keyword text="_GUICtrlListView_FindNearest" descr="_GUICtrlListView_FindNearest( $hWnd , $iX , $iY , $iDir = 0 , $iStart = -1 , $fWrapOK = True )\n\iFinds the item nearest to the position specified (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_FindNearest( $hWnd , $iX , $iY , $iDir = 0 , $iStart = -1 , $fWrapOK = True )"/>
          <Keyword text="_GUICtrlListView_FindParam" descr="_GUICtrlListView_FindParam( $hWnd , $iParam , $iStart = -1 )\n\iSearches for an item with the specified lParam (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_FindParam( $hWnd , $iParam , $iStart = -1 )"/>
          <Keyword text="_GUICtrlListView_FindText" descr="_GUICtrlListView_FindText( $hWnd , $sText , $iStart = -1 , $fPartialOK = True , $fWrapOK = True )\n\iSearches for an item with the specified text (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_FindText( $hWnd , $sText , $iStart = -1 , $fPartialOK = True , $fWrapOK = True )"/>
          <Keyword text="_GUICtrlListView_GetBkColor" descr="_GUICtrlListView_GetBkColor( $hWnd )\n\iRetrieves the background color of a list-view control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetBkColor( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetBkImage" descr="_GUICtrlListView_GetBkImage( $hWnd )\n\iRetrieves the background image in the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetBkImage( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetCallbackMask" descr="_GUICtrlListView_GetCallbackMask( $hWnd )\n\iRetrieves the callback mask for the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetCallbackMask( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetColumn" descr="_GUICtrlListView_GetColumn( $hWnd , $iIndex )\n\iRetrieves the attributes of a column (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetColumn( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListView_GetColumnCount" descr="_GUICtrlListView_GetColumnCount( $hWnd )\n\iRetrieve the number of columns (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetColumnCount( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetColumnOrder" descr="_GUICtrlListView_GetColumnOrder( $hWnd )\n\iRetrieves the current left-to-right order of columns (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetColumnOrder( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetColumnOrderArray" descr="_GUICtrlListView_GetColumnOrderArray( $hWnd )\n\iRetrieves the current left-to-right order of columns in the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetColumnOrderArray( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetColumnWidth" descr="_GUICtrlListView_GetColumnWidth( $hWnd , $iCol )\n\iRetrieves the width of a column in report or list view (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetColumnWidth( $hWnd , $iCol )"/>
          <Keyword text="_GUICtrlListView_GetCounterPage" descr="_GUICtrlListView_GetCounterPage( $hWnd )\n\iCalculates the number of items that can fit vertically in the visible area (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetCounterPage( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetEditControl" descr="_GUICtrlListView_GetEditControl( $hWnd )\n\iRetrieves the handle to the edit control being used to edit an item&apos;s text (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetEditControl( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetExtendedListViewStyle" descr="_GUICtrlListView_GetExtendedListViewStyle( $hWnd )\n\iRetrieves the extended styles that are currently in use (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetExtendedListViewStyle( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetFocusedGroup" descr="_GUICtrlListView_GetFocusedGroup( $hWnd )\n\iGets the group that has the focus (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetFocusedGroup( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetGroupCount" descr="_GUICtrlListView_GetGroupCount( $hWnd )\n\iGets the number of groups (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetGroupCount( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetGroupInfo" descr="_GUICtrlListView_GetGroupInfo( $hWnd , $iGroupID )\n\iRetrieves group information (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetGroupInfo( $hWnd , $iGroupID )"/>
          <Keyword text="_GUICtrlListView_GetGroupInfoByIndex" descr="_GUICtrlListView_GetGroupInfoByIndex( $hWnd , $iIndex )\n\iRetrieves group information (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetGroupInfoByIndex( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListView_GetGroupRect" descr="_GUICtrlListView_GetGroupRect( $hWnd , $iGroupID , $iGet = $LVGGR_GROUP )\n\iGets the rectangle for a specified group (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetGroupRect( $hWnd , $iGroupID , $iGet = $LVGGR_GROUP )"/>
          <Keyword text="_GUICtrlListView_GetGroupViewEnabled" descr="_GUICtrlListView_GetGroupViewEnabled( $hWnd )\n\iChecks whether the control has group view enabled (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetGroupViewEnabled( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetHeader" descr="_GUICtrlListView_GetHeader( $hWnd )\n\iRetrieves the handle to the header control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetHeader( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetHotCursor" descr="_GUICtrlListView_GetHotCursor( $hWnd )\n\iRetrieves the HCURSOR value used when the pointer is over an item while hot tracking is enabled (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetHotCursor( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetHotItem" descr="_GUICtrlListView_GetHotItem( $hWnd )\n\iRetrieves the index of the hot item (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetHotItem( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetHoverTime" descr="_GUICtrlListView_GetHoverTime( $hWnd )\n\iRetrieves the amount of time that the mouse cursor must hover over an item before it is selected (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetHoverTime( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetISearchString" descr="_GUICtrlListView_GetISearchString( $hWnd )\n\iRetrieves the incremental search string of the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetISearchString( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetImageList" descr="_GUICtrlListView_GetImageList( $hWnd , $iImageList )\n\iRetrieves the handle to an image list used for drawing listview items (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetImageList( $hWnd , $iImageList )"/>
          <Keyword text="_GUICtrlListView_GetItem" descr="_GUICtrlListView_GetItem( $hWnd , $iIndex , $iSubItem = 0 )\n\iRetrieves an item&apos;s attributes (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItem( $hWnd , $iIndex , $iSubItem = 0 )"/>
          <Keyword text="_GUICtrlListView_GetItemChecked" descr="_GUICtrlListView_GetItemChecked( $hWnd , $iIndex )\n\iReturns the check state for a list-view control item (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemChecked( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListView_GetItemCount" descr="_GUICtrlListView_GetItemCount( $hWnd )\n\iRetrieves the number of items in a list-view control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemCount( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetItemCut" descr="_GUICtrlListView_GetItemCut( $hWnd , $iIndex )\n\iDetermines whether the item is marked for a cut and paste operation (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemCut( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListView_GetItemDropHilited" descr="_GUICtrlListView_GetItemDropHilited( $hWnd , $iIndex )\n\iDetermines whether the item is highlighted as a drag-and-drop target (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemDropHilited( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListView_GetItemEx" descr="_GUICtrlListView_GetItemEx( $hWnd , ByRef $tItem )\n\iRetrieves some or all of an item&apos;s attributes (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemEx( $hWnd , ByRef $tItem )"/>
          <Keyword text="_GUICtrlListView_GetItemFocused" descr="_GUICtrlListView_GetItemFocused( $hWnd , $iIndex )\n\iDetermines whether the item is highlighted as a drag-and-drop target (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemFocused( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListView_GetItemGroupID" descr="_GUICtrlListView_GetItemGroupID( $hWnd , $iIndex )\n\iGets the item group ID (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemGroupID( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListView_GetItemImage" descr="_GUICtrlListView_GetItemImage( $hWnd , $iIndex , $iSubItem = 0 )\n\iRetrieves the index of the item&apos;s icon (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemImage( $hWnd , $iIndex , $iSubItem = 0 )"/>
          <Keyword text="_GUICtrlListView_GetItemIndent" descr="_GUICtrlListView_GetItemIndent( $hWnd , $iIndex )\n\iRetrieves the number of image widths the item is indented (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemIndent( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListView_GetItemParam" descr="_GUICtrlListView_GetItemParam( $hWnd , $iIndex )\n\iRetrieves the application specific value of the item (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemParam( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListView_GetItemPosition" descr="_GUICtrlListView_GetItemPosition( $hWnd , $iIndex )\n\iRetrieves the position of an item (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemPosition( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListView_GetItemPositionX" descr="_GUICtrlListView_GetItemPositionX( $hWnd , $iIndex )\n\iRetrieves the X position of an item (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemPositionX( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListView_GetItemPositionY" descr="_GUICtrlListView_GetItemPositionY( $hWnd , $iIndex )\n\iRetrieves the Y position of an item (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemPositionY( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListView_GetItemRect" descr="_GUICtrlListView_GetItemRect( $hWnd , $iIndex , $iPart = 3 )\n\iRetrieves the bounding rectangle for all or part of an item (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemRect( $hWnd , $iIndex , $iPart = 3 )"/>
          <Keyword text="_GUICtrlListView_GetItemRectEx" descr="_GUICtrlListView_GetItemRectEx( $hWnd , $iIndex , $iPart = 3 )\n\iRetrieves the bounding rectangle for all or part of an item (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemRectEx( $hWnd , $iIndex , $iPart = 3 )"/>
          <Keyword text="_GUICtrlListView_GetItemSelected" descr="_GUICtrlListView_GetItemSelected( $hWnd , $iIndex )\n\iDetermines whether the item is selected (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemSelected( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListView_GetItemSpacing" descr="_GUICtrlListView_GetItemSpacing( $hWnd , $fSmall = False )\n\iDetermines the spacing between items in the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemSpacing( $hWnd , $fSmall = False )"/>
          <Keyword text="_GUICtrlListView_GetItemSpacingX" descr="_GUICtrlListView_GetItemSpacingX( $hWnd , $fSmall = False )\n\iDetermines the horizontal spacing between items in the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemSpacingX( $hWnd , $fSmall = False )"/>
          <Keyword text="_GUICtrlListView_GetItemSpacingY" descr="_GUICtrlListView_GetItemSpacingY( $hWnd , $fSmall = False )\n\iDetermines the vertical spacing between items in the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemSpacingY( $hWnd , $fSmall = False )"/>
          <Keyword text="_GUICtrlListView_GetItemState" descr="_GUICtrlListView_GetItemState( $hWnd , $iIndex , $iMask )\n\iRetrieves the state of a listview item (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemState( $hWnd , $iIndex , $iMask )"/>
          <Keyword text="_GUICtrlListView_GetItemStateImage" descr="_GUICtrlListView_GetItemStateImage( $hWnd , $iIndex )\n\iGets the state image that is displayed (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemStateImage( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListView_GetItemText" descr="_GUICtrlListView_GetItemText( $hWnd , $iIndex , $iSubItem = 0 )\n\iRetrieves the text of an item or subitem (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemText( $hWnd , $iIndex , $iSubItem = 0 )"/>
          <Keyword text="_GUICtrlListView_GetItemTextArray" descr="_GUICtrlListView_GetItemTextArray( $hWnd , $iItem = -1 )\n\iRetrieves all of a list-view item (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemTextArray( $hWnd , $iItem = -1 )"/>
          <Keyword text="_GUICtrlListView_GetItemTextString" descr="_GUICtrlListView_GetItemTextString( $hWnd , $iItem = -1 )\n\iRetrieves all of a list-view item (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetItemTextString( $hWnd , $iItem = -1 )"/>
          <Keyword text="_GUICtrlListView_GetNextItem" descr="_GUICtrlListView_GetNextItem( $hWnd , $iStart = -1 , $iSearch = 0 , $iState = 8 )\n\iSearches for an item that has the specified properties (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetNextItem( $hWnd , $iStart = -1 , $iSearch = 0 , $iState = 8 )"/>
          <Keyword text="_GUICtrlListView_GetNumberOfWorkAreas" descr="_GUICtrlListView_GetNumberOfWorkAreas( $hWnd )\n\iRetrieves the number of working areas in the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetNumberOfWorkAreas( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetOrigin" descr="_GUICtrlListView_GetOrigin( $hWnd )\n\iRetrieves the current view origin for the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetOrigin( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetOriginX" descr="_GUICtrlListView_GetOriginX( $hWnd )\n\iRetrieves the current horizontal view origin for the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetOriginX( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetOriginY" descr="_GUICtrlListView_GetOriginY( $hWnd )\n\iRetrieves the current vertical view origin for the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetOriginY( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetOutlineColor" descr="_GUICtrlListView_GetOutlineColor( $hWnd )\n\iRetrieves the color of the border of the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetOutlineColor( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetSelectedColumn" descr="_GUICtrlListView_GetSelectedColumn( $hWnd )\n\iRetrieves the index of the selected column (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetSelectedColumn( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetSelectedCount" descr="_GUICtrlListView_GetSelectedCount( $hWnd )\n\iDetermines the number of selected items (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetSelectedCount( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetSelectedIndices" descr="_GUICtrlListView_GetSelectedIndices( $hWnd , $fArray = False )\n\iRetrieve indices of selected item(s) (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetSelectedIndices( $hWnd , $fArray = False )"/>
          <Keyword text="_GUICtrlListView_GetSelectionMark" descr="_GUICtrlListView_GetSelectionMark( $hWnd )\n\iRetrieves the selection mark from the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetSelectionMark( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetStringWidth" descr="_GUICtrlListView_GetStringWidth( $hWnd , $sString )\n\iDetermines the width of a specified string (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetStringWidth( $hWnd , $sString )"/>
          <Keyword text="_GUICtrlListView_GetSubItemRect" descr="_GUICtrlListView_GetSubItemRect( $hWnd , $iIndex , $iSubItem , $iPart = 0 )\n\iRetrieves information about an item bounding rectangle (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetSubItemRect( $hWnd , $iIndex , $iSubItem , $iPart = 0 )"/>
          <Keyword text="_GUICtrlListView_GetTextBkColor" descr="_GUICtrlListView_GetTextBkColor( $hWnd )\n\iRetrieves the text background color of the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetTextBkColor( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetTextColor" descr="_GUICtrlListView_GetTextColor( $hWnd )\n\iRetrieves the text color of the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetTextColor( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetToolTips" descr="_GUICtrlListView_GetToolTips( $hWnd )\n\iRetrieves the ToolTip control handle (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetToolTips( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetTopIndex" descr="_GUICtrlListView_GetTopIndex( $hWnd )\n\iRetrieves the index of the topmost visible item when in list or report view (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetTopIndex( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetUnicodeFormat" descr="_GUICtrlListView_GetUnicodeFormat( $hWnd )\n\iRetrieves the UNICODE character format flag (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetUnicodeFormat( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetView" descr="_GUICtrlListView_GetView( $hWnd )\n\iRetrieves the current view of the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetView( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetViewDetails" descr="_GUICtrlListView_GetViewDetails( $hWnd )\n\iDetermines whether the view mode is in detail mode (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetViewDetails( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetViewLarge" descr="_GUICtrlListView_GetViewLarge( $hWnd )\n\iDetermines whether the view mode is in large icon mode (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetViewLarge( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetViewList" descr="_GUICtrlListView_GetViewList( $hWnd )\n\iDetermines whether the view mode is in list mode (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetViewList( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetViewRect" descr="_GUICtrlListView_GetViewRect( $hWnd )\n\iRetrieves the bounding rectangle of all items in the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetViewRect( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetViewSmall" descr="_GUICtrlListView_GetViewSmall( $hWnd )\n\iDetermines whether the view mode is in small icon mode (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetViewSmall( $hWnd )"/>
          <Keyword text="_GUICtrlListView_GetViewTile" descr="_GUICtrlListView_GetViewTile( $hWnd )\n\iDetermines whether the view mode is in tile mode (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_GetViewTile( $hWnd )"/>
          <Keyword text="_GUICtrlListView_HideColumn" descr="_GUICtrlListView_HideColumn( $hWnd , $iCol )\n\iHides the column &quot;sets column width to zero&quot; (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_HideColumn( $hWnd , $iCol )"/>
          <Keyword text="_GUICtrlListView_HitTest" descr="_GUICtrlListView_HitTest( $hWnd , $iX = -1 , $iY = -1 )\n\iDetermines which item is at a specified position (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_HitTest( $hWnd , $iX = -1 , $iY = -1 )"/>
          <Keyword text="_GUICtrlListView_InsertColumn" descr="_GUICtrlListView_InsertColumn( $hWnd , $iIndex , $sText , $iWidth = 50 , $iAlign = -1 , $iImage = -1 , $fOnRight = False )\n\iInserts a new column in the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_InsertColumn( $hWnd , $iIndex , $sText , $iWidth = 50 , $iAlign = -1 , $iImage = -1 , $fOnRight = False )"/>
          <Keyword text="_GUICtrlListView_InsertGroup" descr="_GUICtrlListView_InsertGroup( $hWnd , $iIndex , $iGroupID , $sHeader , $iAlign = 0 )\n\iInserts a group (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_InsertGroup( $hWnd , $iIndex , $iGroupID , $sHeader , $iAlign = 0 )"/>
          <Keyword text="_GUICtrlListView_InsertItem" descr="_GUICtrlListView_InsertItem( $hWnd , $sText , $iIndex = -1 , $iImage = -1 , $iParam = 0 )\n\iInserts a new item in the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_InsertItem( $hWnd , $sText , $iIndex = -1 , $iImage = -1 , $iParam = 0 )"/>
          <Keyword text="_GUICtrlListView_JustifyColumn" descr="_GUICtrlListView_JustifyColumn( $hWnd , $iIndex , $iAlign = -1 )\n\iSet Justification of a column for a list-view control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_JustifyColumn( $hWnd , $iIndex , $iAlign = -1 )"/>
          <Keyword text="_GUICtrlListView_MapIDToIndex" descr="_GUICtrlListView_MapIDToIndex( $hWnd , $iID )\n\iMaps the ID of an item to an index (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_MapIDToIndex( $hWnd , $iID )"/>
          <Keyword text="_GUICtrlListView_MapIndexToID" descr="_GUICtrlListView_MapIndexToID( $hWnd , $iIndex )\n\iMaps an index to an item ID (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_MapIndexToID( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListView_RedrawItems" descr="_GUICtrlListView_RedrawItems( $hWnd , $iFirst , $iLast )\n\iForces the control to redraw a range of items (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_RedrawItems( $hWnd , $iFirst , $iLast )"/>
          <Keyword text="_GUICtrlListView_RegisterSortCallBack" descr="_GUICtrlListView_RegisterSortCallBack( $hWnd , $fNumbers = True , $fArrows = True )\n\iRegister the Simple Sort callback function (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_RegisterSortCallBack( $hWnd , $fNumbers = True , $fArrows = True )"/>
          <Keyword text="_GUICtrlListView_RemoveAllGroups" descr="_GUICtrlListView_RemoveAllGroups( $hWnd )\n\iRemoves all groups from the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_RemoveAllGroups( $hWnd )"/>
          <Keyword text="_GUICtrlListView_RemoveGroup" descr="_GUICtrlListView_RemoveGroup( $hWnd , $iGroupID )\n\iRemoves a group from the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_RemoveGroup( $hWnd , $iGroupID )"/>
          <Keyword text="_GUICtrlListView_Scroll" descr="_GUICtrlListView_Scroll( $hWnd , $iDX , $iDY )\n\iScrolls the content of a list-view (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_Scroll( $hWnd , $iDX , $iDY )"/>
          <Keyword text="_GUICtrlListView_SetBkColor" descr="_GUICtrlListView_SetBkColor( $hWnd , $iColor )\n\iSets the background color of the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetBkColor( $hWnd , $iColor )"/>
          <Keyword text="_GUICtrlListView_SetBkImage" descr="_GUICtrlListView_SetBkImage( $hWnd , $sURL = &quot;&quot; , $iStyle = 0 , $iXOffset = 0 , $iYOffset = 0 )\n\iSets the background image in the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetBkImage( $hWnd , $sURL = &quot;&quot; , $iStyle = 0 , $iXOffset = 0 , $iYOffset = 0 )"/>
          <Keyword text="_GUICtrlListView_SetCallBackMask" descr="_GUICtrlListView_SetCallBackMask( $hWnd , $iMask )\n\iChanges the callback mask for the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetCallBackMask( $hWnd , $iMask )"/>
          <Keyword text="_GUICtrlListView_SetColumn" descr="_GUICtrlListView_SetColumn( $hWnd , $iIndex , $sText , $iWidth = -1 , $iAlign = -1 , $iImage = -1 , $fOnRight = False )\n\iSets the attributes of a column (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetColumn( $hWnd , $iIndex , $sText , $iWidth = -1 , $iAlign = -1 , $iImage = -1 , $fOnRight = False )"/>
          <Keyword text="_GUICtrlListView_SetColumnOrder" descr="_GUICtrlListView_SetColumnOrder( $hWnd , $sOrder )\n\iSets the left-to-right order of columns (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetColumnOrder( $hWnd , $sOrder )"/>
          <Keyword text="_GUICtrlListView_SetColumnOrderArray" descr="_GUICtrlListView_SetColumnOrderArray( $hWnd , $aOrder )\n\iSets the left-to-right order of columns in the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetColumnOrderArray( $hWnd , $aOrder )"/>
          <Keyword text="_GUICtrlListView_SetColumnWidth" descr="_GUICtrlListView_SetColumnWidth( $hWnd , $iCol , $iWidth )\n\iChanges the width of a column (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetColumnWidth( $hWnd , $iCol , $iWidth )"/>
          <Keyword text="_GUICtrlListView_SetExtendedListViewStyle" descr="_GUICtrlListView_SetExtendedListViewStyle( $hWnd , $iExStyle , $iExMask = 0 )\n\iSets extended styles (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetExtendedListViewStyle( $hWnd , $iExStyle , $iExMask = 0 )"/>
          <Keyword text="_GUICtrlListView_SetGroupInfo" descr="_GUICtrlListView_SetGroupInfo( $hWnd , $iGroupID , $sHeader , $iAlign = 0 , $iState = $LVGS_NORMAL )\n\iSets group information (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetGroupInfo( $hWnd , $iGroupID , $sHeader , $iAlign = 0 , $iState = $LVGS_NORMAL )"/>
          <Keyword text="_GUICtrlListView_SetHotItem" descr="_GUICtrlListView_SetHotItem( $hWnd , $iIndex )\n\iSets the hot item (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetHotItem( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListView_SetHoverTime" descr="_GUICtrlListView_SetHoverTime( $hWnd , $iTime )\n\iSets the amount of time which the mouse cursor must hover over an item before it is selected (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetHoverTime( $hWnd , $iTime )"/>
          <Keyword text="_GUICtrlListView_SetIconSpacing" descr="_GUICtrlListView_SetIconSpacing( $hWnd , $iCX , $iCY )\n\iSets the spacing between icons where the style is large icon (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetIconSpacing( $hWnd , $iCX , $iCY )"/>
          <Keyword text="_GUICtrlListView_SetImageList" descr="_GUICtrlListView_SetImageList( $hWnd , $hHandle , $iType = 0 )\n\iAssigns an image list to the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetImageList( $hWnd , $hHandle , $iType = 0 )"/>
          <Keyword text="_GUICtrlListView_SetItem" descr="_GUICtrlListView_SetItem( $hWnd , $sText , $iIndex = 0 , $iSubItem = 0 , $iImage = -1 , $iParam = -1 , $iIndent = -1 )\n\iSets some or all of a item&apos;s attributes (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetItem( $hWnd , $sText , $iIndex = 0 , $iSubItem = 0 , $iImage = -1 , $iParam = -1 , $iIndent = -1 )"/>
          <Keyword text="_GUICtrlListView_SetItemChecked" descr="_GUICtrlListView_SetItemChecked( $hWnd , $iIndex , $fCheck = True )\n\iSets the checked state (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetItemChecked( $hWnd , $iIndex , $fCheck = True )"/>
          <Keyword text="_GUICtrlListView_SetItemCount" descr="_GUICtrlListView_SetItemCount( $hWnd , $iItems )\n\iCauses the list-view control to allocate memory for the specified number of items (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetItemCount( $hWnd , $iItems )"/>
          <Keyword text="_GUICtrlListView_SetItemCut" descr="_GUICtrlListView_SetItemCut( $hWnd , $iIndex , $fEnabled = True )\n\iSets whether the item is marked for a cut-and-paste operation (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetItemCut( $hWnd , $iIndex , $fEnabled = True )"/>
          <Keyword text="_GUICtrlListView_SetItemDropHilited" descr="_GUICtrlListView_SetItemDropHilited( $hWnd , $iIndex , $fEnabled = True )\n\iSets whether the item is highlighted as a drag-and-drop target (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetItemDropHilited( $hWnd , $iIndex , $fEnabled = True )"/>
          <Keyword text="_GUICtrlListView_SetItemEx" descr="_GUICtrlListView_SetItemEx( $hWnd , ByRef $tItem )\n\iSets some or all of a item&apos;s attributes (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetItemEx( $hWnd , ByRef $tItem )"/>
          <Keyword text="_GUICtrlListView_SetItemFocused" descr="_GUICtrlListView_SetItemFocused( $hWnd , $iIndex , $fEnabled = True )\n\iSets whether the item has the focus (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetItemFocused( $hWnd , $iIndex , $fEnabled = True )"/>
          <Keyword text="_GUICtrlListView_SetItemGroupID" descr="_GUICtrlListView_SetItemGroupID( $hWnd , $iIndex , $iGroupID )\n\iSets the item group ID (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetItemGroupID( $hWnd , $iIndex , $iGroupID )"/>
          <Keyword text="_GUICtrlListView_SetItemImage" descr="_GUICtrlListView_SetItemImage( $hWnd , $iIndex , $iImage , $iSubItem = 0 )\n\iSets the index of the item&apos;s icon in the control&apos;s image list (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetItemImage( $hWnd , $iIndex , $iImage , $iSubItem = 0 )"/>
          <Keyword text="_GUICtrlListView_SetItemIndent" descr="_GUICtrlListView_SetItemIndent( $hWnd , $iIndex , $iIndent )\n\iSets the number of image widths to indent the item (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetItemIndent( $hWnd , $iIndex , $iIndent )"/>
          <Keyword text="_GUICtrlListView_SetItemParam" descr="_GUICtrlListView_SetItemParam( $hWnd , $iIndex , $iParam )\n\iSets the value specific to the item (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetItemParam( $hWnd , $iIndex , $iParam )"/>
          <Keyword text="_GUICtrlListView_SetItemPosition" descr="_GUICtrlListView_SetItemPosition( $hWnd , $iIndex , $iCX , $iCY )\n\iMoves an item to a specified position in the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetItemPosition( $hWnd , $iIndex , $iCX , $iCY )"/>
          <Keyword text="_GUICtrlListView_SetItemPosition32" descr="_GUICtrlListView_SetItemPosition32( $hWnd , $iIndex , $iCX , $iCY )\n\iMoves an item to a specified position in the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetItemPosition32( $hWnd , $iIndex , $iCX , $iCY )"/>
          <Keyword text="_GUICtrlListView_SetItemSelected" descr="_GUICtrlListView_SetItemSelected( $hWnd , $iIndex , $fSelected = True , $fFocused = False )\n\iSets whether the item is selected (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetItemSelected( $hWnd , $iIndex , $fSelected = True , $fFocused = False )"/>
          <Keyword text="_GUICtrlListView_SetItemState" descr="_GUICtrlListView_SetItemState( $hWnd , $iIndex , $iState , $iStateMask )\n\iChanges the state of an item in the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetItemState( $hWnd , $iIndex , $iState , $iStateMask )"/>
          <Keyword text="_GUICtrlListView_SetItemStateImage" descr="_GUICtrlListView_SetItemStateImage( $hWnd , $iIndex , $iImage )\n\iSets the state image that is displayed (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetItemStateImage( $hWnd , $iIndex , $iImage )"/>
          <Keyword text="_GUICtrlListView_SetItemText" descr="_GUICtrlListView_SetItemText( $hWnd , $iIndex , $sText , $iSubItem = 0 )\n\iChanges the text of an item or subitem (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetItemText( $hWnd , $iIndex , $sText , $iSubItem = 0 )"/>
          <Keyword text="_GUICtrlListView_SetOutlineColor" descr="_GUICtrlListView_SetOutlineColor( $hWnd , $iColor )\n\iSets the color of the border (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetOutlineColor( $hWnd , $iColor )"/>
          <Keyword text="_GUICtrlListView_SetSelectedColumn" descr="_GUICtrlListView_SetSelectedColumn( $hWnd , $iCol )\n\iSets the index of the selected column (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetSelectedColumn( $hWnd , $iCol )"/>
          <Keyword text="_GUICtrlListView_SetSelectionMark" descr="_GUICtrlListView_SetSelectionMark( $hWnd , $iIndex )\n\iSets the selection mark in the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetSelectionMark( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlListView_SetTextBkColor" descr="_GUICtrlListView_SetTextBkColor( $hWnd , $iColor )\n\iSets the background color of text in the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetTextBkColor( $hWnd , $iColor )"/>
          <Keyword text="_GUICtrlListView_SetTextColor" descr="_GUICtrlListView_SetTextColor( $hWnd , $iColor )\n\iSets the color of text in the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetTextColor( $hWnd , $iColor )"/>
          <Keyword text="_GUICtrlListView_SetToolTips" descr="_GUICtrlListView_SetToolTips( $hWnd , $hToolTip )\n\iSets the ToolTip control that the control will use to display ToolTips (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetToolTips( $hWnd , $hToolTip )"/>
          <Keyword text="_GUICtrlListView_SetUnicodeFormat" descr="_GUICtrlListView_SetUnicodeFormat( $hWnd , $fUnicode )\n\iSets the UNICODE character format flag for the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetUnicodeFormat( $hWnd , $fUnicode )"/>
          <Keyword text="_GUICtrlListView_SetView" descr="_GUICtrlListView_SetView( $hWnd , $iView )\n\iSets the view of the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetView( $hWnd , $iView )"/>
          <Keyword text="_GUICtrlListView_SetWorkAreas" descr="_GUICtrlListView_SetWorkAreas( $hWnd , $iLeft , $iTop , $iRight , $iBottom )\n\iCreates a work area within the control (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SetWorkAreas( $hWnd , $iLeft , $iTop , $iRight , $iBottom )"/>
          <Keyword text="_GUICtrlListView_SimpleSort" descr="_GUICtrlListView_SimpleSort( $hWnd , ByRef $vDescending , $iCol )\n\iSorts a list-view control (limited) (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SimpleSort( $hWnd , ByRef $vDescending , $iCol )"/>
          <Keyword text="_GUICtrlListView_SortItems" descr="_GUICtrlListView_SortItems( $hWnd , $iCol )\n\iStarts the sort call back, also sets the Arrow in the Header (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SortItems( $hWnd , $iCol )"/>
          <Keyword text="_GUICtrlListView_SubItemHitTest" descr="_GUICtrlListView_SubItemHitTest( $hWnd , $iX = -1 , $iY = -1 )\n\iDetermines which listview item or subitem is at a given position (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_SubItemHitTest( $hWnd , $iX = -1 , $iY = -1 )"/>
          <Keyword text="_GUICtrlListView_UnRegisterSortCallBack" descr="_GUICtrlListView_UnRegisterSortCallBack( $hWnd )\n\iUnRegister the Sort callback function (Requires: #include &lt;GuiListView.au3&gt;)\i0" pattern="_GUICtrlListView_UnRegisterSortCallBack( $hWnd )"/>
          <Keyword text="_GUICtrlMenu_AddMenuItem" descr="_GUICtrlMenu_AddMenuItem( $hMenu , $sText , $iCmdID = 0 , $hSubMenu = 0 )\n\iAdds a new menu item to the end of the menu (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_AddMenuItem( $hMenu , $sText , $iCmdID = 0 , $hSubMenu = 0 )"/>
          <Keyword text="_GUICtrlMenu_AppendMenu" descr="_GUICtrlMenu_AppendMenu( $hMenu , $iFlags , $iNewItem , $pNewItem )\n\iAppends a new item to the end of the specified menu bar, drop-down menu, submenu, or shortcut menu (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_AppendMenu( $hMenu , $iFlags , $iNewItem , $pNewItem )"/>
          <Keyword text="_GUICtrlMenu_CheckMenuItem" descr="_GUICtrlMenu_CheckMenuItem( $hMenu , $iItem , $fCheck = True , $fByPos = True )\n\iSets the state of the specified menu item&apos;s check mark attribute to either selected or clear (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_CheckMenuItem( $hMenu , $iItem , $fCheck = True , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_CheckRadioItem" descr="_GUICtrlMenu_CheckRadioItem( $hMenu , $iFirst , $iLast , $iCheck , $fByPos = True )\n\iChecks a specified menu item and makes it a radio item (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_CheckRadioItem( $hMenu , $iFirst , $iLast , $iCheck , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_CreateMenu" descr="_GUICtrlMenu_CreateMenu( $iStyle = 8 )\n\iCreates a menu (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_CreateMenu( $iStyle = 8 )"/>
          <Keyword text="_GUICtrlMenu_CreatePopup" descr="_GUICtrlMenu_CreatePopup( $iStyle = 8 )\n\iCreates a drop down menu, submenu, or shortcut menu (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_CreatePopup( $iStyle = 8 )"/>
          <Keyword text="_GUICtrlMenu_DeleteMenu" descr="_GUICtrlMenu_DeleteMenu( $hMenu , $iItem , $fByPos = True )\n\iDeletes an item from the specified menu (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_DeleteMenu( $hMenu , $iItem , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_DestroyMenu" descr="_GUICtrlMenu_DestroyMenu( $hMenu )\n\iDestroys the specified menu and frees any memory that the menu occupies (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_DestroyMenu( $hMenu )"/>
          <Keyword text="_GUICtrlMenu_DrawMenuBar" descr="_GUICtrlMenu_DrawMenuBar( $hWnd )\n\iRedraws the menu bar of the specified window (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_DrawMenuBar( $hWnd )"/>
          <Keyword text="_GUICtrlMenu_EnableMenuItem" descr="_GUICtrlMenu_EnableMenuItem( $hMenu , $iItem , $iState = 0 , $fByPos = True )\n\iEnables, disables, or grays the specified menu item (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_EnableMenuItem( $hMenu , $iItem , $iState = 0 , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_FindItem" descr="_GUICtrlMenu_FindItem( $hMenu , $sText , $fInStr = False , $iStart = 0 )\n\iRetrieves a menu item based on it&apos;s text (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_FindItem( $hMenu , $sText , $fInStr = False , $iStart = 0 )"/>
          <Keyword text="_GUICtrlMenu_FindParent" descr="_GUICtrlMenu_FindParent( $hMenu )\n\iRetrieves the window to which a menu belongs (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_FindParent( $hMenu )"/>
          <Keyword text="_GUICtrlMenu_GetItemBmp" descr="_GUICtrlMenu_GetItemBmp( $hMenu , $iItem , $fByPos = True )\n\iRetrieves the bitmap displayed for the item (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetItemBmp( $hMenu , $iItem , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_GetItemBmpChecked" descr="_GUICtrlMenu_GetItemBmpChecked( $hMenu , $iItem , $fByPos = True )\n\iRetrieves the bitmap displayed if the item is selected (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetItemBmpChecked( $hMenu , $iItem , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_GetItemBmpUnchecked" descr="_GUICtrlMenu_GetItemBmpUnchecked( $hMenu , $iItem , $fByPos = True )\n\iRetrieves the bitmap displayed if the item is not selected (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetItemBmpUnchecked( $hMenu , $iItem , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_GetItemChecked" descr="_GUICtrlMenu_GetItemChecked( $hMenu , $iItem , $fByPos = True )\n\iRetrieves the status of the menu item checked state (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetItemChecked( $hMenu , $iItem , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_GetItemCount" descr="_GUICtrlMenu_GetItemCount( $hMenu )\n\iRetrieves the number of items in the specified menu (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetItemCount( $hMenu )"/>
          <Keyword text="_GUICtrlMenu_GetItemData" descr="_GUICtrlMenu_GetItemData( $hMenu , $iItem , $fByPos = True )\n\iRetrieves the application defined value associated with the menu item (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetItemData( $hMenu , $iItem , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_GetItemDefault" descr="_GUICtrlMenu_GetItemDefault( $hMenu , $iItem , $fByPos = True )\n\iRetrieves the status of the menu item default state (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetItemDefault( $hMenu , $iItem , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_GetItemDisabled" descr="_GUICtrlMenu_GetItemDisabled( $hMenu , $iItem , $fByPos = True )\n\iRetrieves the status of the menu item disabled state (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetItemDisabled( $hMenu , $iItem , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_GetItemEnabled" descr="_GUICtrlMenu_GetItemEnabled( $hMenu , $iItem , $fByPos = True )\n\iRetrieves the status of the menu item enabled state (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetItemEnabled( $hMenu , $iItem , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_GetItemGrayed" descr="_GUICtrlMenu_GetItemGrayed( $hMenu , $iItem , $fByPos = True )\n\iRetrieves the status of the menu item grayed state (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetItemGrayed( $hMenu , $iItem , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_GetItemHighlighted" descr="_GUICtrlMenu_GetItemHighlighted( $hMenu , $iItem , $fByPos = True )\n\iRetrieves the status of the menu item highlighted state (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetItemHighlighted( $hMenu , $iItem , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_GetItemID" descr="_GUICtrlMenu_GetItemID( $hMenu , $iItem , $fByPos = True )\n\iRetrieves the menu item ID (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetItemID( $hMenu , $iItem , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_GetItemInfo" descr="_GUICtrlMenu_GetItemInfo( $hMenu , $iItem , $fByPos = True )\n\iRetrieves information about a menu item (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetItemInfo( $hMenu , $iItem , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_GetItemRect" descr="_GUICtrlMenu_GetItemRect( $hWnd , $hMenu , $iItem )\n\iRetrieves the bounding rectangle for the specified menu item (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetItemRect( $hWnd , $hMenu , $iItem )"/>
          <Keyword text="_GUICtrlMenu_GetItemRectEx" descr="_GUICtrlMenu_GetItemRectEx( $hWnd , $hMenu , $iItem )\n\iRetrieves the bounding rectangle for the specified menu item (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetItemRectEx( $hWnd , $hMenu , $iItem )"/>
          <Keyword text="_GUICtrlMenu_GetItemState" descr="_GUICtrlMenu_GetItemState( $hMenu , $iItem , $fByPos = True )\n\iRetrieves the menu item state (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetItemState( $hMenu , $iItem , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_GetItemStateEx" descr="_GUICtrlMenu_GetItemStateEx( $hMenu , $iItem , $fByPos = True )\n\iRetrieves the menu flags associated with the specified menu item (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetItemStateEx( $hMenu , $iItem , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_GetItemSubMenu" descr="_GUICtrlMenu_GetItemSubMenu( $hMenu , $iItem )\n\iRetrieves a the submenu activated by a specified item (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetItemSubMenu( $hMenu , $iItem )"/>
          <Keyword text="_GUICtrlMenu_GetItemText" descr="_GUICtrlMenu_GetItemText( $hMenu , $iItem , $fByPos = True )\n\iRetrieves the text of the specified menu item (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetItemText( $hMenu , $iItem , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_GetItemType" descr="_GUICtrlMenu_GetItemType( $hMenu , $iItem , $fByPos = True )\n\iRetrieves the menu item type (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetItemType( $hMenu , $iItem , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_GetMenu" descr="_GUICtrlMenu_GetMenu( $hWnd )\n\iRetrieves the handle of the menu assigned to the given window (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetMenu( $hWnd )"/>
          <Keyword text="_GUICtrlMenu_GetMenuBackground" descr="_GUICtrlMenu_GetMenuBackground( $hMenu )\n\iRetrieves the brush to use for the menu&apos;s background (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetMenuBackground( $hMenu )"/>
          <Keyword text="_GUICtrlMenu_GetMenuBarInfo" descr="_GUICtrlMenu_GetMenuBarInfo( $hWnd , $iItem = 0 , $iObject = 1 )\n\iRetrieves information about the specified menu bar (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetMenuBarInfo( $hWnd , $iItem = 0 , $iObject = 1 )"/>
          <Keyword text="_GUICtrlMenu_GetMenuContextHelpID" descr="_GUICtrlMenu_GetMenuContextHelpID( $hMenu )\n\iRetrieves the context help identifier (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetMenuContextHelpID( $hMenu )"/>
          <Keyword text="_GUICtrlMenu_GetMenuData" descr="_GUICtrlMenu_GetMenuData( $hMenu )\n\iRetrieves the application defined value (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetMenuData( $hMenu )"/>
          <Keyword text="_GUICtrlMenu_GetMenuDefaultItem" descr="_GUICtrlMenu_GetMenuDefaultItem( $hMenu , $fByPos = True , $iFlags = 0 )\n\iRetrieves the default menu item on the specified menu (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetMenuDefaultItem( $hMenu , $fByPos = True , $iFlags = 0 )"/>
          <Keyword text="_GUICtrlMenu_GetMenuHeight" descr="_GUICtrlMenu_GetMenuHeight( $hMenu )\n\iRetrieves the maximum height of a menu (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetMenuHeight( $hMenu )"/>
          <Keyword text="_GUICtrlMenu_GetMenuInfo" descr="_GUICtrlMenu_GetMenuInfo( $hMenu )\n\iRetrieves information about a specified menu (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetMenuInfo( $hMenu )"/>
          <Keyword text="_GUICtrlMenu_GetMenuStyle" descr="_GUICtrlMenu_GetMenuStyle( $hMenu )\n\iRetrieves the style information for a menu (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetMenuStyle( $hMenu )"/>
          <Keyword text="_GUICtrlMenu_GetSystemMenu" descr="_GUICtrlMenu_GetSystemMenu( $hWnd , $fRevert = False )\n\iAllows the application to access the window menu for copying and modifying (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_GetSystemMenu( $hWnd , $fRevert = False )"/>
          <Keyword text="_GUICtrlMenu_InsertMenuItem" descr="_GUICtrlMenu_InsertMenuItem( $hMenu , $iIndex , $sText , $iCmdID = 0 , $hSubMenu = 0 )\n\iInserts a new menu item at the specified position (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_InsertMenuItem( $hMenu , $iIndex , $sText , $iCmdID = 0 , $hSubMenu = 0 )"/>
          <Keyword text="_GUICtrlMenu_InsertMenuItemEx" descr="_GUICtrlMenu_InsertMenuItemEx( $hMenu , $iIndex , ByRef $tMenu , $fByPos = True )\n\iInserts a new menu item at the specified position in a menu (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_InsertMenuItemEx( $hMenu , $iIndex , ByRef $tMenu , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_IsMenu" descr="_GUICtrlMenu_IsMenu( $hMenu )\n\iDetermines whether a handle is a menu handle (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_IsMenu( $hMenu )"/>
          <Keyword text="_GUICtrlMenu_LoadMenu" descr="_GUICtrlMenu_LoadMenu( $hInst , $sMenuName )\n\iLoads the specified menu resource from the executable file associated with an application instance (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_LoadMenu( $hInst , $sMenuName )"/>
          <Keyword text="_GUICtrlMenu_MapAccelerator" descr="_GUICtrlMenu_MapAccelerator( $hMenu , $cAccel )\n\iMaps a menu accelerator key to it&apos;s position in the menu (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_MapAccelerator( $hMenu , $cAccel )"/>
          <Keyword text="_GUICtrlMenu_MenuItemFromPoint" descr="_GUICtrlMenu_MenuItemFromPoint( $hWnd , $hMenu , $iX = -1 , $iY = -1 )\n\iDetermines which menu item is at the specified location. (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_MenuItemFromPoint( $hWnd , $hMenu , $iX = -1 , $iY = -1 )"/>
          <Keyword text="_GUICtrlMenu_RemoveMenu" descr="_GUICtrlMenu_RemoveMenu( $hMenu , $iItem , $fByPos = True )\n\iDeletes a menu item or detaches a submenu from the specified menu (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_RemoveMenu( $hMenu , $iItem , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_SetItemBitmaps" descr="_GUICtrlMenu_SetItemBitmaps( $hMenu , $iItem , $hChecked , $hUnChecked , $fByPos = True )\n\iAssociates the specified bitmap with a menu item (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetItemBitmaps( $hMenu , $iItem , $hChecked , $hUnChecked , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_SetItemBmp" descr="_GUICtrlMenu_SetItemBmp( $hMenu , $iItem , $hBmp , $fByPos = True )\n\iSets the bitmap displayed for the item (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetItemBmp( $hMenu , $iItem , $hBmp , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_SetItemBmpChecked" descr="_GUICtrlMenu_SetItemBmpChecked( $hMenu , $iItem , $hBmp , $fByPos = True )\n\iSets the bitmap displayed if the item is selected (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetItemBmpChecked( $hMenu , $iItem , $hBmp , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_SetItemBmpUnchecked" descr="_GUICtrlMenu_SetItemBmpUnchecked( $hMenu , $iItem , $hBmp , $fByPos = True )\n\iSets the bitmap displayed if the item is not selected (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetItemBmpUnchecked( $hMenu , $iItem , $hBmp , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_SetItemChecked" descr="_GUICtrlMenu_SetItemChecked( $hMenu , $iItem , $fState = True , $fByPos = True )\n\iSets the checked state of a menu item (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetItemChecked( $hMenu , $iItem , $fState = True , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_SetItemData" descr="_GUICtrlMenu_SetItemData( $hMenu , $iItem , $iData , $fByPos = True )\n\iSets the application defined value for a menu item (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetItemData( $hMenu , $iItem , $iData , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_SetItemDefault" descr="_GUICtrlMenu_SetItemDefault( $hMenu , $iItem , $fState = True , $fByPos = True )\n\iSets the status of the menu item default state (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetItemDefault( $hMenu , $iItem , $fState = True , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_SetItemDisabled" descr="_GUICtrlMenu_SetItemDisabled( $hMenu , $iItem , $fState = True , $fByPos = True )\n\iSets the disabled state of a menu item (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetItemDisabled( $hMenu , $iItem , $fState = True , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_SetItemEnabled" descr="_GUICtrlMenu_SetItemEnabled( $hMenu , $iItem , $fState = True , $fByPos = True )\n\iSets the enabled state of a menu item (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetItemEnabled( $hMenu , $iItem , $fState = True , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_SetItemGrayed" descr="_GUICtrlMenu_SetItemGrayed( $hMenu , $iItem , $fState = True , $fByPos = True )\n\iSets the grayed state of a menu item (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetItemGrayed( $hMenu , $iItem , $fState = True , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_SetItemHighlighted" descr="_GUICtrlMenu_SetItemHighlighted( $hMenu , $iItem , $fState = True , $fByPos = True )\n\iSets the highlighted state of a menu item (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetItemHighlighted( $hMenu , $iItem , $fState = True , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_SetItemID" descr="_GUICtrlMenu_SetItemID( $hMenu , $iItem , $iID , $fByPos = True )\n\iSets the menu item ID (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetItemID( $hMenu , $iItem , $iID , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_SetItemInfo" descr="_GUICtrlMenu_SetItemInfo( $hMenu , $iItem , ByRef $tInfo , $fByPos = True )\n\iChanges information about a menu item (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetItemInfo( $hMenu , $iItem , ByRef $tInfo , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_SetItemState" descr="_GUICtrlMenu_SetItemState( $hMenu , $iItem , $iState , $fState = True , $fByPos = True )\n\iSets the state of a menu item (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetItemState( $hMenu , $iItem , $iState , $fState = True , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_SetItemSubMenu" descr="_GUICtrlMenu_SetItemSubMenu( $hMenu , $iItem , $hSubMenu , $fByPos = True )\n\iSets the drop down menu or submenu associated with the menu item (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetItemSubMenu( $hMenu , $iItem , $hSubMenu , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_SetItemText" descr="_GUICtrlMenu_SetItemText( $hMenu , $iItem , $sText , $fByPos = True )\n\iSets the text for a menu item (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetItemText( $hMenu , $iItem , $sText , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_SetItemType" descr="_GUICtrlMenu_SetItemType( $hMenu , $iItem , $iType , $fByPos = True )\n\iSets the menu item type (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetItemType( $hMenu , $iItem , $iType , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_SetMenu" descr="_GUICtrlMenu_SetMenu( $hWnd , $hMenu )\n\iAssigns a new menu to the specified window (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetMenu( $hWnd , $hMenu )"/>
          <Keyword text="_GUICtrlMenu_SetMenuBackground" descr="_GUICtrlMenu_SetMenuBackground( $hMenu , $hBrush )\n\iSets the background brush for the menu (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetMenuBackground( $hMenu , $hBrush )"/>
          <Keyword text="_GUICtrlMenu_SetMenuContextHelpID" descr="_GUICtrlMenu_SetMenuContextHelpID( $hMenu , $iHelpID )\n\iSets the context help identifier for the menu (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetMenuContextHelpID( $hMenu , $iHelpID )"/>
          <Keyword text="_GUICtrlMenu_SetMenuData" descr="_GUICtrlMenu_SetMenuData( $hMenu , $iData )\n\iSets the application defined for the menu (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetMenuData( $hMenu , $iData )"/>
          <Keyword text="_GUICtrlMenu_SetMenuDefaultItem" descr="_GUICtrlMenu_SetMenuDefaultItem( $hMenu , $iItem , $fByPos = True )\n\iSets the default menu item (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetMenuDefaultItem( $hMenu , $iItem , $fByPos = True )"/>
          <Keyword text="_GUICtrlMenu_SetMenuHeight" descr="_GUICtrlMenu_SetMenuHeight( $hMenu , $iHeight )\n\iSets the maximum height of the menu (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetMenuHeight( $hMenu , $iHeight )"/>
          <Keyword text="_GUICtrlMenu_SetMenuInfo" descr="_GUICtrlMenu_SetMenuInfo( $hMenu , ByRef $tInfo )\n\iSets information for a specified menu (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetMenuInfo( $hMenu , ByRef $tInfo )"/>
          <Keyword text="_GUICtrlMenu_SetMenuStyle" descr="_GUICtrlMenu_SetMenuStyle( $hMenu , $iStyle )\n\iSets the menu style (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_SetMenuStyle( $hMenu , $iStyle )"/>
          <Keyword text="_GUICtrlMenu_TrackPopupMenu" descr="_GUICtrlMenu_TrackPopupMenu( $hMenu , $hWnd , $iX = -1 , $iY = -1 , $iAlignX = 1 , $iAlignY = 1 , $iNotify = 0 , $iButtons = 0 )\n\iDisplays a shortcut menu at the specified location (Requires: #include &lt;GuiMenu.au3&gt;)\i0" pattern="_GUICtrlMenu_TrackPopupMenu( $hMenu , $hWnd , $iX = -1 , $iY = -1 , $iAlignX = 1 , $iAlignY = 1 , $iNotify = 0 , $iButtons = 0 )"/>
          <Keyword text="_GUICtrlMonthCal_Create" descr="_GUICtrlMonthCal_Create( $hWnd , $iX , $iY , $iStyle = 0x00000000 , $iExStyle = 0x00000000 )\n\iCreates a Month Calendar control (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_Create( $hWnd , $iX , $iY , $iStyle = 0x00000000 , $iExStyle = 0x00000000 )"/>
          <Keyword text="_GUICtrlMonthCal_Destroy" descr="_GUICtrlMonthCal_Destroy( ByRef $hWnd )\n\iDelete the MonthCal control (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_Destroy( ByRef $hWnd )"/>
          <Keyword text="_GUICtrlMonthCal_GetCalendarBorder" descr="_GUICtrlMonthCal_GetCalendarBorder( $hWnd )\n\iGets the size of the border, in pixels (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetCalendarBorder( $hWnd )"/>
          <Keyword text="_GUICtrlMonthCal_GetCalendarCount" descr="_GUICtrlMonthCal_GetCalendarCount( $hWnd )\n\iGets the number of calendars currently displayed in the calendar control (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetCalendarCount( $hWnd )"/>
          <Keyword text="_GUICtrlMonthCal_GetColor" descr="_GUICtrlMonthCal_GetColor( $hWnd , $iIndex )\n\iRetrieves a given color for the control (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetColor( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlMonthCal_GetColorArray" descr="_GUICtrlMonthCal_GetColorArray( $hWnd , $iColor )\n\iRetrieves the color for a given portion of a month calendar control (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetColorArray( $hWnd , $iColor )"/>
          <Keyword text="_GUICtrlMonthCal_GetCurSel" descr="_GUICtrlMonthCal_GetCurSel( $hWnd )\n\iRetrieves the currently selected date (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetCurSel( $hWnd )"/>
          <Keyword text="_GUICtrlMonthCal_GetCurSelStr" descr="_GUICtrlMonthCal_GetCurSelStr( $hWnd , $sFormat = &quot;%02d/%02d/%04d&quot; )\n\iRetrieves the currently selected date in string format (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetCurSelStr( $hWnd , $sFormat = &quot;%02d/%02d/%04d&quot; )"/>
          <Keyword text="_GUICtrlMonthCal_GetFirstDOW" descr="_GUICtrlMonthCal_GetFirstDOW( $hWnd )\n\iRetrieves the first day of the week (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetFirstDOW( $hWnd )"/>
          <Keyword text="_GUICtrlMonthCal_GetFirstDOWStr" descr="_GUICtrlMonthCal_GetFirstDOWStr( $hWnd )\n\iRetrieves the first day of the week as a string (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetFirstDOWStr( $hWnd )"/>
          <Keyword text="_GUICtrlMonthCal_GetMaxSelCount" descr="_GUICtrlMonthCal_GetMaxSelCount( $hWnd )\n\iRetrieves the maximum date range that can be selected in a month calendar control (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetMaxSelCount( $hWnd )"/>
          <Keyword text="_GUICtrlMonthCal_GetMaxTodayWidth" descr="_GUICtrlMonthCal_GetMaxTodayWidth( $hWnd )\n\iRetrieves the maximum width of the &quot;today&quot; string in a month calendar control (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetMaxTodayWidth( $hWnd )"/>
          <Keyword text="_GUICtrlMonthCal_GetMinReqHeight" descr="_GUICtrlMonthCal_GetMinReqHeight( $hWnd )\n\iRetrieves the minimum height required to display a full month (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetMinReqHeight( $hWnd )"/>
          <Keyword text="_GUICtrlMonthCal_GetMinReqRect" descr="_GUICtrlMonthCal_GetMinReqRect( $hWnd )\n\iRetrieves the minimum size required to display a full month (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetMinReqRect( $hWnd )"/>
          <Keyword text="_GUICtrlMonthCal_GetMinReqRectArray" descr="_GUICtrlMonthCal_GetMinReqRectArray( $hWnd )\n\iRetrieves the minimum size required to display a full month in a month calendar control (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetMinReqRectArray( $hWnd )"/>
          <Keyword text="_GUICtrlMonthCal_GetMinReqWidth" descr="_GUICtrlMonthCal_GetMinReqWidth( $hWnd )\n\iRetrieves the minimum width required to display a full month (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetMinReqWidth( $hWnd )"/>
          <Keyword text="_GUICtrlMonthCal_GetMonthDelta" descr="_GUICtrlMonthCal_GetMonthDelta( $hWnd )\n\iRetrieves the scroll rate for a month calendar control (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetMonthDelta( $hWnd )"/>
          <Keyword text="_GUICtrlMonthCal_GetMonthRange" descr="_GUICtrlMonthCal_GetMonthRange( $hWnd , $fPartial = False )\n\iRetrieves date information that represents the high and low display limits (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetMonthRange( $hWnd , $fPartial = False )"/>
          <Keyword text="_GUICtrlMonthCal_GetMonthRangeMax" descr="_GUICtrlMonthCal_GetMonthRangeMax( $hWnd , $fPartial = False )\n\iRetrieves date information that represents the high limit of the controls display (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetMonthRangeMax( $hWnd , $fPartial = False )"/>
          <Keyword text="_GUICtrlMonthCal_GetMonthRangeMaxStr" descr="_GUICtrlMonthCal_GetMonthRangeMaxStr( $hWnd , $sFormat = &quot;%02d/%02d/%04d&quot; )\n\iRetrieves date information that represents the high limit of the controls display in string format (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetMonthRangeMaxStr( $hWnd , $sFormat = &quot;%02d/%02d/%04d&quot; )"/>
          <Keyword text="_GUICtrlMonthCal_GetMonthRangeMin" descr="_GUICtrlMonthCal_GetMonthRangeMin( $hWnd , $fPartial = False )\n\iRetrieves date information that represents the low limit of the controls display (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetMonthRangeMin( $hWnd , $fPartial = False )"/>
          <Keyword text="_GUICtrlMonthCal_GetMonthRangeMinStr" descr="_GUICtrlMonthCal_GetMonthRangeMinStr( $hWnd , $sFormat = &quot;%02d/%02d/%04d&quot; )\n\iRetrieves date information that represents the low limit of the controls display in string format (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetMonthRangeMinStr( $hWnd , $sFormat = &quot;%02d/%02d/%04d&quot; )"/>
          <Keyword text="_GUICtrlMonthCal_GetMonthRangeSpan" descr="_GUICtrlMonthCal_GetMonthRangeSpan( $hWnd , $fPartial = False )\n\iReturns a value that represents the range, in months, spanned (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetMonthRangeSpan( $hWnd , $fPartial = False )"/>
          <Keyword text="_GUICtrlMonthCal_GetRange" descr="_GUICtrlMonthCal_GetRange( $hWnd )\n\iRetrieves the minimum and maximum allowable dates (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetRange( $hWnd )"/>
          <Keyword text="_GUICtrlMonthCal_GetRangeMax" descr="_GUICtrlMonthCal_GetRangeMax( $hWnd )\n\iRetrieves the upper limit date range (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetRangeMax( $hWnd )"/>
          <Keyword text="_GUICtrlMonthCal_GetRangeMaxStr" descr="_GUICtrlMonthCal_GetRangeMaxStr( $hWnd , $sFormat = &quot;%02d/%02d/%04d&quot; )\n\iRetrieves the upper limit date range in string format (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetRangeMaxStr( $hWnd , $sFormat = &quot;%02d/%02d/%04d&quot; )"/>
          <Keyword text="_GUICtrlMonthCal_GetRangeMin" descr="_GUICtrlMonthCal_GetRangeMin( $hWnd )\n\iRetrieves the lower limit date range (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetRangeMin( $hWnd )"/>
          <Keyword text="_GUICtrlMonthCal_GetRangeMinStr" descr="_GUICtrlMonthCal_GetRangeMinStr( $hWnd , $sFormat = &quot;%02d/%02d/%04d&quot; )\n\iRetrieves the lower limit date range in string form (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetRangeMinStr( $hWnd , $sFormat = &quot;%02d/%02d/%04d&quot; )"/>
          <Keyword text="_GUICtrlMonthCal_GetSelRange" descr="_GUICtrlMonthCal_GetSelRange( $hWnd )\n\iRetrieves the upper and lower limits of the date range currently selected (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetSelRange( $hWnd )"/>
          <Keyword text="_GUICtrlMonthCal_GetSelRangeMax" descr="_GUICtrlMonthCal_GetSelRangeMax( $hWnd )\n\iRetrieves the upper date range currently selected by the user (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetSelRangeMax( $hWnd )"/>
          <Keyword text="_GUICtrlMonthCal_GetSelRangeMaxStr" descr="_GUICtrlMonthCal_GetSelRangeMaxStr( $hWnd , $sFormat = &quot;%02d/%02d/%04d&quot; )\n\iRetrieves the upper date range currently selected by the user in string form (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetSelRangeMaxStr( $hWnd , $sFormat = &quot;%02d/%02d/%04d&quot; )"/>
          <Keyword text="_GUICtrlMonthCal_GetSelRangeMin" descr="_GUICtrlMonthCal_GetSelRangeMin( $hWnd )\n\iRetrieves the lower date range currently selected by the user (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetSelRangeMin( $hWnd )"/>
          <Keyword text="_GUICtrlMonthCal_GetSelRangeMinStr" descr="_GUICtrlMonthCal_GetSelRangeMinStr( $hWnd , $sFormat = &quot;%02d/%02d/%04d&quot; )\n\iRetrieves the lower date range currently selected by the user in string form (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetSelRangeMinStr( $hWnd , $sFormat = &quot;%02d/%02d/%04d&quot; )"/>
          <Keyword text="_GUICtrlMonthCal_GetToday" descr="_GUICtrlMonthCal_GetToday( $hWnd )\n\iRetrieves the date information for the date specified as &quot;today&quot; (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetToday( $hWnd )"/>
          <Keyword text="_GUICtrlMonthCal_GetTodayStr" descr="_GUICtrlMonthCal_GetTodayStr( $hWnd , $sFormat = &quot;%02d/%02d/%04d&quot; )\n\iRetrieves the date information for the date specified as &quot;today&quot; in string format (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetTodayStr( $hWnd , $sFormat = &quot;%02d/%02d/%04d&quot; )"/>
          <Keyword text="_GUICtrlMonthCal_GetUnicodeFormat" descr="_GUICtrlMonthCal_GetUnicodeFormat( $hWnd )\n\iRetrieves the Unicode character format flag for the control (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_GetUnicodeFormat( $hWnd )"/>
          <Keyword text="_GUICtrlMonthCal_HitTest" descr="_GUICtrlMonthCal_HitTest( $hWnd , $iX , $iY )\n\iDetermines which portion of a month calendar control is at a given point (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_HitTest( $hWnd , $iX , $iY )"/>
          <Keyword text="_GUICtrlMonthCal_SetCalendarBorder" descr="_GUICtrlMonthCal_SetCalendarBorder( $hWnd , $iBorderSize = 4 , $fSetBorder = True )\n\iSets the size of the border, in pixels (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_SetCalendarBorder( $hWnd , $iBorderSize = 4 , $fSetBorder = True )"/>
          <Keyword text="_GUICtrlMonthCal_SetColor" descr="_GUICtrlMonthCal_SetColor( $hWnd , $iIndex , $iColor )\n\iSets the color for a given portion of the month calendar (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_SetColor( $hWnd , $iIndex , $iColor )"/>
          <Keyword text="_GUICtrlMonthCal_SetCurSel" descr="_GUICtrlMonthCal_SetCurSel( $hWnd , $iYear , $iMonth , $iDay )\n\iSets the currently selected date (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_SetCurSel( $hWnd , $iYear , $iMonth , $iDay )"/>
          <Keyword text="_GUICtrlMonthCal_SetDayState" descr="_GUICtrlMonthCal_SetDayState( $hWnd , $aMasks )\n\iSets the day states for all months that are currently visible (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_SetDayState( $hWnd , $aMasks )"/>
          <Keyword text="_GUICtrlMonthCal_SetFirstDOW" descr="_GUICtrlMonthCal_SetFirstDOW( $hWnd , $sDay )\n\iSets the first day of the week for a month calendar control (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_SetFirstDOW( $hWnd , $sDay )"/>
          <Keyword text="_GUICtrlMonthCal_SetMaxSelCount" descr="_GUICtrlMonthCal_SetMaxSelCount( $hWnd , $iMaxSel )\n\iSets the maximum number of days that can be selected in a month calendar control (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_SetMaxSelCount( $hWnd , $iMaxSel )"/>
          <Keyword text="_GUICtrlMonthCal_SetMonthDelta" descr="_GUICtrlMonthCal_SetMonthDelta( $hWnd , $iDelta )\n\iSets the scroll rate for a month calendar control (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_SetMonthDelta( $hWnd , $iDelta )"/>
          <Keyword text="_GUICtrlMonthCal_SetRange" descr="_GUICtrlMonthCal_SetRange( $hWnd , $iMinYear , $iMinMonth , $iMinDay , $iMaxYear , $iMaxMonth , $iMaxDay )\n\iSets date information that represents the high and low limits (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_SetRange( $hWnd , $iMinYear , $iMinMonth , $iMinDay , $iMaxYear , $iMaxMonth , $iMaxDay )"/>
          <Keyword text="_GUICtrlMonthCal_SetSelRange" descr="_GUICtrlMonthCal_SetSelRange( $hWnd , $iMinYear , $iMinMonth , $iMinDay , $iMaxYear , $iMaxMonth , $iMaxDay )\n\iSets the selection for a month calendar control to a given date range (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_SetSelRange( $hWnd , $iMinYear , $iMinMonth , $iMinDay , $iMaxYear , $iMaxMonth , $iMaxDay )"/>
          <Keyword text="_GUICtrlMonthCal_SetToday" descr="_GUICtrlMonthCal_SetToday( $hWnd , $iYear , $iMonth , $iDay )\n\iSets the date information for the date specified as &quot;today&quot; (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_SetToday( $hWnd , $iYear , $iMonth , $iDay )"/>
          <Keyword text="_GUICtrlMonthCal_SetUnicodeFormat" descr="_GUICtrlMonthCal_SetUnicodeFormat( $hWnd , $fUnicode = False )\n\iSets the Unicode character format flag for the control (Requires: #include &lt;GuiMonthCal.au3&gt;)\i0" pattern="_GUICtrlMonthCal_SetUnicodeFormat( $hWnd , $fUnicode = False )"/>
          <Keyword text="_GUICtrlRebar_AddBand" descr="_GUICtrlRebar_AddBand( $hwndRebar , $hwndChild , $iMinWidth = 100 , $iDefaultWidth = 100 , $sText = &quot;&quot; , $iIndex = -1 , $fStyle = -1 )\n\iAdds a new band in a rebar control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_AddBand( $hwndRebar , $hwndChild , $iMinWidth = 100 , $iDefaultWidth = 100 , $sText = &quot;&quot; , $iIndex = -1 , $fStyle = -1 )"/>
          <Keyword text="_GUICtrlRebar_AddToolBarBand" descr="_GUICtrlRebar_AddToolBarBand( $hwndRebar , $hwndToolbar , $sText = &quot;&quot; , $iIndex = -1 , $fStyle = -1 )\n\iAdds a new band in a rebar control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_AddToolBarBand( $hwndRebar , $hwndToolbar , $sText = &quot;&quot; , $iIndex = -1 , $fStyle = -1 )"/>
          <Keyword text="_GUICtrlRebar_BeginDrag" descr="_GUICtrlRebar_BeginDrag( $hWnd , $iIndex , $dwPos = -1 )\n\iAdds a new band in a rebar control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_BeginDrag( $hWnd , $iIndex , $dwPos = -1 )"/>
          <Keyword text="_GUICtrlRebar_Create" descr="_GUICtrlRebar_Create( $hWnd , $iStyles = 0x513 )\n\iCreate a Rebar control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_Create( $hWnd , $iStyles = 0x513 )"/>
          <Keyword text="_GUICtrlRebar_DeleteBand" descr="_GUICtrlRebar_DeleteBand( $hWnd , $iIndex )\n\iDeletes a band from a rebar control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_DeleteBand( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_Destroy" descr="_GUICtrlRebar_Destroy( ByRef $hWnd )\n\iDelete the control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_Destroy( ByRef $hWnd )"/>
          <Keyword text="_GUICtrlRebar_DragMove" descr="_GUICtrlRebar_DragMove( $hWnd , $dwPos = -1 )\n\iUpdates the drag position in the rebar control after a previous _GUICtrlRebar_BeginDrag message (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_DragMove( $hWnd , $dwPos = -1 )"/>
          <Keyword text="_GUICtrlRebar_EndDrag" descr="_GUICtrlRebar_EndDrag( $hWnd )\n\iTerminates the rebar control&apos;s drag-and-drop operation. This message does not cause an $RBN_ENDDRAG notification to be sent (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_EndDrag( $hWnd )"/>
          <Keyword text="_GUICtrlRebar_GetBKColor" descr="_GUICtrlRebar_GetBKColor( $hWnd )\n\iRetrieves a rebar control&apos;s default background color (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBKColor( $hWnd )"/>
          <Keyword text="_GUICtrlRebar_GetBandBackColor" descr="_GUICtrlRebar_GetBandBackColor( $hWnd , $iIndex )\n\iRetrieves the Band background color (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandBackColor( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandBorders" descr="_GUICtrlRebar_GetBandBorders( $hWnd , $iIndex )\n\iRetrieves the borders of a band. The result of this message can be used to calculate the usable area in a band (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandBorders( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandBordersEx" descr="_GUICtrlRebar_GetBandBordersEx( $hWnd , $iIndex )\n\iRetrieves the borders of a band. The result of this message can be used to calculate the usable area in a band (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandBordersEx( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandChildHandle" descr="_GUICtrlRebar_GetBandChildHandle( $hWnd , $iIndex )\n\iRetrieves the Handle to the child window contained in the band, if any (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandChildHandle( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandChildSize" descr="_GUICtrlRebar_GetBandChildSize( $hWnd , $iIndex )\n\iRetrieves the Child size settings (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandChildSize( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandCount" descr="_GUICtrlRebar_GetBandCount( $hWnd )\n\iRetrieves the count of bands currently in the rebar control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandCount( $hWnd )"/>
          <Keyword text="_GUICtrlRebar_GetBandForeColor" descr="_GUICtrlRebar_GetBandForeColor( $hWnd , $iIndex )\n\iRetrieves the Band foreground color (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandForeColor( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandHeaderSize" descr="_GUICtrlRebar_GetBandHeaderSize( $hWnd , $iIndex )\n\iRetrieves the size of the band&apos;s header, in pixels (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandHeaderSize( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandID" descr="_GUICtrlRebar_GetBandID( $hWnd , $iIndex )\n\iGet the value that the control uses to identify this band for custom draw notification messages (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandID( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandIdealSize" descr="_GUICtrlRebar_GetBandIdealSize( $hWnd , $iIndex )\n\iGet Ideal width of the band, in pixels. (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandIdealSize( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandLParam" descr="_GUICtrlRebar_GetBandLParam( $hWnd , $iIndex )\n\iGet Application-defined value (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandLParam( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandLength" descr="_GUICtrlRebar_GetBandLength( $hWnd , $iIndex )\n\iGet Length of the band, in pixels (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandLength( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandMargins" descr="_GUICtrlRebar_GetBandMargins( $hWnd )\n\iGet Length of the band, in pixels (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandMargins( $hWnd )"/>
          <Keyword text="_GUICtrlRebar_GetBandMarginsEx" descr="_GUICtrlRebar_GetBandMarginsEx( $hWnd )\n\iGet Length of the band, in pixels (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandMarginsEx( $hWnd )"/>
          <Keyword text="_GUICtrlRebar_GetBandRect" descr="_GUICtrlRebar_GetBandRect( $hWnd , $iIndex )\n\iRetrieves the bounding rectangle for a given band in a rebar control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandRect( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandRectEx" descr="_GUICtrlRebar_GetBandRectEx( $hWnd , $iIndex )\n\iRetrieves the bounding rectangle for a given band in a rebar control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandRectEx( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandStyle" descr="_GUICtrlRebar_GetBandStyle( $hWnd , $iIndex )\n\iGet the band style Flags (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandStyle( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandStyleBreak" descr="_GUICtrlRebar_GetBandStyleBreak( $hWnd , $iIndex )\n\iDetermine if flag is set (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandStyleBreak( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandStyleChildEdge" descr="_GUICtrlRebar_GetBandStyleChildEdge( $hWnd , $iIndex )\n\iDetermine if flag is set (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandStyleChildEdge( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandStyleFixedBMP" descr="_GUICtrlRebar_GetBandStyleFixedBMP( $hWnd , $iIndex )\n\iDetermine if flag is set (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandStyleFixedBMP( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandStyleFixedSize" descr="_GUICtrlRebar_GetBandStyleFixedSize( $hWnd , $iIndex )\n\iDetermine if flag is set (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandStyleFixedSize( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandStyleGripperAlways" descr="_GUICtrlRebar_GetBandStyleGripperAlways( $hWnd , $iIndex )\n\iDetermine if flag is set (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandStyleGripperAlways( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandStyleHidden" descr="_GUICtrlRebar_GetBandStyleHidden( $hWnd , $iIndex )\n\iDetermine if flag is set (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandStyleHidden( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandStyleHideTitle" descr="_GUICtrlRebar_GetBandStyleHideTitle( $hWnd , $iIndex )\n\iDetermine if flag is set (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandStyleHideTitle( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandStyleNoGripper" descr="_GUICtrlRebar_GetBandStyleNoGripper( $hWnd , $iIndex )\n\iDetermine if flag is set (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandStyleNoGripper( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandStyleTopAlign" descr="_GUICtrlRebar_GetBandStyleTopAlign( $hWnd , $iIndex )\n\iDetermine if flag is set (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandStyleTopAlign( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandStyleUseChevron" descr="_GUICtrlRebar_GetBandStyleUseChevron( $hWnd , $iIndex )\n\iDetermine if flag is set (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandStyleUseChevron( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandStyleVariableHeight" descr="_GUICtrlRebar_GetBandStyleVariableHeight( $hWnd , $iIndex )\n\iDetermine if flag is set (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandStyleVariableHeight( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBandText" descr="_GUICtrlRebar_GetBandText( $hWnd , $iIndex )\n\iRetrieves the display text for the band (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBandText( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetBarHeight" descr="_GUICtrlRebar_GetBarHeight( $hWnd )\n\iRetrieves the height of the rebar control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBarHeight( $hWnd )"/>
          <Keyword text="_GUICtrlRebar_GetBarInfo" descr="_GUICtrlRebar_GetBarInfo( $hWnd )\n\iRetrieves information about the rebar control and the image list it uses (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetBarInfo( $hWnd )"/>
          <Keyword text="_GUICtrlRebar_GetColorScheme" descr="_GUICtrlRebar_GetColorScheme( $hWnd )\n\iRetrieves the color scheme information from the rebar control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetColorScheme( $hWnd )"/>
          <Keyword text="_GUICtrlRebar_GetRowCount" descr="_GUICtrlRebar_GetRowCount( $hWnd )\n\iRetrieves the number of rows of bands in a rebar control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetRowCount( $hWnd )"/>
          <Keyword text="_GUICtrlRebar_GetRowHeight" descr="_GUICtrlRebar_GetRowHeight( $hWnd , $iIndex )\n\iRetrieves the height of a specified row in a rebar control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetRowHeight( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_GetTextColor" descr="_GUICtrlRebar_GetTextColor( $hWnd )\n\iRetrieves a rebar control&apos;s default text color (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetTextColor( $hWnd )"/>
          <Keyword text="_GUICtrlRebar_GetToolTips" descr="_GUICtrlRebar_GetToolTips( $hWnd )\n\iRetrieves the handle to any ToolTip control associated with the rebar control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetToolTips( $hWnd )"/>
          <Keyword text="_GUICtrlRebar_GetUnicodeFormat" descr="_GUICtrlRebar_GetUnicodeFormat( $hWnd )\n\iRetrieves the Unicode character format flag for the control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_GetUnicodeFormat( $hWnd )"/>
          <Keyword text="_GUICtrlRebar_HitTest" descr="_GUICtrlRebar_HitTest( $hWnd , $iX = -1 , $iY = -1 )\n\iDetermines which item is at a specified position (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_HitTest( $hWnd , $iX = -1 , $iY = -1 )"/>
          <Keyword text="_GUICtrlRebar_IDToIndex" descr="_GUICtrlRebar_IDToIndex( $hWnd , $iID )\n\iConverts a band identifier to a band index in a rebar control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_IDToIndex( $hWnd , $iID )"/>
          <Keyword text="_GUICtrlRebar_MaximizeBand" descr="_GUICtrlRebar_MaximizeBand( $hWnd , $iIndex , $fIdeal = True )\n\iResizes a band in a rebar control to either its ideal or largest size (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_MaximizeBand( $hWnd , $iIndex , $fIdeal = True )"/>
          <Keyword text="_GUICtrlRebar_MinimizeBand" descr="_GUICtrlRebar_MinimizeBand( $hWnd , $iIndex )\n\iResizes a band in a rebar control to its smallest size (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_MinimizeBand( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlRebar_MoveBand" descr="_GUICtrlRebar_MoveBand( $hWnd , $iIndexFrom , $iIndexTo )\n\iMoves a band from one index to another (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_MoveBand( $hWnd , $iIndexFrom , $iIndexTo )"/>
          <Keyword text="_GUICtrlRebar_SetBKColor" descr="_GUICtrlRebar_SetBKColor( $hWnd , $iColor )\n\iSets the default background color of a rebar control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetBKColor( $hWnd , $iColor )"/>
          <Keyword text="_GUICtrlRebar_SetBandBackColor" descr="_GUICtrlRebar_SetBandBackColor( $hWnd , $iIndex , $iColor )\n\iSet the Band background color (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetBandBackColor( $hWnd , $iIndex , $iColor )"/>
          <Keyword text="_GUICtrlRebar_SetBandForeColor" descr="_GUICtrlRebar_SetBandForeColor( $hWnd , $iIndex , $iColor )\n\iSet the Band foreground color (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetBandForeColor( $hWnd , $iIndex , $iColor )"/>
          <Keyword text="_GUICtrlRebar_SetBandHeaderSize" descr="_GUICtrlRebar_SetBandHeaderSize( $hWnd , $iIndex , $iNewSize )\n\iSet the size of the band&apos;s header, in pixels (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetBandHeaderSize( $hWnd , $iIndex , $iNewSize )"/>
          <Keyword text="_GUICtrlRebar_SetBandID" descr="_GUICtrlRebar_SetBandID( $hWnd , $iIndex , $iID )\n\iSet the value that the control uses to identify this band for custom draw notification messages (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetBandID( $hWnd , $iIndex , $iID )"/>
          <Keyword text="_GUICtrlRebar_SetBandIdealSize" descr="_GUICtrlRebar_SetBandIdealSize( $hWnd , $iIndex , $iNewSize )\n\iSet Ideal width of the band, in pixels. (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetBandIdealSize( $hWnd , $iIndex , $iNewSize )"/>
          <Keyword text="_GUICtrlRebar_SetBandLParam" descr="_GUICtrlRebar_SetBandLParam( $hWnd , $iIndex , $ilParam )\n\iSet Application-defined value (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetBandLParam( $hWnd , $iIndex , $ilParam )"/>
          <Keyword text="_GUICtrlRebar_SetBandLength" descr="_GUICtrlRebar_SetBandLength( $hWnd , $iIndex , $icx )\n\iSet Application-defined value (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetBandLength( $hWnd , $iIndex , $icx )"/>
          <Keyword text="_GUICtrlRebar_SetBandStyle" descr="_GUICtrlRebar_SetBandStyle( $hWnd , $iIndex , $fStyle )\n\iSet the band style Flags (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetBandStyle( $hWnd , $iIndex , $fStyle )"/>
          <Keyword text="_GUICtrlRebar_SetBandStyleBreak" descr="_GUICtrlRebar_SetBandStyleBreak( $hWnd , $iIndex , $fEnabled = True )\n\iSet whether the band is on a new line (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetBandStyleBreak( $hWnd , $iIndex , $fEnabled = True )"/>
          <Keyword text="_GUICtrlRebar_SetBandStyleChildEdge" descr="_GUICtrlRebar_SetBandStyleChildEdge( $hWnd , $iIndex , $fEnabled = True )\n\iSet whether the band has an edge at the top and bottom of the child window (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetBandStyleChildEdge( $hWnd , $iIndex , $fEnabled = True )"/>
          <Keyword text="_GUICtrlRebar_SetBandStyleFixedBMP" descr="_GUICtrlRebar_SetBandStyleFixedBMP( $hWnd , $iIndex , $fEnabled = True )\n\iSet whether the band background bitmap does not move when the band is resized (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetBandStyleFixedBMP( $hWnd , $iIndex , $fEnabled = True )"/>
          <Keyword text="_GUICtrlRebar_SetBandStyleFixedSize" descr="_GUICtrlRebar_SetBandStyleFixedSize( $hWnd , $iIndex , $fEnabled = True )\n\iSet whether the band can&apos;t be sized. With this style, the sizing grip is not displayed on the band (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetBandStyleFixedSize( $hWnd , $iIndex , $fEnabled = True )"/>
          <Keyword text="_GUICtrlRebar_SetBandStyleGripperAlways" descr="_GUICtrlRebar_SetBandStyleGripperAlways( $hWnd , $iIndex , $fEnabled = True )\n\iSet whether the band will always have a sizing grip, even if it is the only band in the rebar (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetBandStyleGripperAlways( $hWnd , $iIndex , $fEnabled = True )"/>
          <Keyword text="_GUICtrlRebar_SetBandStyleHidden" descr="_GUICtrlRebar_SetBandStyleHidden( $hWnd , $iIndex , $fEnabled = True )\n\iSet whether the band will not be visible (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetBandStyleHidden( $hWnd , $iIndex , $fEnabled = True )"/>
          <Keyword text="_GUICtrlRebar_SetBandStyleHideTitle" descr="_GUICtrlRebar_SetBandStyleHideTitle( $hWnd , $iIndex , $fEnabled = True )\n\iSet whether to keep band title hidden (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetBandStyleHideTitle( $hWnd , $iIndex , $fEnabled = True )"/>
          <Keyword text="_GUICtrlRebar_SetBandStyleNoGripper" descr="_GUICtrlRebar_SetBandStyleNoGripper( $hWnd , $iIndex , $fEnabled = True )\n\iSet whether the band will never have a sizing grip, even if there is more than one band in the rebar (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetBandStyleNoGripper( $hWnd , $iIndex , $fEnabled = True )"/>
          <Keyword text="_GUICtrlRebar_SetBandStyleTopAlign" descr="_GUICtrlRebar_SetBandStyleTopAlign( $hWnd , $iIndex , $fEnabled = True )\n\iSet whether to keep band in top row (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetBandStyleTopAlign( $hWnd , $iIndex , $fEnabled = True )"/>
          <Keyword text="_GUICtrlRebar_SetBandStyleUseChevron" descr="_GUICtrlRebar_SetBandStyleUseChevron( $hWnd , $iIndex , $fEnabled = True )\n\iSet whether to display drop-down button (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetBandStyleUseChevron( $hWnd , $iIndex , $fEnabled = True )"/>
          <Keyword text="_GUICtrlRebar_SetBandStyleVariableHeight" descr="_GUICtrlRebar_SetBandStyleVariableHeight( $hWnd , $iIndex , $fEnabled = True )\n\iSet whether the band can be resized by the rebar control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetBandStyleVariableHeight( $hWnd , $iIndex , $fEnabled = True )"/>
          <Keyword text="_GUICtrlRebar_SetBandText" descr="_GUICtrlRebar_SetBandText( $hWnd , $iIndex , $sText )\n\iSets the display text for the band of a rebar control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetBandText( $hWnd , $iIndex , $sText )"/>
          <Keyword text="_GUICtrlRebar_SetBarInfo" descr="_GUICtrlRebar_SetBarInfo( $hWnd , $himl )\n\iSets the characteristics of a rebar control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetBarInfo( $hWnd , $himl )"/>
          <Keyword text="_GUICtrlRebar_SetColorScheme" descr="_GUICtrlRebar_SetColorScheme( $hWnd , $BtnHighlight , $BtnShadow )\n\iSets the color scheme of a rebar control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetColorScheme( $hWnd , $BtnHighlight , $BtnShadow )"/>
          <Keyword text="_GUICtrlRebar_SetTextColor" descr="_GUICtrlRebar_SetTextColor( $hWnd , $iColor )\n\iSets a rebar control&apos;s default text color (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetTextColor( $hWnd , $iColor )"/>
          <Keyword text="_GUICtrlRebar_SetToolTips" descr="_GUICtrlRebar_SetToolTips( $hWnd , $hToolTip )\n\iAssociates a ToolTip control with the rebar control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetToolTips( $hWnd , $hToolTip )"/>
          <Keyword text="_GUICtrlRebar_SetUnicodeFormat" descr="_GUICtrlRebar_SetUnicodeFormat( $hWnd , $fUnicode = True )\n\iSets the Unicode character format flag for the control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_SetUnicodeFormat( $hWnd , $fUnicode = True )"/>
          <Keyword text="_GUICtrlRebar_ShowBand" descr="_GUICtrlRebar_ShowBand( $hWnd , $iIndex , $fShow = True )\n\iShows or hides a given band in a rebar control (Requires: #include &lt;GuiReBar.au3&gt;)\i0" pattern="_GUICtrlRebar_ShowBand( $hWnd , $iIndex , $fShow = True )"/>
          <Keyword text="_GUICtrlRichEdit_AppendText" descr="_GUICtrlRichEdit_AppendText( $hWnd , $sText )\n\iAppends text at the end of the client area (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_AppendText( $hWnd , $sText )"/>
          <Keyword text="_GUICtrlRichEdit_AutoDetectURL" descr="_GUICtrlRichEdit_AutoDetectURL( $hWnd , $fState )\n\iEnables or disables automatic detection of URLS (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_AutoDetectURL( $hWnd , $fState )"/>
          <Keyword text="_GUICtrlRichEdit_CanPaste" descr="_GUICtrlRichEdit_CanPaste( $hWnd )\n\iCan the contents of the clipboard be pasted into the control? (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_CanPaste( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_CanPasteSpecial" descr="_GUICtrlRichEdit_CanPasteSpecial( $hWnd )\n\iCan the contents of the clipboard be pasted into the control in both formats? (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_CanPasteSpecial( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_CanRedo" descr="_GUICtrlRichEdit_CanRedo( $hWnd )\n\iCan an undone action be redone? (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_CanRedo( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_CanUndo" descr="_GUICtrlRichEdit_CanUndo( $hWnd )\n\iCan an action be undone? (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_CanUndo( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_ChangeFontSize" descr="_GUICtrlRichEdit_ChangeFontSize( $hWnd , $iIncrement )\n\iIncrement or decrement font size(s) of selected text (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_ChangeFontSize( $hWnd , $iIncrement )"/>
          <Keyword text="_GUICtrlRichEdit_Copy" descr="_GUICtrlRichEdit_Copy( $hWnd )\n\iCopy text to clipboard (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_Copy( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_Create" descr="_GUICtrlRichEdit_Create( $hWnd , $sText , $iLeft , $iTop , $iWidth = 150 , $iHeight = 150 , $iStyle = -1 , $iExStyle = -1 )\n\iCreate an Edit control (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_Create( $hWnd , $sText , $iLeft , $iTop , $iWidth = 150 , $iHeight = 150 , $iStyle = -1 , $iExStyle = -1 )"/>
          <Keyword text="_GUICtrlRichEdit_Cut" descr="_GUICtrlRichEdit_Cut( $hWnd )\n\iCut text to clipboard (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_Cut( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_Deselect" descr="_GUICtrlRichEdit_Deselect( $hWnd )\n\iDeselects text, leaving none selected (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_Deselect( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_Destroy" descr="_GUICtrlRichEdit_Destroy( ByRef $hWnd )\n\iDelete the Rich Edit control (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_Destroy( ByRef $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_EmptyUndoBuffer" descr="_GUICtrlRichEdit_EmptyUndoBuffer( $hWnd )\n\iResets the undo flag of the control (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_EmptyUndoBuffer( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_FindText" descr="_GUICtrlRichEdit_FindText( $hWnd , $sText , $fForward = True , $fMatchCase = False , $fWholeWord = False , $iBehavior = 0 )\n\iSearch for a text starting at insertion point or at anchor point of selection (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_FindText( $hWnd , $sText , $fForward = True , $fMatchCase = False , $fWholeWord = False , $iBehavior = 0 )"/>
          <Keyword text="_GUICtrlRichEdit_FindTextInRange" descr="_GUICtrlRichEdit_FindTextInRange( $hWnd , $sText , $iStart = 0 , $iEnd = -1 , $fMatchCase = False , $fwholeWord = False , $iBehavior = 0 )\n\iSearch for a text in a range of inter-character positions (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_FindTextInRange( $hWnd , $sText , $iStart = 0 , $iEnd = -1 , $fMatchCase = False , $fwholeWord = False , $iBehavior = 0 )"/>
          <Keyword text="_GUICtrlRichEdit_GetBkColor" descr="_GUICtrlRichEdit_GetBkColor( $hWnd )\n\iGets the background color of the control (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetBkColor( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_GetCharAttributes" descr="_GUICtrlRichEdit_GetCharAttributes( $hWnd )\n\iReturns attributes of selected text (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetCharAttributes( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_GetCharBkColor" descr="_GUICtrlRichEdit_GetCharBkColor( $hWnd )\n\iRetrieves the background color of the selected text or, if none selected, of the character to the right of the insertion point (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetCharBkColor( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_GetCharColor" descr="_GUICtrlRichEdit_GetCharColor( $hWnd )\n\iRetrieves the color of the selected text or, if none selected, of the character to the right of the insertion point (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetCharColor( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_GetCharPosFromXY" descr="_GUICtrlRichEdit_GetCharPosFromXY( $hWnd , $iX , $iY )\n\iGets inter-character position closest to a specified point in the client area (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetCharPosFromXY( $hWnd , $iX , $iY )"/>
          <Keyword text="_GUICtrlRichEdit_GetCharPosOfNextWord" descr="_GUICtrlRichEdit_GetCharPosOfNextWord( $hWnd , $iCpStart )\n\iGets inter-character position before the next word (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetCharPosOfNextWord( $hWnd , $iCpStart )"/>
          <Keyword text="_GUICtrlRichEdit_GetCharPosOfPreviousWord" descr="_GUICtrlRichEdit_GetCharPosOfPreviousWord( $hWnd , $iCpStart )\n\iGets inter-character position before the Previous word (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetCharPosOfPreviousWord( $hWnd , $iCpStart )"/>
          <Keyword text="_GUICtrlRichEdit_GetCharWordBreakInfo" descr="_GUICtrlRichEdit_GetCharWordBreakInfo( $hWnd , $iCp )\n\iGets inter-character position before the Previous word (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetCharWordBreakInfo( $hWnd , $iCp )"/>
          <Keyword text="_GUICtrlRichEdit_GetFirstCharPosOnLine" descr="_GUICtrlRichEdit_GetFirstCharPosOnLine( $hWnd , $iLine = -1 )\n\iRetrieves the inter-character position preceding the first character of a line (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetFirstCharPosOnLine( $hWnd , $iLine = -1 )"/>
          <Keyword text="_GUICtrlRichEdit_GetFont" descr="_GUICtrlRichEdit_GetFont( $hWnd )\n\iGets the font attributes of a selection or, if no selection, at the insertion point (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetFont( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_GetLineCount" descr="_GUICtrlRichEdit_GetLineCount( $hWnd )\n\iRetrieves the number of lines in a multi-line edit control (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetLineCount( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_GetLineLength" descr="_GUICtrlRichEdit_GetLineLength( $hWnd , $iLine )\n\iRetrieves the length of a line (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetLineLength( $hWnd , $iLine )"/>
          <Keyword text="_GUICtrlRichEdit_GetLineNumberFromCharPos" descr="_GUICtrlRichEdit_GetLineNumberFromCharPos( $hWnd , $iCharPos )\n\iRetrieves the line number on which an inter-character position is found (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetLineNumberFromCharPos( $hWnd , $iCharPos )"/>
          <Keyword text="_GUICtrlRichEdit_GetNextRedo" descr="_GUICtrlRichEdit_GetNextRedo( $hWnd , $fName = True )\n\iRetrieves the name or type ID of the next possible redo action (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetNextRedo( $hWnd , $fName = True )"/>
          <Keyword text="_GUICtrlRichEdit_GetNextUndo" descr="_GUICtrlRichEdit_GetNextUndo( $hWnd , $fName = True )\n\iRetrieves the name or type ID of the next possible Undo action (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetNextUndo( $hWnd , $fName = True )"/>
          <Keyword text="_GUICtrlRichEdit_GetNumberOfFirstVisibleLine" descr="_GUICtrlRichEdit_GetNumberOfFirstVisibleLine( $hWnd )\n\iGets number of the first line which is visible in the control (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetNumberOfFirstVisibleLine( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_GetParaAlignment" descr="_GUICtrlRichEdit_GetParaAlignment( $hWnd )\n\iGets the alignment of selected paragraph(s), or (if no selection) of the current paragraph (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetParaAlignment( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_GetParaAttributes" descr="_GUICtrlRichEdit_GetParaAttributes( $hWnd )\n\iGets the attributes of (first) selected paragraph or (if no selection) of the current paragraph (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetParaAttributes( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_GetParaBorder" descr="_GUICtrlRichEdit_GetParaBorder( $hWnd )\n\iGets the border settings of (first) selected paragraph or (if no selection) of the current paragraph (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetParaBorder( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_GetParaIndents" descr="_GUICtrlRichEdit_GetParaIndents( $hWnd )\n\iGets the border indent settings of (first) selected paragraph or (if no selection) of the current paragraph (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetParaIndents( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_GetParaNumbering" descr="_GUICtrlRichEdit_GetParaNumbering( $hWnd )\n\iGets the numbering style of (first) selected paragraph or (if no selection) of the current paragraph (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetParaNumbering( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_GetParaShading" descr="_GUICtrlRichEdit_GetParaShading( $hWnd )\n\iGets the shading settings of (first) selected paragraph or (if no selection) of the current paragraph (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetParaShading( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_GetParaSpacing" descr="_GUICtrlRichEdit_GetParaSpacing( $hWnd )\n\iGets the spacing settings of (first) selected paragraph or (if no selection) of the current paragraph (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetParaSpacing( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_GetParaTabStops" descr="_GUICtrlRichEdit_GetParaTabStops( $hWnd )\n\iGets the tabstops of (first) selected paragraph or (if no selection) of the current paragraph (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetParaTabStops( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_GetPasswordChar" descr="_GUICtrlRichEdit_GetPasswordChar( $hWnd )\n\iGets the password character that a rich edit control displays when the user enters text (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetPasswordChar( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_GetRECT" descr="_GUICtrlRichEdit_GetRECT( $hWnd )\n\iRetrieves the formatting rectangle of a control (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetRECT( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_GetScrollPos" descr="_GUICtrlRichEdit_GetScrollPos( $hWnd )\n\iGets the Scrolling position of the control (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetScrollPos( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_GetSel" descr="_GUICtrlRichEdit_GetSel( $hWnd )\n\iGets the low and high inter-character positions of a selection (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetSel( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_GetSelAA" descr="_GUICtrlRichEdit_GetSelAA( $hWnd )\n\iGets the anchor and active inter-character positions of a selection, in that order (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetSelAA( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_GetSelText" descr="_GUICtrlRichEdit_GetSelText( $hWnd )\n\iRetrieves the currently selected text (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetSelText( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_GetSpaceUnit" descr="_GUICtrlRichEdit_GetSpaceUnit()\n\iGets the unit of measure of horizontal and vertical space used in parameters of various _GUICtrlRichEdit functions (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetSpaceUnit()"/>
          <Keyword text="_GUICtrlRichEdit_GetText" descr="_GUICtrlRichEdit_GetText( $hWnd , $fCrToCrLf = False , $iCodePage = 0 , $sReplChar = &quot;&quot; )\n\iGet all of the text in the control (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetText( $hWnd , $fCrToCrLf = False , $iCodePage = 0 , $sReplChar = &quot;&quot; )"/>
          <Keyword text="_GUICtrlRichEdit_GetTextInLine" descr="_GUICtrlRichEdit_GetTextInLine( $hWnd , $iLine )\n\iGets a line of text (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetTextInLine( $hWnd , $iLine )"/>
          <Keyword text="_GUICtrlRichEdit_GetTextInRange" descr="_GUICtrlRichEdit_GetTextInRange( $hWnd , $iStart , $iEnd )\n\iGets the text from from one inter-character position to another (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetTextInRange( $hWnd , $iStart , $iEnd )"/>
          <Keyword text="_GUICtrlRichEdit_GetTextLength" descr="_GUICtrlRichEdit_GetTextLength( $hWnd , $fExact = True , $fChars = False )\n\iGet the length of the whole text in the control (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetTextLength( $hWnd , $fExact = True , $fChars = False )"/>
          <Keyword text="_GUICtrlRichEdit_GetVersion" descr="_GUICtrlRichEdit_GetVersion()\n\iRetrieves the version of Rich Edit (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetVersion()"/>
          <Keyword text="_GUICtrlRichEdit_GetXYFromCharPos" descr="_GUICtrlRichEdit_GetXYFromCharPos( $hWnd , $iCharPos )\n\iRetrieves the XY coordinates of an inter-character position (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetXYFromCharPos( $hWnd , $iCharPos )"/>
          <Keyword text="_GUICtrlRichEdit_GetZoom" descr="_GUICtrlRichEdit_GetZoom( $hWnd )\n\iGets the zoom level of the control (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GetZoom( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_GotoCharPos" descr="_GUICtrlRichEdit_GotoCharPos( $hWnd , $iCharPos )\n\iMoves the insertion point to an inter-character position (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_GotoCharPos( $hWnd , $iCharPos )"/>
          <Keyword text="_GUICtrlRichEdit_HideSelection" descr="_GUICtrlRichEdit_HideSelection( $hWnd , $fHide = True )\n\iHides (or shows) a selection (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_HideSelection( $hWnd , $fHide = True )"/>
          <Keyword text="_GUICtrlRichEdit_InsertText" descr="_GUICtrlRichEdit_InsertText( $hWnd , $sText )\n\iInserts text at insertion point or anchor point of selection (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_InsertText( $hWnd , $sText )"/>
          <Keyword text="_GUICtrlRichEdit_IsModified" descr="_GUICtrlRichEdit_IsModified( $hWnd )\n\iRetrieves the state of a rich edit control&apos;s modification flag (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_IsModified( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_IsTextSelected" descr="_GUICtrlRichEdit_IsTextSelected( $hWnd )\n\iIs text selected? (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_IsTextSelected( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_Paste" descr="_GUICtrlRichEdit_Paste( $hWnd )\n\iPaste RTF or RTF with Objects from clipboard (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_Paste( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_PasteSpecial" descr="_GUICtrlRichEdit_PasteSpecial( $hWnd , $fAndObjects = True )\n\iPaste RTF or RTF and Objects from clipboard (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_PasteSpecial( $hWnd , $fAndObjects = True )"/>
          <Keyword text="_GUICtrlRichEdit_PauseRedraw" descr="_GUICtrlRichEdit_PauseRedraw( $hWnd )\n\iPauses redrawing of the control (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_PauseRedraw( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_Redo" descr="_GUICtrlRichEdit_Redo( $hWnd )\n\iRedoes last undone action (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_Redo( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_ReplaceText" descr="_GUICtrlRichEdit_ReplaceText( $hWnd , $sText , $fCanUndo = True )\n\iReplaces selected text (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_ReplaceText( $hWnd , $sText , $fCanUndo = True )"/>
          <Keyword text="_GUICtrlRichEdit_ResumeRedraw" descr="_GUICtrlRichEdit_ResumeRedraw( $hWnd )\n\iResumes redrawing of the control (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_ResumeRedraw( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_ScrollLineOrPage" descr="_GUICtrlRichEdit_ScrollLineOrPage( $hWnd , $sAction )\n\iScrolls the text down or up a line or a page (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_ScrollLineOrPage( $hWnd , $sAction )"/>
          <Keyword text="_GUICtrlRichEdit_ScrollLines" descr="_GUICtrlRichEdit_ScrollLines( $hWnd , $iQlines )\n\iScrolls the text down or up a number of lines (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_ScrollLines( $hWnd , $iQlines )"/>
          <Keyword text="_GUICtrlRichEdit_ScrollToCaret" descr="_GUICtrlRichEdit_ScrollToCaret( $hWnd )\n\iScrolls to show line on which caret (insertion point) is (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_ScrollToCaret( $hWnd )"/>
          <Keyword text="_GUICtrlRichEdit_SetBkColor" descr="_GUICtrlRichEdit_SetBkColor( $hWnd , $iColor = Default )\n\iSets the background color of the control (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetBkColor( $hWnd , $iColor = Default )"/>
          <Keyword text="_GUICtrlRichEdit_SetCharAttributes" descr="_GUICtrlRichEdit_SetCharAttributes( $hWnd , $sStatesAndEffects , $fWord = False )\n\iTurns an attribute on or off for selected text or, if none selected, for text inserted at the insertion point (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetCharAttributes( $hWnd , $sStatesAndEffects , $fWord = False )"/>
          <Keyword text="_GUICtrlRichEdit_SetCharBkColor" descr="_GUICtrlRichEdit_SetCharBkColor( $hWnd , $iColor )\n\iSets the background color of selected text or, if none selected, sets the background color of text inserted at the insertion point (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetCharBkColor( $hWnd , $iColor )"/>
          <Keyword text="_GUICtrlRichEdit_SetCharColor" descr="_GUICtrlRichEdit_SetCharColor( $hWnd , $iColor )\n\iSets the color of selected text or, if none selected, sets the background color of text inserted at the insertion point (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetCharColor( $hWnd , $iColor )"/>
          <Keyword text="_GUICtrlRichEdit_SetEventMask" descr="_GUICtrlRichEdit_SetEventMask( $hWnd , $iEventMask )\n\iSpecifies which notification messages are sent to the parent window (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetEventMask( $hWnd , $iEventMask )"/>
          <Keyword text="_GUICtrlRichEdit_SetFont" descr="_GUICtrlRichEdit_SetFont( $hWnd , $iPoints = Default , $sName = Default , $iCharset = Default , $iLcid = Default )\n\iSets the font attributes of selected text or, if none selected, sets those of text inserted at the insertion point (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetFont( $hWnd , $iPoints = Default , $sName = Default , $iCharset = Default , $iLcid = Default )"/>
          <Keyword text="_GUICtrlRichEdit_SetLimitOnText" descr="_GUICtrlRichEdit_SetLimitOnText( $hWnd , $iNewLimit )\n\iChange number of characters that can be typed, pasted or streamed in as Rich Text Format (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetLimitOnText( $hWnd , $iNewLimit )"/>
          <Keyword text="_GUICtrlRichEdit_SetModified" descr="_GUICtrlRichEdit_SetModified( $hWnd , $fState = True )\n\iSets or clears the modification flag (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetModified( $hWnd , $fState = True )"/>
          <Keyword text="_GUICtrlRichEdit_SetParaAlignment" descr="_GUICtrlRichEdit_SetParaAlignment( $hWnd , $sAlignment )\n\iSets alignment of paragraph(s) in the current selection or, if no selection, of paragraphs inserted at the insertion point (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetParaAlignment( $hWnd , $sAlignment )"/>
          <Keyword text="_GUICtrlRichEdit_SetParaAttributes" descr="_GUICtrlRichEdit_SetParaAttributes( $hWnd , $sStatesAndAtts )\n\iSets attributes of paragraph(s) in the current selection or, if no selection, of paragraphs inserted at the insertion point (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetParaAttributes( $hWnd , $sStatesAndAtts )"/>
          <Keyword text="_GUICtrlRichEdit_SetParaBorder" descr="_GUICtrlRichEdit_SetParaBorder( $hWnd , $sLocation , $vLineStyle , $sColor , $iSpace )\n\iSets the border of paragraph(s) in the current selection or, if no selection, of paragraphs inserted at the insertion point (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetParaBorder( $hWnd , $sLocation , $vLineStyle , $sColor , $iSpace )"/>
          <Keyword text="_GUICtrlRichEdit_SetParaIndents" descr="_GUICtrlRichEdit_SetParaIndents( $hWnd , $vLeft = Default , $iRight = Default , $iFirstLine = Default )\n\iSets indents of paragraph(s) in the current selection or, if no selection, of paragraphs inserted at the insertion point (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetParaIndents( $hWnd , $vLeft = Default , $iRight = Default , $iFirstLine = Default )"/>
          <Keyword text="_GUICtrlRichEdit_SetParaNumbering" descr="_GUICtrlRichEdit_SetParaNumbering( $hWnd , $sStyle , $iTextToNbrSpace = Default , $fForceRoman=False )\n\iSets numbering of paragraph(s) in the current selection or, if no selection, of paragraph(s) inserted at the insertion point (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetParaNumbering( $hWnd , $sStyle , $iTextToNbrSpace = Default , $fForceRoman=False )"/>
          <Keyword text="_GUICtrlRichEdit_SetParaShading" descr="_GUICtrlRichEdit_SetParaShading( $hWnd , $iWeight = Default , $sStyle = Default , $sForeColor = Default , $sBackColor = Default )\n\iSets the shading of paragraph(s) in the current selection or, if no selection, of paragraphs inserted at the insertion point (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetParaShading( $hWnd , $iWeight = Default , $sStyle = Default , $sForeColor = Default , $sBackColor = Default )"/>
          <Keyword text="_GUICtrlRichEdit_SetParaSpacing" descr="_GUICtrlRichEdit_SetParaSpacing( $hWnd , $vInter=Default , $iBefore=Default , $iAfter=Default )\n\iSets paragraph spacing of paragraphs having selected text or, if none selected, sets it for text inserted at the insertion point (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetParaSpacing( $hWnd , $vInter=Default , $iBefore=Default , $iAfter=Default )"/>
          <Keyword text="_GUICtrlRichEdit_SetParaTabStops" descr="_GUICtrlRichEdit_SetParaTabStops( $hWnd , $sTabStops )\n\iSets tab stops of paragraphs having selected text or, if none selected, sets it for text inserted at the insertion point (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetParaTabStops( $hWnd , $sTabStops )"/>
          <Keyword text="_GUICtrlRichEdit_SetPasswordChar" descr="_GUICtrlRichEdit_SetPasswordChar( $hWnd , $cDisplayChar = &quot;0&quot; )\n\iSets the characters to be displayed instead of those typed, or causes typed characters to show (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetPasswordChar( $hWnd , $cDisplayChar = &quot;0&quot; )"/>
          <Keyword text="_GUICtrlRichEdit_SetRECT" descr="_GUICtrlRichEdit_SetRECT( $hWnd , $iLeft = Default , $iTop = Default , $iRight = Default , $iBottom = Default , $bRedraw = True )\n\iSets or clears the modification flag (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetRECT( $hWnd , $iLeft = Default , $iTop = Default , $iRight = Default , $iBottom = Default , $bRedraw = True )"/>
          <Keyword text="_GUICtrlRichEdit_SetReadOnly" descr="_GUICtrlRichEdit_SetReadOnly( $hWnd , $fState = True )\n\iSets or removes the read-only state (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetReadOnly( $hWnd , $fState = True )"/>
          <Keyword text="_GUICtrlRichEdit_SetScrollPos" descr="_GUICtrlRichEdit_SetScrollPos( $hWnd , $iX , $iY )\n\iScrolls the display such that ($ix,$iY) is in the upper left corner of the control (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetScrollPos( $hWnd , $iX , $iY )"/>
          <Keyword text="_GUICtrlRichEdit_SetSel" descr="_GUICtrlRichEdit_SetSel( $hWnd , $iAnchor , $iActive , $fHideSel = False )\n\iSets the low and high character position of a selection (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetSel( $hWnd , $iAnchor , $iActive , $fHideSel = False )"/>
          <Keyword text="_GUICtrlRichEdit_SetSpaceUnit" descr="_GUICtrlRichEdit_SetSpaceUnit( $sUnit )\n\iGets the unit of measure of horizontal and vertical space used in parameters of various _GUICtrlRichEdit functions (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetSpaceUnit( $sUnit )"/>
          <Keyword text="_GUICtrlRichEdit_SetTabStops" descr="_GUICtrlRichEdit_SetTabStops( $hWnd , $vTabStops , $fRedraw = True )\n\iSets tab stops for the control (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetTabStops( $hWnd , $vTabStops , $fRedraw = True )"/>
          <Keyword text="_GUICtrlRichEdit_SetText" descr="_GUICtrlRichEdit_SetText( $hWnd , $sText )\n\iSets the text of a control (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetText( $hWnd , $sText )"/>
          <Keyword text="_GUICtrlRichEdit_SetUndoLimit" descr="_GUICtrlRichEdit_SetUndoLimit( $hWnd , $iLimit )\n\iSets the maximum number of actions that can stored in the undo queue (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetUndoLimit( $hWnd , $iLimit )"/>
          <Keyword text="_GUICtrlRichEdit_SetZoom" descr="_GUICtrlRichEdit_SetZoom( $hWnd , $iPercent )\n\iSets zoom level of the control (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_SetZoom( $hWnd , $iPercent )"/>
          <Keyword text="_GUICtrlRichEdit_StreamFromFile" descr="_GUICtrlRichEdit_StreamFromFile( $hWnd , $sFilespec )\n\iSets text in a control from a file (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_StreamFromFile( $hWnd , $sFilespec )"/>
          <Keyword text="_GUICtrlRichEdit_StreamFromVar" descr="_GUICtrlRichEdit_StreamFromVar( $hWnd , $sVar )\n\iSets text in a control from a variable (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_StreamFromVar( $hWnd , $sVar )"/>
          <Keyword text="_GUICtrlRichEdit_StreamToFile" descr="_GUICtrlRichEdit_StreamToFile( $hWnd , $sFilespec , $fIncludeCOM=True , $iOpts=0 , $iCodePage = 0 )\n\iWrites contens of a control to a file (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_StreamToFile( $hWnd , $sFilespec , $fIncludeCOM=True , $iOpts=0 , $iCodePage = 0 )"/>
          <Keyword text="_GUICtrlRichEdit_StreamToVar" descr="_GUICtrlRichEdit_StreamToVar( $hWnd , $fRtf = True , $fIncludeCOM=True , $iOpts=0 , $iCodePage = 0 )\n\iWrites contents of a control to a variable (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_StreamToVar( $hWnd , $fRtf = True , $fIncludeCOM=True , $iOpts=0 , $iCodePage = 0 )"/>
          <Keyword text="_GUICtrlRichEdit_Undo" descr="_GUICtrlRichEdit_Undo( $hWnd )\n\iUndoes the last edit control operation in the control&apos;s undo queue (Requires: #include &lt;GuiRichEdit.au3&gt;)\i0" pattern="_GUICtrlRichEdit_Undo( $hWnd )"/>
          <Keyword text="_GUICtrlSlider_ClearSel" descr="_GUICtrlSlider_ClearSel( $hWnd )\n\iClears the current selection range (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_ClearSel( $hWnd )"/>
          <Keyword text="_GUICtrlSlider_ClearTics" descr="_GUICtrlSlider_ClearTics( $hWnd )\n\iRemoves the current tick marks from a slider (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_ClearTics( $hWnd )"/>
          <Keyword text="_GUICtrlSlider_Create" descr="_GUICtrlSlider_Create( $hWnd , $iX , $iY , $iWidth = 100 , $iHeight = 20 , $iStyle = 0x0001 , $iExStyle = 0x00000000 )\n\iCreate a Slider control (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_Create( $hWnd , $iX , $iY , $iWidth = 100 , $iHeight = 20 , $iStyle = 0x0001 , $iExStyle = 0x00000000 )"/>
          <Keyword text="_GUICtrlSlider_Destroy" descr="_GUICtrlSlider_Destroy( ByRef $hWnd )\n\iDelete the control (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_Destroy( ByRef $hWnd )"/>
          <Keyword text="_GUICtrlSlider_GetBuddy" descr="_GUICtrlSlider_GetBuddy( $hWnd , $fLocation )\n\iRetrieves the handle to a slider control buddy window at a given location (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_GetBuddy( $hWnd , $fLocation )"/>
          <Keyword text="_GUICtrlSlider_GetChannelRect" descr="_GUICtrlSlider_GetChannelRect( $hWnd )\n\iRetrieves the size and position of the bounding rectangle for a sliders&apos;s channel (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_GetChannelRect( $hWnd )"/>
          <Keyword text="_GUICtrlSlider_GetChannelRectEx" descr="_GUICtrlSlider_GetChannelRectEx( $hWnd )\n\iRetrieves the size and position of the bounding rectangle for a sliders&apos;s channel (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_GetChannelRectEx( $hWnd )"/>
          <Keyword text="_GUICtrlSlider_GetLineSize" descr="_GUICtrlSlider_GetLineSize( $hWnd )\n\iRetrieves the number of logical positions the slider moves (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_GetLineSize( $hWnd )"/>
          <Keyword text="_GUICtrlSlider_GetLogicalTics" descr="_GUICtrlSlider_GetLogicalTics( $hWnd )\n\iRetrieves an array that contains the logical positions of the tick marks for a slider (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_GetLogicalTics( $hWnd )"/>
          <Keyword text="_GUICtrlSlider_GetNumTics" descr="_GUICtrlSlider_GetNumTics( $hWnd )\n\iRetrieves the number of tick marks from a slider (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_GetNumTics( $hWnd )"/>
          <Keyword text="_GUICtrlSlider_GetPageSize" descr="_GUICtrlSlider_GetPageSize( $hWnd )\n\iRetrieves the number of logical positions the slider moves (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_GetPageSize( $hWnd )"/>
          <Keyword text="_GUICtrlSlider_GetPos" descr="_GUICtrlSlider_GetPos( $hWnd )\n\iRetrieves the logical position the slider (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_GetPos( $hWnd )"/>
          <Keyword text="_GUICtrlSlider_GetRange" descr="_GUICtrlSlider_GetRange( $hWnd )\n\iRetrieves the maximum and minimum position for the slider (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_GetRange( $hWnd )"/>
          <Keyword text="_GUICtrlSlider_GetRangeMax" descr="_GUICtrlSlider_GetRangeMax( $hWnd )\n\iRetrieves the maximum position for the slider (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_GetRangeMax( $hWnd )"/>
          <Keyword text="_GUICtrlSlider_GetRangeMin" descr="_GUICtrlSlider_GetRangeMin( $hWnd )\n\iRetrieves the minimum position for the slider (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_GetRangeMin( $hWnd )"/>
          <Keyword text="_GUICtrlSlider_GetSel" descr="_GUICtrlSlider_GetSel( $hWnd )\n\iRetrieves the ending and starting position of the current selection range (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_GetSel( $hWnd )"/>
          <Keyword text="_GUICtrlSlider_GetSelEnd" descr="_GUICtrlSlider_GetSelEnd( $hWnd )\n\iRetrieves the ending position of the current selection range (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_GetSelEnd( $hWnd )"/>
          <Keyword text="_GUICtrlSlider_GetSelStart" descr="_GUICtrlSlider_GetSelStart( $hWnd )\n\iRetrieves the starting position of the current selection range (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_GetSelStart( $hWnd )"/>
          <Keyword text="_GUICtrlSlider_GetThumbLength" descr="_GUICtrlSlider_GetThumbLength( $hWnd )\n\iRetrieves the length of the slider (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_GetThumbLength( $hWnd )"/>
          <Keyword text="_GUICtrlSlider_GetThumbRect" descr="_GUICtrlSlider_GetThumbRect( $hWnd )\n\iRetrieves the size and position of the bounding rectangle for the slider (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_GetThumbRect( $hWnd )"/>
          <Keyword text="_GUICtrlSlider_GetThumbRectEx" descr="_GUICtrlSlider_GetThumbRectEx( $hWnd )\n\iRetrieves the size and position of the bounding rectangle for the slider (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_GetThumbRectEx( $hWnd )"/>
          <Keyword text="_GUICtrlSlider_GetTic" descr="_GUICtrlSlider_GetTic( $hWnd , $iTic )\n\iRetrieves the logical position of a tick mark (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_GetTic( $hWnd , $iTic )"/>
          <Keyword text="_GUICtrlSlider_GetTicPos" descr="_GUICtrlSlider_GetTicPos( $hWnd , $iTic )\n\iRetrieves the current physical position of a tick mark (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_GetTicPos( $hWnd , $iTic )"/>
          <Keyword text="_GUICtrlSlider_GetToolTips" descr="_GUICtrlSlider_GetToolTips( $hWnd )\n\iRetrieves the handle to the ToolTip control assigned to the slider, if any. (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_GetToolTips( $hWnd )"/>
          <Keyword text="_GUICtrlSlider_GetUnicodeFormat" descr="_GUICtrlSlider_GetUnicodeFormat( $hWnd )\n\iRetrieves the Unicode character format flag for the control (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_GetUnicodeFormat( $hWnd )"/>
          <Keyword text="_GUICtrlSlider_SetBuddy" descr="_GUICtrlSlider_SetBuddy( $hWnd , $fLocation , $hBuddy )\n\iAssigns a window as the buddy window for a slider control (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_SetBuddy( $hWnd , $fLocation , $hBuddy )"/>
          <Keyword text="_GUICtrlSlider_SetLineSize" descr="_GUICtrlSlider_SetLineSize( $hWnd , $iLineSize )\n\iSets the number of logical positions the slider moves (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_SetLineSize( $hWnd , $iLineSize )"/>
          <Keyword text="_GUICtrlSlider_SetPageSize" descr="_GUICtrlSlider_SetPageSize( $hWnd , $iPageSize )\n\iSets the number of logical positions the slider moves (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_SetPageSize( $hWnd , $iPageSize )"/>
          <Keyword text="_GUICtrlSlider_SetPos" descr="_GUICtrlSlider_SetPos( $hWnd , $iPosition )\n\iSets the current logical position of the slider (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_SetPos( $hWnd , $iPosition )"/>
          <Keyword text="_GUICtrlSlider_SetRange" descr="_GUICtrlSlider_SetRange( $hWnd , $iMinimum , $iMaximum )\n\iSets the range of minimum and maximum logical positions for the slider (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_SetRange( $hWnd , $iMinimum , $iMaximum )"/>
          <Keyword text="_GUICtrlSlider_SetRangeMax" descr="_GUICtrlSlider_SetRangeMax( $hWnd , $iMaximum )\n\iSets the maximum logical position for the slider (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_SetRangeMax( $hWnd , $iMaximum )"/>
          <Keyword text="_GUICtrlSlider_SetRangeMin" descr="_GUICtrlSlider_SetRangeMin( $hWnd , $iMinimum )\n\iSets the minimum logical position for the slider (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_SetRangeMin( $hWnd , $iMinimum )"/>
          <Keyword text="_GUICtrlSlider_SetSel" descr="_GUICtrlSlider_SetSel( $hWnd , $iMinimum , $iMaximum )\n\iSets the starting and ending positions for the available selection range (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_SetSel( $hWnd , $iMinimum , $iMaximum )"/>
          <Keyword text="_GUICtrlSlider_SetSelEnd" descr="_GUICtrlSlider_SetSelEnd( $hWnd , $iMaximum )\n\iSets the ending logical position of the current selection range (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_SetSelEnd( $hWnd , $iMaximum )"/>
          <Keyword text="_GUICtrlSlider_SetSelStart" descr="_GUICtrlSlider_SetSelStart( $hWnd , $iMinimum )\n\iSets the starting logical position of the current selection range (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_SetSelStart( $hWnd , $iMinimum )"/>
          <Keyword text="_GUICtrlSlider_SetThumbLength" descr="_GUICtrlSlider_SetThumbLength( $hWnd , $iLength )\n\iSets the length of the slider (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_SetThumbLength( $hWnd , $iLength )"/>
          <Keyword text="_GUICtrlSlider_SetTic" descr="_GUICtrlSlider_SetTic( $hWnd , $iPosition )\n\iSets a tick mark in a slider at the specified logical position (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_SetTic( $hWnd , $iPosition )"/>
          <Keyword text="_GUICtrlSlider_SetTicFreq" descr="_GUICtrlSlider_SetTicFreq( $hWnd , $iFreg )\n\iSets the interval frequency for tick marks in a slider (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_SetTicFreq( $hWnd , $iFreg )"/>
          <Keyword text="_GUICtrlSlider_SetTipSide" descr="_GUICtrlSlider_SetTipSide( $hWnd , $fLocation )\n\iPositions a ToolTip control (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_SetTipSide( $hWnd , $fLocation )"/>
          <Keyword text="_GUICtrlSlider_SetToolTips" descr="_GUICtrlSlider_SetToolTips( $hWnd , $hWndTT )\n\iAssigns a ToolTip control to a slider control (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_SetToolTips( $hWnd , $hWndTT )"/>
          <Keyword text="_GUICtrlSlider_SetUnicodeFormat" descr="_GUICtrlSlider_SetUnicodeFormat( $hWnd , $fUnicode )\n\iSets the Unicode character format flag for the control (Requires: #include &lt;GuiSlider.au3&gt;)\i0" pattern="_GUICtrlSlider_SetUnicodeFormat( $hWnd , $fUnicode )"/>
          <Keyword text="_GUICtrlStatusBar_Create" descr="_GUICtrlStatusBar_Create( $hWnd , $vPartEdge = -1 , $vPartText = &quot;&quot; , $iStyles = -1 , $iExStyles = 0x00000000 )\n\iCreate a statusbar (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_Create( $hWnd , $vPartEdge = -1 , $vPartText = &quot;&quot; , $iStyles = -1 , $iExStyles = 0x00000000 )"/>
          <Keyword text="_GUICtrlStatusBar_Destroy" descr="_GUICtrlStatusBar_Destroy( ByRef $hWnd )\n\iDelete the control (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_Destroy( ByRef $hWnd )"/>
          <Keyword text="_GUICtrlStatusBar_EmbedControl" descr="_GUICtrlStatusBar_EmbedControl( $hWnd , $iPart , $hControl , $iFit = 4 )\n\iEmbeds a child control in the control (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_EmbedControl( $hWnd , $iPart , $hControl , $iFit = 4 )"/>
          <Keyword text="_GUICtrlStatusBar_GetBorders" descr="_GUICtrlStatusBar_GetBorders( $hWnd )\n\iRetrieves the current widths of the horizontal and vertical borders (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_GetBorders( $hWnd )"/>
          <Keyword text="_GUICtrlStatusBar_GetBordersHorz" descr="_GUICtrlStatusBar_GetBordersHorz( $hWnd )\n\iRetrieves the current width of the horizontal border (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_GetBordersHorz( $hWnd )"/>
          <Keyword text="_GUICtrlStatusBar_GetBordersRect" descr="_GUICtrlStatusBar_GetBordersRect( $hWnd )\n\iRetrieves the current width of the rectangle border (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_GetBordersRect( $hWnd )"/>
          <Keyword text="_GUICtrlStatusBar_GetBordersVert" descr="_GUICtrlStatusBar_GetBordersVert( $hWnd )\n\iRetrieves the current width of the vertical border (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_GetBordersVert( $hWnd )"/>
          <Keyword text="_GUICtrlStatusBar_GetCount" descr="_GUICtrlStatusBar_GetCount( $hWnd )\n\iRetrieves the number of parts (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_GetCount( $hWnd )"/>
          <Keyword text="_GUICtrlStatusBar_GetHeight" descr="_GUICtrlStatusBar_GetHeight( $hWnd )\n\iRetrieves the height of a part (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_GetHeight( $hWnd )"/>
          <Keyword text="_GUICtrlStatusBar_GetIcon" descr="_GUICtrlStatusBar_GetIcon( $hWnd , $iIndex = 0 )\n\iRetrieves the icon for a part (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_GetIcon( $hWnd , $iIndex = 0 )"/>
          <Keyword text="_GUICtrlStatusBar_GetParts" descr="_GUICtrlStatusBar_GetParts( $hWnd )\n\iRetrieves the number of parts and the part edges (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_GetParts( $hWnd )"/>
          <Keyword text="_GUICtrlStatusBar_GetRect" descr="_GUICtrlStatusBar_GetRect( $hWnd , $iPart )\n\iRetrieves the bounding rectangle of a part (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_GetRect( $hWnd , $iPart )"/>
          <Keyword text="_GUICtrlStatusBar_GetRectEx" descr="_GUICtrlStatusBar_GetRectEx( $hWnd , $iPart )\n\iRetrieves the bounding rectangle of a part (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_GetRectEx( $hWnd , $iPart )"/>
          <Keyword text="_GUICtrlStatusBar_GetText" descr="_GUICtrlStatusBar_GetText( $hWnd , $iPart )\n\iRetrieves the text from the specified part (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_GetText( $hWnd , $iPart )"/>
          <Keyword text="_GUICtrlStatusBar_GetTextFlags" descr="_GUICtrlStatusBar_GetTextFlags( $hWnd , $iPart )\n\iRetrieves the text length flags for a part (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_GetTextFlags( $hWnd , $iPart )"/>
          <Keyword text="_GUICtrlStatusBar_GetTextLength" descr="_GUICtrlStatusBar_GetTextLength( $hWnd , $iPart )\n\iRetrieves the length of a part text (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_GetTextLength( $hWnd , $iPart )"/>
          <Keyword text="_GUICtrlStatusBar_GetTextLengthEx" descr="_GUICtrlStatusBar_GetTextLengthEx( $hwnd , $iPart )\n\iRetrieves the uFlag of a part (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_GetTextLengthEx( $hwnd , $iPart )"/>
          <Keyword text="_GUICtrlStatusBar_GetTipText" descr="_GUICtrlStatusBar_GetTipText( $hWnd , $iPart )\n\iRetrieves the ToolTip text for a part (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_GetTipText( $hWnd , $iPart )"/>
          <Keyword text="_GUICtrlStatusBar_GetUnicodeFormat" descr="_GUICtrlStatusBar_GetUnicodeFormat( $hWnd )\n\iRetrieves the Unicode character format flag (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_GetUnicodeFormat( $hWnd )"/>
          <Keyword text="_GUICtrlStatusBar_GetWidth" descr="_GUICtrlStatusBar_GetWidth( $hWnd , $iPart )\n\iRetrieves the width of a part (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_GetWidth( $hWnd , $iPart )"/>
          <Keyword text="_GUICtrlStatusBar_IsSimple" descr="_GUICtrlStatusBar_IsSimple( $hWnd )\n\iChecks a status bar control to determine if it is in simple mode (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_IsSimple( $hWnd )"/>
          <Keyword text="_GUICtrlStatusBar_Resize" descr="_GUICtrlStatusBar_Resize( $hWnd )\n\iCauses the status bar to resize itself (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_Resize( $hWnd )"/>
          <Keyword text="_GUICtrlStatusBar_SetBkColor" descr="_GUICtrlStatusBar_SetBkColor( $hWnd , $iColor )\n\iSets the background color (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_SetBkColor( $hWnd , $iColor )"/>
          <Keyword text="_GUICtrlStatusBar_SetIcon" descr="_GUICtrlStatusBar_SetIcon( $hWnd , $iPart , $hIcon = -1 , $sIconFile = &quot;&quot; )\n\iSets the icon for a part (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_SetIcon( $hWnd , $iPart , $hIcon = -1 , $sIconFile = &quot;&quot; )"/>
          <Keyword text="_GUICtrlStatusBar_SetMinHeight" descr="_GUICtrlStatusBar_SetMinHeight( $hWnd , $iMinHeight )\n\iSets the minimum height of a status window&apos;s drawing area (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_SetMinHeight( $hWnd , $iMinHeight )"/>
          <Keyword text="_GUICtrlStatusBar_SetParts" descr="_GUICtrlStatusBar_SetParts( $hWnd , $iaParts = -1 , $iaPartWidth = 25 )\n\iSets the number of parts and the part edges (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_SetParts( $hWnd , $iaParts = -1 , $iaPartWidth = 25 )"/>
          <Keyword text="_GUICtrlStatusBar_SetSimple" descr="_GUICtrlStatusBar_SetSimple( $hWnd , $fSimple = True )\n\iSpecifies whether a status window displays simple text or displays all window parts (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_SetSimple( $hWnd , $fSimple = True )"/>
          <Keyword text="_GUICtrlStatusBar_SetText" descr="_GUICtrlStatusBar_SetText( $hWnd , $sText = &quot;&quot; , $iPart = 0 , $iUFlag = 0 )\n\iSets the text in the specified part of a status window (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_SetText( $hWnd , $sText = &quot;&quot; , $iPart = 0 , $iUFlag = 0 )"/>
          <Keyword text="_GUICtrlStatusBar_SetTipText" descr="_GUICtrlStatusBar_SetTipText( $hWnd , $iPart , $sText )\n\iSets the ToolTip text for a part (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_SetTipText( $hWnd , $iPart , $sText )"/>
          <Keyword text="_GUICtrlStatusBar_SetUnicodeFormat" descr="_GUICtrlStatusBar_SetUnicodeFormat( $hWnd , $fUnicode = True )\n\iSets the Unicode character format flag (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_SetUnicodeFormat( $hWnd , $fUnicode = True )"/>
          <Keyword text="_GUICtrlStatusBar_ShowHide" descr="_GUICtrlStatusBar_ShowHide( $hWnd , $iState )\n\iShow/Hide the StatusBar control (Requires: #include &lt;GuiStatusBar.au3&gt;)\i0" pattern="_GUICtrlStatusBar_ShowHide( $hWnd , $iState )"/>
          <Keyword text="_GUICtrlTab_ActivateTab" descr="_GUICtrlTab_ActivateTab( $hWnd , $iIndex )\n\iActivates a tab by its index (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_ActivateTab( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlTab_ClickTab" descr="_GUICtrlTab_ClickTab( $hWnd , $iIndex , $sButton = &quot;left&quot; , $fMove = False , $iClicks = 1 , $iSpeed = 1 )\n\iClicks a tab (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_ClickTab( $hWnd , $iIndex , $sButton = &quot;left&quot; , $fMove = False , $iClicks = 1 , $iSpeed = 1 )"/>
          <Keyword text="_GUICtrlTab_Create" descr="_GUICtrlTab_Create( $hWnd , $iX , $iY , $iWidth=150 , $iHeight=150 , $iStyle=0x00000040 , $iExStyle=0x00000000 )\n\iCreate a TabControl control (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_Create( $hWnd , $iX , $iY , $iWidth=150 , $iHeight=150 , $iStyle=0x00000040 , $iExStyle=0x00000000 )"/>
          <Keyword text="_GUICtrlTab_DeleteAllItems" descr="_GUICtrlTab_DeleteAllItems( $hWnd )\n\iDeletes all tabs (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_DeleteAllItems( $hWnd )"/>
          <Keyword text="_GUICtrlTab_DeleteItem" descr="_GUICtrlTab_DeleteItem( $hWnd , $iIndex )\n\iDeletes a tab (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_DeleteItem( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlTab_DeselectAll" descr="_GUICtrlTab_DeselectAll( $hWnd , $fExclude = True )\n\iResets tabs, clearing any that were set to the pressed state (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_DeselectAll( $hWnd , $fExclude = True )"/>
          <Keyword text="_GUICtrlTab_Destroy" descr="_GUICtrlTab_Destroy( ByRef $hWnd )\n\iDelete the control (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_Destroy( ByRef $hWnd )"/>
          <Keyword text="_GUICtrlTab_FindTab" descr="_GUICtrlTab_FindTab( $hWnd , $sText , $fInStr = False , $iStart = 0 )\n\iSearches for a tab with the specific text (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_FindTab( $hWnd , $sText , $fInStr = False , $iStart = 0 )"/>
          <Keyword text="_GUICtrlTab_GetCurFocus" descr="_GUICtrlTab_GetCurFocus( $hWnd )\n\iReturns the index of the item that has the focus in a tab control (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_GetCurFocus( $hWnd )"/>
          <Keyword text="_GUICtrlTab_GetCurSel" descr="_GUICtrlTab_GetCurSel( $hWnd )\n\iDetermines the currently selected tab (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_GetCurSel( $hWnd )"/>
          <Keyword text="_GUICtrlTab_GetDisplayRect" descr="_GUICtrlTab_GetDisplayRect( $hWnd )\n\iRetrieves the display rectangle of the client area (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_GetDisplayRect( $hWnd )"/>
          <Keyword text="_GUICtrlTab_GetDisplayRectEx" descr="_GUICtrlTab_GetDisplayRectEx( $hWnd )\n\iRetrieves the display rectangle of the client area (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_GetDisplayRectEx( $hWnd )"/>
          <Keyword text="_GUICtrlTab_GetExtendedStyle" descr="_GUICtrlTab_GetExtendedStyle( $hWnd )\n\iRetrieves the extended styles that are currently in use (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_GetExtendedStyle( $hWnd )"/>
          <Keyword text="_GUICtrlTab_GetImageList" descr="_GUICtrlTab_GetImageList( $hWnd )\n\iRetrieves the tab control image list (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_GetImageList( $hWnd )"/>
          <Keyword text="_GUICtrlTab_GetItem" descr="_GUICtrlTab_GetItem( $hWnd , $iIndex )\n\iRetrieves information about a tab (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_GetItem( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlTab_GetItemCount" descr="_GUICtrlTab_GetItemCount( $hWnd )\n\iRetrieves the number of tabs (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_GetItemCount( $hWnd )"/>
          <Keyword text="_GUICtrlTab_GetItemImage" descr="_GUICtrlTab_GetItemImage( $hWnd , $iIndex )\n\iRetrieves the image index for a tab (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_GetItemImage( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlTab_GetItemParam" descr="_GUICtrlTab_GetItemParam( $hWnd , $iIndex )\n\iRetrieves the param data for a tab (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_GetItemParam( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlTab_GetItemRect" descr="_GUICtrlTab_GetItemRect( $hWnd , $iIndex )\n\iRetrieves the bounding rectangle for a tab (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_GetItemRect( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlTab_GetItemRectEx" descr="_GUICtrlTab_GetItemRectEx( $hWnd , $iIndex )\n\iRetrieves the bounding rectangle for a tab (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_GetItemRectEx( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlTab_GetItemState" descr="_GUICtrlTab_GetItemState( $hWnd , $iIndex )\n\iRetrieves the state of a tab (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_GetItemState( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlTab_GetItemText" descr="_GUICtrlTab_GetItemText( $hWnd , $iIndex )\n\iRetrieves the text of a tab (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_GetItemText( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlTab_GetRowCount" descr="_GUICtrlTab_GetRowCount( $hWnd )\n\iRetrieves the current number of rows of tabs (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_GetRowCount( $hWnd )"/>
          <Keyword text="_GUICtrlTab_GetToolTips" descr="_GUICtrlTab_GetToolTips( $hWnd )\n\iRetrieves the handle to the ToolTip control associated with the control (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_GetToolTips( $hWnd )"/>
          <Keyword text="_GUICtrlTab_GetUnicodeFormat" descr="_GUICtrlTab_GetUnicodeFormat( $hWnd )\n\iRetrieves the Unicode character format flag for the control (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_GetUnicodeFormat( $hWnd )"/>
          <Keyword text="_GUICtrlTab_HighlightItem" descr="_GUICtrlTab_HighlightItem( $hWnd , $iIndex , $fHighlight = True )\n\iSets the highlight state of a tab item (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_HighlightItem( $hWnd , $iIndex , $fHighlight = True )"/>
          <Keyword text="_GUICtrlTab_HitTest" descr="_GUICtrlTab_HitTest( $hWnd , $iX , $iY )\n\iDetermines where a point lies control (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_HitTest( $hWnd , $iX , $iY )"/>
          <Keyword text="_GUICtrlTab_InsertItem" descr="_GUICtrlTab_InsertItem( $hWnd , $iIndex , $sText , $iImage = -1 , $iParam = 0 )\n\iInserts a new tab (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_InsertItem( $hWnd , $iIndex , $sText , $iImage = -1 , $iParam = 0 )"/>
          <Keyword text="_GUICtrlTab_RemoveImage" descr="_GUICtrlTab_RemoveImage( $hWnd , $iIndex )\n\iRemoves an image from the control&apos;s image list (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_RemoveImage( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlTab_SetCurFocus" descr="_GUICtrlTab_SetCurFocus( $hWnd , $iIndex )\n\iSets the focus to a specified tab (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_SetCurFocus( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlTab_SetCurSel" descr="_GUICtrlTab_SetCurSel( $hWnd , $iIndex )\n\iSelects a tab (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_SetCurSel( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlTab_SetExtendedStyle" descr="_GUICtrlTab_SetExtendedStyle( $hWnd , $iStyle )\n\iSets the extended styles that are currently in use (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_SetExtendedStyle( $hWnd , $iStyle )"/>
          <Keyword text="_GUICtrlTab_SetImageList" descr="_GUICtrlTab_SetImageList( $hWnd , $hImage )\n\iSets the image list associated with a tab control (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_SetImageList( $hWnd , $hImage )"/>
          <Keyword text="_GUICtrlTab_SetItem" descr="_GUICtrlTab_SetItem( $hWnd , $iIndex , $sText = -1 , $iState = -1 , $iImage = -1 , $iParam = -1 )\n\iSets information about a tab (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_SetItem( $hWnd , $iIndex , $sText = -1 , $iState = -1 , $iImage = -1 , $iParam = -1 )"/>
          <Keyword text="_GUICtrlTab_SetItemImage" descr="_GUICtrlTab_SetItemImage( $hWnd , $iIndex , $iImage )\n\iSets the image of a tab (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_SetItemImage( $hWnd , $iIndex , $iImage )"/>
          <Keyword text="_GUICtrlTab_SetItemParam" descr="_GUICtrlTab_SetItemParam( $hWnd , $iIndex , $iParam )\n\iSets the param data of a tab (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_SetItemParam( $hWnd , $iIndex , $iParam )"/>
          <Keyword text="_GUICtrlTab_SetItemSize" descr="_GUICtrlTab_SetItemSize( $hWnd , $iWidth , $iHeight )\n\iSets the width and height of tabs in a fixed width or owner drawn control (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_SetItemSize( $hWnd , $iWidth , $iHeight )"/>
          <Keyword text="_GUICtrlTab_SetItemState" descr="_GUICtrlTab_SetItemState( $hWnd , $iIndex , $iState )\n\iSets the state of a tab (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_SetItemState( $hWnd , $iIndex , $iState )"/>
          <Keyword text="_GUICtrlTab_SetItemText" descr="_GUICtrlTab_SetItemText( $hWnd , $iIndex , $sText )\n\iSets the text of a tab (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_SetItemText( $hWnd , $iIndex , $sText )"/>
          <Keyword text="_GUICtrlTab_SetMinTabWidth" descr="_GUICtrlTab_SetMinTabWidth( $hWnd , $iMinWidth )\n\iSets the minimum width of items in a tab control (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_SetMinTabWidth( $hWnd , $iMinWidth )"/>
          <Keyword text="_GUICtrlTab_SetPadding" descr="_GUICtrlTab_SetPadding( $hWnd , $iHorz , $iVert )\n\iSets the amount of space around each tab&apos;s icon and label (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_SetPadding( $hWnd , $iHorz , $iVert )"/>
          <Keyword text="_GUICtrlTab_SetToolTips" descr="_GUICtrlTab_SetToolTips( $hWnd , $hToolTip )\n\iSets the handle to the ToolTip control associated with the control (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_SetToolTips( $hWnd , $hToolTip )"/>
          <Keyword text="_GUICtrlTab_SetUnicodeFormat" descr="_GUICtrlTab_SetUnicodeFormat( $hWnd , $fUnicode )\n\iSets the Unicode character format flag for the control (Requires: #include &lt;GuiTab.au3&gt;)\i0" pattern="_GUICtrlTab_SetUnicodeFormat( $hWnd , $fUnicode )"/>
          <Keyword text="_GUICtrlToolbar_AddBitmap" descr="_GUICtrlToolbar_AddBitmap( $hWnd , $iButtons , $hInst , $iID )\n\iAdds images to the image list (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_AddBitmap( $hWnd , $iButtons , $hInst , $iID )"/>
          <Keyword text="_GUICtrlToolbar_AddButton" descr="_GUICtrlToolbar_AddButton( $hWnd , $iID , $iImage , $iString = 0 , $iStyle = 0 , $iState = 4 , $iParam = 0 )\n\iAdds a button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_AddButton( $hWnd , $iID , $iImage , $iString = 0 , $iStyle = 0 , $iState = 4 , $iParam = 0 )"/>
          <Keyword text="_GUICtrlToolbar_AddButtonSep" descr="_GUICtrlToolbar_AddButtonSep( $hWnd , $iWidth = 6 )\n\iAdds a separator (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_AddButtonSep( $hWnd , $iWidth = 6 )"/>
          <Keyword text="_GUICtrlToolbar_AddString" descr="_GUICtrlToolbar_AddString( $hWnd , $sString )\n\iAdds a new string to the toolbar&apos;s string pool (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_AddString( $hWnd , $sString )"/>
          <Keyword text="_GUICtrlToolbar_ButtonCount" descr="_GUICtrlToolbar_ButtonCount( $hWnd )\n\iRetrieves a count of the buttons (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_ButtonCount( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_CheckButton" descr="_GUICtrlToolbar_CheckButton( $hWnd , $iCommandID , $fCheck = True )\n\iChecks or unchecks a given button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_CheckButton( $hWnd , $iCommandID , $fCheck = True )"/>
          <Keyword text="_GUICtrlToolbar_ClickAccel" descr="_GUICtrlToolbar_ClickAccel( $hWnd , $cAccel , $sButton = &quot;left&quot; , $fMove = False , $iClicks = 1 , $iSpeed = 1 )\n\iClicks a specific button using it&apos;s accelerator (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_ClickAccel( $hWnd , $cAccel , $sButton = &quot;left&quot; , $fMove = False , $iClicks = 1 , $iSpeed = 1 )"/>
          <Keyword text="_GUICtrlToolbar_ClickButton" descr="_GUICtrlToolbar_ClickButton( $hWnd , $iCommandID , $sButton = &quot;left&quot; , $fMove = False , $iClicks = 1 , $iSpeed = 1 )\n\iClicks a specific button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_ClickButton( $hWnd , $iCommandID , $sButton = &quot;left&quot; , $fMove = False , $iClicks = 1 , $iSpeed = 1 )"/>
          <Keyword text="_GUICtrlToolbar_ClickIndex" descr="_GUICtrlToolbar_ClickIndex( $hWnd , $iIndex , $sButton = &quot;left&quot; , $fMove = False , $iClicks = 1 , $iSpeed = 1 )\n\iClicks a specific button using it&apos;s index (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_ClickIndex( $hWnd , $iIndex , $sButton = &quot;left&quot; , $fMove = False , $iClicks = 1 , $iSpeed = 1 )"/>
          <Keyword text="_GUICtrlToolbar_CommandToIndex" descr="_GUICtrlToolbar_CommandToIndex( $hWnd , $iCommandID )\n\iRetrieves the index for the button associated with the specified command identifier (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_CommandToIndex( $hWnd , $iCommandID )"/>
          <Keyword text="_GUICtrlToolbar_Create" descr="_GUICtrlToolbar_Create( $hWnd , $iStyle = 0x00000800 , $iExStyle = 0x00000000 )\n\iCreate a Toolbar control (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_Create( $hWnd , $iStyle = 0x00000800 , $iExStyle = 0x00000000 )"/>
          <Keyword text="_GUICtrlToolbar_Customize" descr="_GUICtrlToolbar_Customize( $hWnd )\n\iDisplays the Customize Toolbar dialog box (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_Customize( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_DeleteButton" descr="_GUICtrlToolbar_DeleteButton( $hWnd , $iCommandID )\n\iDeletes a button from the toolbar (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_DeleteButton( $hWnd , $iCommandID )"/>
          <Keyword text="_GUICtrlToolbar_Destroy" descr="_GUICtrlToolbar_Destroy( ByRef $hWnd )\n\iDelete the control (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_Destroy( ByRef $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_EnableButton" descr="_GUICtrlToolbar_EnableButton( $hWnd , $iCommandID , $fEnable = True )\n\iEnables or disables the specified button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_EnableButton( $hWnd , $iCommandID , $fEnable = True )"/>
          <Keyword text="_GUICtrlToolbar_FindToolbar" descr="_GUICtrlToolbar_FindToolbar( $hWnd , $sText )\n\iFinds a specific toolbar (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_FindToolbar( $hWnd , $sText )"/>
          <Keyword text="_GUICtrlToolbar_GetAnchorHighlight" descr="_GUICtrlToolbar_GetAnchorHighlight( $hWnd )\n\iRetrieves the anchor highlight setting (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetAnchorHighlight( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetBitmapFlags" descr="_GUICtrlToolbar_GetBitmapFlags( $hWnd )\n\iRetrieves the flags that describe the type of bitmap to be used (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetBitmapFlags( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetButtonBitmap" descr="_GUICtrlToolbar_GetButtonBitmap( $hWnd , $iCommandID )\n\iRetrieves the index of the bitmap associated with a button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetButtonBitmap( $hWnd , $iCommandID )"/>
          <Keyword text="_GUICtrlToolbar_GetButtonInfo" descr="_GUICtrlToolbar_GetButtonInfo( $hWnd , $iCommandID )\n\iRetrieves information for a button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetButtonInfo( $hWnd , $iCommandID )"/>
          <Keyword text="_GUICtrlToolbar_GetButtonInfoEx" descr="_GUICtrlToolbar_GetButtonInfoEx( $hWnd , $iCommandID )\n\iRetrieves information for a button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetButtonInfoEx( $hWnd , $iCommandID )"/>
          <Keyword text="_GUICtrlToolbar_GetButtonParam" descr="_GUICtrlToolbar_GetButtonParam( $hWnd , $iCommandID )\n\iRetrieves the button param value (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetButtonParam( $hWnd , $iCommandID )"/>
          <Keyword text="_GUICtrlToolbar_GetButtonRect" descr="_GUICtrlToolbar_GetButtonRect( $hWnd , $iCommandID )\n\iRetrieves the bounding rectangle for a button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetButtonRect( $hWnd , $iCommandID )"/>
          <Keyword text="_GUICtrlToolbar_GetButtonRectEx" descr="_GUICtrlToolbar_GetButtonRectEx( $hWnd , $iCommandID )\n\iRetrieves the bounding rectangle for a specified toolbar button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetButtonRectEx( $hWnd , $iCommandID )"/>
          <Keyword text="_GUICtrlToolbar_GetButtonSize" descr="_GUICtrlToolbar_GetButtonSize( $hWnd )\n\iRetrieves the current button width and height, in pixels (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetButtonSize( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetButtonState" descr="_GUICtrlToolbar_GetButtonState( $hWnd , $iCommandID )\n\iRetrieves information about the state of the specified button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetButtonState( $hWnd , $iCommandID )"/>
          <Keyword text="_GUICtrlToolbar_GetButtonStyle" descr="_GUICtrlToolbar_GetButtonStyle( $hWnd , $iCommandID )\n\iRetrieves the style flags of a button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetButtonStyle( $hWnd , $iCommandID )"/>
          <Keyword text="_GUICtrlToolbar_GetButtonText" descr="_GUICtrlToolbar_GetButtonText( $hWnd , $iCommandID )\n\iRetrieves the display text of a button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetButtonText( $hWnd , $iCommandID )"/>
          <Keyword text="_GUICtrlToolbar_GetColorScheme" descr="_GUICtrlToolbar_GetColorScheme( $hWnd )\n\iRetrieves the color scheme information (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetColorScheme( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetDisabledImageList" descr="_GUICtrlToolbar_GetDisabledImageList( $hWnd )\n\iRetrieves the disabled button image list (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetDisabledImageList( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetExtendedStyle" descr="_GUICtrlToolbar_GetExtendedStyle( $hWnd )\n\iRetrieves the extended styles (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetExtendedStyle( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetHotImageList" descr="_GUICtrlToolbar_GetHotImageList( $hWnd )\n\iRetrieves the hot button image list (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetHotImageList( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetHotItem" descr="_GUICtrlToolbar_GetHotItem( $hWnd )\n\iRetrieves the index of the hot item (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetHotItem( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetImageList" descr="_GUICtrlToolbar_GetImageList( $hWnd )\n\iRetrieves the default state image list (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetImageList( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetInsertMark" descr="_GUICtrlToolbar_GetInsertMark( $hWnd )\n\iRetrieves the current insertion mark (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetInsertMark( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetInsertMarkColor" descr="_GUICtrlToolbar_GetInsertMarkColor( $hWnd )\n\iRetrieves the color used to draw the insertion mark (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetInsertMarkColor( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetMaxSize" descr="_GUICtrlToolbar_GetMaxSize( $hWnd )\n\iRetrieves the total size of all of the visible buttons and separators (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetMaxSize( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetMetrics" descr="_GUICtrlToolbar_GetMetrics( $hWnd )\n\iRetrieves the metrics of a toolbar control (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetMetrics( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetPadding" descr="_GUICtrlToolbar_GetPadding( $hWnd )\n\iRetrieves the horizontal and vertical padding (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetPadding( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetRows" descr="_GUICtrlToolbar_GetRows( $hWnd )\n\iRetrieves the number of rows of buttons (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetRows( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetString" descr="_GUICtrlToolbar_GetString( $hWnd , $iIndex )\n\iRetrieves a string from the string pool (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetString( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlToolbar_GetStyle" descr="_GUICtrlToolbar_GetStyle( $hWnd )\n\iRetrieves the styles currently in use for a toolbar control (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetStyle( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetStyleAltDrag" descr="_GUICtrlToolbar_GetStyleAltDrag( $hWnd )\n\iIndicates that the control allows buttons to be dragged (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetStyleAltDrag( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetStyleCustomErase" descr="_GUICtrlToolbar_GetStyleCustomErase( $hWnd )\n\iIndicates that the control generates NM_CUSTOMDRAW notification messages (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetStyleCustomErase( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetStyleFlat" descr="_GUICtrlToolbar_GetStyleFlat( $hWnd )\n\iIndicates that the control is flat (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetStyleFlat( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetStyleList" descr="_GUICtrlToolbar_GetStyleList( $hWnd )\n\iIndicates that the control has button text to the right of the bitmap (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetStyleList( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetStyleRegisterDrop" descr="_GUICtrlToolbar_GetStyleRegisterDrop( $hWnd )\n\iIndicates that the control generates TBN_GETOBJECT notification messages (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetStyleRegisterDrop( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetStyleToolTips" descr="_GUICtrlToolbar_GetStyleToolTips( $hWnd )\n\iIndicates that the control has tooltips (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetStyleToolTips( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetStyleTransparent" descr="_GUICtrlToolbar_GetStyleTransparent( $hWnd )\n\iIndicates that the control is transparent (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetStyleTransparent( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetStyleWrapable" descr="_GUICtrlToolbar_GetStyleWrapable( $hWnd )\n\iIndicates that the control is wrapable (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetStyleWrapable( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetTextRows" descr="_GUICtrlToolbar_GetTextRows( $hWnd )\n\iRetrieves the maximum number of text rows that can be displayed on a button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetTextRows( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetToolTips" descr="_GUICtrlToolbar_GetToolTips( $hWnd )\n\iRetrieves the handle to the ToolTip control (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetToolTips( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_GetUnicodeFormat" descr="_GUICtrlToolbar_GetUnicodeFormat( $hWnd )\n\iRetrieves the Unicode character format flag (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_GetUnicodeFormat( $hWnd )"/>
          <Keyword text="_GUICtrlToolbar_HideButton" descr="_GUICtrlToolbar_HideButton( $hWnd , $iCommandID , $fHide = True )\n\iHides or shows the specified button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_HideButton( $hWnd , $iCommandID , $fHide = True )"/>
          <Keyword text="_GUICtrlToolbar_HighlightButton" descr="_GUICtrlToolbar_HighlightButton( $hWnd , $iCommandID , $fHighlight = True )\n\iSets the highlight state of a given button control (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_HighlightButton( $hWnd , $iCommandID , $fHighlight = True )"/>
          <Keyword text="_GUICtrlToolbar_HitTest" descr="_GUICtrlToolbar_HitTest( $hWnd , $iX , $iY )\n\iDetermines where a point lies within the control (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_HitTest( $hWnd , $iX , $iY )"/>
          <Keyword text="_GUICtrlToolbar_IndexToCommand" descr="_GUICtrlToolbar_IndexToCommand( $hWnd , $iIndex )\n\iRetrieves the command identifier associated with the button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_IndexToCommand( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlToolbar_InsertButton" descr="_GUICtrlToolbar_InsertButton( $hWnd , $iIndex , $iID , $iImage , $sText = &quot;&quot; , $iStyle = 0 , $iState = 4 , $iParam = 0 )\n\iInserts a button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_InsertButton( $hWnd , $iIndex , $iID , $iImage , $sText = &quot;&quot; , $iStyle = 0 , $iState = 4 , $iParam = 0 )"/>
          <Keyword text="_GUICtrlToolbar_InsertMarkHitTest" descr="_GUICtrlToolbar_InsertMarkHitTest( $hWnd , $iX , $iY )\n\iRetrieves the insertion mark information for a point (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_InsertMarkHitTest( $hWnd , $iX , $iY )"/>
          <Keyword text="_GUICtrlToolbar_IsButtonChecked" descr="_GUICtrlToolbar_IsButtonChecked( $hWnd , $iCommandID )\n\iIndicates whether the specified button is checked (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_IsButtonChecked( $hWnd , $iCommandID )"/>
          <Keyword text="_GUICtrlToolbar_IsButtonEnabled" descr="_GUICtrlToolbar_IsButtonEnabled( $hWnd , $iCommandID )\n\iIndicates whether the specified button is enabled (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_IsButtonEnabled( $hWnd , $iCommandID )"/>
          <Keyword text="_GUICtrlToolbar_IsButtonHidden" descr="_GUICtrlToolbar_IsButtonHidden( $hWnd , $iCommandID )\n\iIndicates whether the specified button is hidden (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_IsButtonHidden( $hWnd , $iCommandID )"/>
          <Keyword text="_GUICtrlToolbar_IsButtonHighlighted" descr="_GUICtrlToolbar_IsButtonHighlighted( $hWnd , $iCommandID )\n\iIndicates whether the specified button is hilighted (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_IsButtonHighlighted( $hWnd , $iCommandID )"/>
          <Keyword text="_GUICtrlToolbar_IsButtonIndeterminate" descr="_GUICtrlToolbar_IsButtonIndeterminate( $hWnd , $iCommandID )\n\iIndicates whether the specified button is indeterminate (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_IsButtonIndeterminate( $hWnd , $iCommandID )"/>
          <Keyword text="_GUICtrlToolbar_IsButtonPressed" descr="_GUICtrlToolbar_IsButtonPressed( $hWnd , $iCommandID )\n\iIndicates that the button is being clicked (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_IsButtonPressed( $hWnd , $iCommandID )"/>
          <Keyword text="_GUICtrlToolbar_LoadBitmap" descr="_GUICtrlToolbar_LoadBitmap( $hWnd , $sFileName )\n\iAdds a bitmap to the image list from a file (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_LoadBitmap( $hWnd , $sFileName )"/>
          <Keyword text="_GUICtrlToolbar_LoadImages" descr="_GUICtrlToolbar_LoadImages( $hWnd , $iBitMapID )\n\iLoads system defined button images into a toolbar control&apos;s image list (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_LoadImages( $hWnd , $iBitMapID )"/>
          <Keyword text="_GUICtrlToolbar_MapAccelerator" descr="_GUICtrlToolbar_MapAccelerator( $hWnd , $cAccel )\n\iDetermines the ID of the button that corresponds to the specified accelerator (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_MapAccelerator( $hWnd , $cAccel )"/>
          <Keyword text="_GUICtrlToolbar_MoveButton" descr="_GUICtrlToolbar_MoveButton( $hWnd , $iOldPos , $iNewPos )\n\iMoves a button from one index to another (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_MoveButton( $hWnd , $iOldPos , $iNewPos )"/>
          <Keyword text="_GUICtrlToolbar_PressButton" descr="_GUICtrlToolbar_PressButton( $hWnd , $iCommandID , $fPress = True )\n\iPresses or releases the specified button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_PressButton( $hWnd , $iCommandID , $fPress = True )"/>
          <Keyword text="_GUICtrlToolbar_SetAnchorHighlight" descr="_GUICtrlToolbar_SetAnchorHighlight( $hWnd , $fAnchor )\n\iSets the anchor highlight setting (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetAnchorHighlight( $hWnd , $fAnchor )"/>
          <Keyword text="_GUICtrlToolbar_SetBitmapSize" descr="_GUICtrlToolbar_SetBitmapSize( $hWnd , $iWidth , $iHeight )\n\iSets the size of the bitmapped images to be added to a toolbar (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetBitmapSize( $hWnd , $iWidth , $iHeight )"/>
          <Keyword text="_GUICtrlToolbar_SetButtonBitMap" descr="_GUICtrlToolbar_SetButtonBitMap( $hWnd , $iCommandID , $iIndex )\n\iSets the index of the bitmap associated with a button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetButtonBitMap( $hWnd , $iCommandID , $iIndex )"/>
          <Keyword text="_GUICtrlToolbar_SetButtonInfo" descr="_GUICtrlToolbar_SetButtonInfo( $hWnd , $iCommandID , $iImage = -3 , $iState = -1 , $iStyle = -1 , $iWidth = -1 , $iParam = -1 )\n\iSets extended information for a button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetButtonInfo( $hWnd , $iCommandID , $iImage = -3 , $iState = -1 , $iStyle = -1 , $iWidth = -1 , $iParam = -1 )"/>
          <Keyword text="_GUICtrlToolbar_SetButtonInfoEx" descr="_GUICtrlToolbar_SetButtonInfoEx( $hWnd , $iCommandID , $tButton )\n\iSets extended information for a button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetButtonInfoEx( $hWnd , $iCommandID , $tButton )"/>
          <Keyword text="_GUICtrlToolbar_SetButtonParam" descr="_GUICtrlToolbar_SetButtonParam( $hWnd , $iCommandID , $iParam )\n\iSets the button param value (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetButtonParam( $hWnd , $iCommandID , $iParam )"/>
          <Keyword text="_GUICtrlToolbar_SetButtonSize" descr="_GUICtrlToolbar_SetButtonSize( $hWnd , $iHeight , $iWidth )\n\iSets the size of the buttons to be added to a toolbar (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetButtonSize( $hWnd , $iHeight , $iWidth )"/>
          <Keyword text="_GUICtrlToolbar_SetButtonState" descr="_GUICtrlToolbar_SetButtonState( $hWnd , $iCommandID , $iState )\n\iSets information about the state of the specified button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetButtonState( $hWnd , $iCommandID , $iState )"/>
          <Keyword text="_GUICtrlToolbar_SetButtonStyle" descr="_GUICtrlToolbar_SetButtonStyle( $hWnd , $iCommandID , $iStyle )\n\iSets the style flags of a button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetButtonStyle( $hWnd , $iCommandID , $iStyle )"/>
          <Keyword text="_GUICtrlToolbar_SetButtonText" descr="_GUICtrlToolbar_SetButtonText( $hWnd , $iCommandID , $sText )\n\iSets the display text of a button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetButtonText( $hWnd , $iCommandID , $sText )"/>
          <Keyword text="_GUICtrlToolbar_SetButtonWidth" descr="_GUICtrlToolbar_SetButtonWidth( $hWnd , $iMin , $iMax )\n\iSets the minimum and maximum button widths in the toolbar control (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetButtonWidth( $hWnd , $iMin , $iMax )"/>
          <Keyword text="_GUICtrlToolbar_SetCmdID" descr="_GUICtrlToolbar_SetCmdID( $hWnd , $iIndex , $iCommandID )\n\iSets the command identifier of a toolbar button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetCmdID( $hWnd , $iIndex , $iCommandID )"/>
          <Keyword text="_GUICtrlToolbar_SetColorScheme" descr="_GUICtrlToolbar_SetColorScheme( $hWnd , $iHighlight , $iShadow )\n\iSets the color scheme information (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetColorScheme( $hWnd , $iHighlight , $iShadow )"/>
          <Keyword text="_GUICtrlToolbar_SetDisabledImageList" descr="_GUICtrlToolbar_SetDisabledImageList( $hWnd , $hImageList )\n\iSets the disabled image list (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetDisabledImageList( $hWnd , $hImageList )"/>
          <Keyword text="_GUICtrlToolbar_SetDrawTextFlags" descr="_GUICtrlToolbar_SetDrawTextFlags( $hWnd , $iMask , $iDTFlags )\n\iSets the text drawing flags for the toolbar (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetDrawTextFlags( $hWnd , $iMask , $iDTFlags )"/>
          <Keyword text="_GUICtrlToolbar_SetExtendedStyle" descr="_GUICtrlToolbar_SetExtendedStyle( $hWnd , $iStyle )\n\iSets the extended styles control (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetExtendedStyle( $hWnd , $iStyle )"/>
          <Keyword text="_GUICtrlToolbar_SetHotImageList" descr="_GUICtrlToolbar_SetHotImageList( $hWnd , $hImageList )\n\iSets the hot button image list (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetHotImageList( $hWnd , $hImageList )"/>
          <Keyword text="_GUICtrlToolbar_SetHotItem" descr="_GUICtrlToolbar_SetHotItem( $hWnd , $iIndex )\n\iSets the hot item (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetHotItem( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlToolbar_SetImageList" descr="_GUICtrlToolbar_SetImageList( $hWnd , $hImageList )\n\iSets the default button image list (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetImageList( $hWnd , $hImageList )"/>
          <Keyword text="_GUICtrlToolbar_SetIndent" descr="_GUICtrlToolbar_SetIndent( $hWnd , $iIndent )\n\iSets the indentation for the first button control (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetIndent( $hWnd , $iIndent )"/>
          <Keyword text="_GUICtrlToolbar_SetIndeterminate" descr="_GUICtrlToolbar_SetIndeterminate( $hWnd , $iCommandID , $fState = True )\n\iSets or clears the indeterminate state of the specified button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetIndeterminate( $hWnd , $iCommandID , $fState = True )"/>
          <Keyword text="_GUICtrlToolbar_SetInsertMark" descr="_GUICtrlToolbar_SetInsertMark( $hWnd , $iButton , $iFlags = 0 )\n\iSets the current insertion mark for the toolbar (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetInsertMark( $hWnd , $iButton , $iFlags = 0 )"/>
          <Keyword text="_GUICtrlToolbar_SetInsertMarkColor" descr="_GUICtrlToolbar_SetInsertMarkColor( $hWnd , $iColor )\n\iSets the color used to draw the insertion mark (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetInsertMarkColor( $hWnd , $iColor )"/>
          <Keyword text="_GUICtrlToolbar_SetMaxTextRows" descr="_GUICtrlToolbar_SetMaxTextRows( $hWnd , $iMaxRows )\n\iSets the maximum number of text rows displayed button (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetMaxTextRows( $hWnd , $iMaxRows )"/>
          <Keyword text="_GUICtrlToolbar_SetMetrics" descr="_GUICtrlToolbar_SetMetrics( $hWnd , $iXPad , $iYPad , $iXSpacing , $iYSpacing )\n\iRetrieves the metrics of a toolbar control (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetMetrics( $hWnd , $iXPad , $iYPad , $iXSpacing , $iYSpacing )"/>
          <Keyword text="_GUICtrlToolbar_SetPadding" descr="_GUICtrlToolbar_SetPadding( $hWnd , $iCX , $iCY )\n\iSets the padding control (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetPadding( $hWnd , $iCX , $iCY )"/>
          <Keyword text="_GUICtrlToolbar_SetParent" descr="_GUICtrlToolbar_SetParent( $hWnd , $hParent )\n\iSets the window to which the control sends notification messages (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetParent( $hWnd , $hParent )"/>
          <Keyword text="_GUICtrlToolbar_SetRows" descr="_GUICtrlToolbar_SetRows( $hWnd , $iRows , $fLarger = True )\n\iSets the number of rows of buttons (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetRows( $hWnd , $iRows , $fLarger = True )"/>
          <Keyword text="_GUICtrlToolbar_SetStyle" descr="_GUICtrlToolbar_SetStyle( $hWnd , $iStyle )\n\iSets the style control (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetStyle( $hWnd , $iStyle )"/>
          <Keyword text="_GUICtrlToolbar_SetStyleAltDrag" descr="_GUICtrlToolbar_SetStyleAltDrag( $hWnd , $fState = True )\n\iSets whether that the control allows buttons to be dragged (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetStyleAltDrag( $hWnd , $fState = True )"/>
          <Keyword text="_GUICtrlToolbar_SetStyleCustomErase" descr="_GUICtrlToolbar_SetStyleCustomErase( $hWnd , $fState = True )\n\iSets whether the control generates NM_CUSTOMDRAW notification messages (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetStyleCustomErase( $hWnd , $fState = True )"/>
          <Keyword text="_GUICtrlToolbar_SetStyleFlat" descr="_GUICtrlToolbar_SetStyleFlat( $hWnd , $fState )\n\iSets whether the control is flat (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetStyleFlat( $hWnd , $fState )"/>
          <Keyword text="_GUICtrlToolbar_SetStyleList" descr="_GUICtrlToolbar_SetStyleList( $hWnd , $fState )\n\iSets whether the control has button text to the right of the bitmap (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetStyleList( $hWnd , $fState )"/>
          <Keyword text="_GUICtrlToolbar_SetStyleRegisterDrop" descr="_GUICtrlToolbar_SetStyleRegisterDrop( $hWnd , $fState )\n\iSets whether the control generates TBN_GETOBJECT notification messages (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetStyleRegisterDrop( $hWnd , $fState )"/>
          <Keyword text="_GUICtrlToolbar_SetStyleToolTips" descr="_GUICtrlToolbar_SetStyleToolTips( $hWnd , $fState )\n\iSets whether the control has tooltips (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetStyleToolTips( $hWnd , $fState )"/>
          <Keyword text="_GUICtrlToolbar_SetStyleTransparent" descr="_GUICtrlToolbar_SetStyleTransparent( $hWnd , $fState )\n\iSets whether the control is transparent (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetStyleTransparent( $hWnd , $fState )"/>
          <Keyword text="_GUICtrlToolbar_SetStyleWrapable" descr="_GUICtrlToolbar_SetStyleWrapable( $hWnd , $fState )\n\iSets whether the control is wrapable (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetStyleWrapable( $hWnd , $fState )"/>
          <Keyword text="_GUICtrlToolbar_SetToolTips" descr="_GUICtrlToolbar_SetToolTips( $hWnd , $hToolTip )\n\iAssociates a ToolTip control with a toolbar (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetToolTips( $hWnd , $hToolTip )"/>
          <Keyword text="_GUICtrlToolbar_SetUnicodeFormat" descr="_GUICtrlToolbar_SetUnicodeFormat( $hWnd , $fUnicode = False )\n\iSets the Unicode character format flag (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetUnicodeFormat( $hWnd , $fUnicode = False )"/>
          <Keyword text="_GUICtrlToolbar_SetWindowTheme" descr="_GUICtrlToolbar_SetWindowTheme( $hWnd , $sTheme )\n\iSets the visual style (Requires: #include &lt;GuiToolbar.au3&gt;)\i0" pattern="_GUICtrlToolbar_SetWindowTheme( $hWnd , $sTheme )"/>
          <Keyword text="_GUICtrlTreeView_Add" descr="_GUICtrlTreeView_Add( $hWnd , $hSibling , $sText , $iImage = -1 , $iSelImage = -1 )\n\iAdds a new item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_Add( $hWnd , $hSibling , $sText , $iImage = -1 , $iSelImage = -1 )"/>
          <Keyword text="_GUICtrlTreeView_AddChild" descr="_GUICtrlTreeView_AddChild( $hWnd , $hParent , $sText , $iImage = -1 , $iSelImage = -1 )\n\iAdds a new item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_AddChild( $hWnd , $hParent , $sText , $iImage = -1 , $iSelImage = -1 )"/>
          <Keyword text="_GUICtrlTreeView_AddChildFirst" descr="_GUICtrlTreeView_AddChildFirst( $hWnd , $hParent , $sText , $iImage = -1 , $iSelImage = -1 )\n\iAdds a new item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_AddChildFirst( $hWnd , $hParent , $sText , $iImage = -1 , $iSelImage = -1 )"/>
          <Keyword text="_GUICtrlTreeView_AddFirst" descr="_GUICtrlTreeView_AddFirst( $hWnd , $hSibling , $sText , $iImage = -1 , $iSelImage = -1 )\n\iAdds a new item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_AddFirst( $hWnd , $hSibling , $sText , $iImage = -1 , $iSelImage = -1 )"/>
          <Keyword text="_GUICtrlTreeView_BeginUpdate" descr="_GUICtrlTreeView_BeginUpdate( $hWnd )\n\iPrevents updating of the control until the EndUpdate function is called (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_BeginUpdate( $hWnd )"/>
          <Keyword text="_GUICtrlTreeView_ClickItem" descr="_GUICtrlTreeView_ClickItem( $hWnd , $hItem , $sButton = &quot;left&quot; , $fMove = False , $iClicks = 1 , $iSpeed = 0 )\n\iClick on a item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_ClickItem( $hWnd , $hItem , $sButton = &quot;left&quot; , $fMove = False , $iClicks = 1 , $iSpeed = 0 )"/>
          <Keyword text="_GUICtrlTreeView_Create" descr="_GUICtrlTreeView_Create( $hWnd , $iX , $iY , $iWidth=150 , $iHeight=150 , $iStyle=0x00000037 , $iExStyle=0x00000000 )\n\iCreate a TreeView control (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_Create( $hWnd , $iX , $iY , $iWidth=150 , $iHeight=150 , $iStyle=0x00000037 , $iExStyle=0x00000000 )"/>
          <Keyword text="_GUICtrlTreeView_CreateDragImage" descr="_GUICtrlTreeView_CreateDragImage( $hWnd , $hItem )\n\iCreates a dragging bitmap for the specified item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_CreateDragImage( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_CreateSolidBitMap" descr="_GUICtrlTreeView_CreateSolidBitMap( $hWnd , $iColor , $iWidth , $iHeight )\n\iCreates a solid color bitmap (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_CreateSolidBitMap( $hWnd , $iColor , $iWidth , $iHeight )"/>
          <Keyword text="_GUICtrlTreeView_Delete" descr="_GUICtrlTreeView_Delete( $hWnd , $hItem = 0 )\n\iRemoves an item and all its children (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_Delete( $hWnd , $hItem = 0 )"/>
          <Keyword text="_GUICtrlTreeView_DeleteAll" descr="_GUICtrlTreeView_DeleteAll( $hWnd )\n\iRemoves all items from a tree-view control (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_DeleteAll( $hWnd )"/>
          <Keyword text="_GUICtrlTreeView_DeleteChildren" descr="_GUICtrlTreeView_DeleteChildren( $hWnd , $hItem )\n\iDeletes all children of a item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_DeleteChildren( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_Destroy" descr="_GUICtrlTreeView_Destroy( ByRef $hWnd )\n\iDelete the control (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_Destroy( ByRef $hWnd )"/>
          <Keyword text="_GUICtrlTreeView_DisplayRect" descr="_GUICtrlTreeView_DisplayRect( $hWnd , $hItem , $fTextOnly = False )\n\iReturns the bounding rectangle for a tree item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_DisplayRect( $hWnd , $hItem , $fTextOnly = False )"/>
          <Keyword text="_GUICtrlTreeView_DisplayRectEx" descr="_GUICtrlTreeView_DisplayRectEx( $hWnd , $hItem , $fTextOnly = False )\n\iReturns the bounding rectangle for a tree item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_DisplayRectEx( $hWnd , $hItem , $fTextOnly = False )"/>
          <Keyword text="_GUICtrlTreeView_EditText" descr="_GUICtrlTreeView_EditText( $hWnd , $hItem )\n\iBegins in-place editing of the specified item&apos;s text (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_EditText( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_EndEdit" descr="_GUICtrlTreeView_EndEdit( $hWnd , $fCancel = False )\n\iEnds the editing of the item&apos;s text (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_EndEdit( $hWnd , $fCancel = False )"/>
          <Keyword text="_GUICtrlTreeView_EndUpdate" descr="_GUICtrlTreeView_EndUpdate( $hWnd )\n\iEnables screen repainting that was turned off with the BeginUpdate function (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_EndUpdate( $hWnd )"/>
          <Keyword text="_GUICtrlTreeView_EnsureVisible" descr="_GUICtrlTreeView_EnsureVisible( $hWnd , $hItem )\n\iEnsures that a item is visible, expanding the parent item or scrolling the control if necessary (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_EnsureVisible( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_Expand" descr="_GUICtrlTreeView_Expand( $hWnd , $hItem = 0 , $fExpand = True )\n\iExpands or collapses the list of child items associated with the specified parent item, if any (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_Expand( $hWnd , $hItem = 0 , $fExpand = True )"/>
          <Keyword text="_GUICtrlTreeView_ExpandedOnce" descr="_GUICtrlTreeView_ExpandedOnce( $hWnd , $hItem )\n\iIndicates if the item&apos;s list of child items has been expanded at least once (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_ExpandedOnce( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_FindItem" descr="_GUICtrlTreeView_FindItem( $hWnd , $sText , $fInStr = False , $hStart = 0 )\n\iRetrieves a item based on it&apos;s text (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_FindItem( $hWnd , $sText , $fInStr = False , $hStart = 0 )"/>
          <Keyword text="_GUICtrlTreeView_FindItemEx" descr="_GUICtrlTreeView_FindItemEx( $hWnd , $sPath , $hStart = 0 )\n\iRetrieves a item based on a tree path (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_FindItemEx( $hWnd , $sPath , $hStart = 0 )"/>
          <Keyword text="_GUICtrlTreeView_GetBkColor" descr="_GUICtrlTreeView_GetBkColor( $hWnd )\n\iRetrieve the text back color (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetBkColor( $hWnd )"/>
          <Keyword text="_GUICtrlTreeView_GetBold" descr="_GUICtrlTreeView_GetBold( $hWnd , $hItem )\n\iIndicates if the item is drawn in a bold style (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetBold( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetChecked" descr="_GUICtrlTreeView_GetChecked( $hWnd , $hItem )\n\iIndicates if a item has its checkbox checked (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetChecked( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetChildCount" descr="_GUICtrlTreeView_GetChildCount( $hWnd , $hItem )\n\iRetrieves the number of children of an parent item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetChildCount( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetChildren" descr="_GUICtrlTreeView_GetChildren( $hWnd , $hItem )\n\iIndicates whether the item children flag is set (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetChildren( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetCount" descr="_GUICtrlTreeView_GetCount( $hWnd )\n\iRetrieves a count of the items (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetCount( $hWnd )"/>
          <Keyword text="_GUICtrlTreeView_GetCut" descr="_GUICtrlTreeView_GetCut( $hWnd , $hItem )\n\iIndicates if the item is drawn as if selected as part of a cut and paste operation (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetCut( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetDropTarget" descr="_GUICtrlTreeView_GetDropTarget( $hWnd , $hItem )\n\iIndicates whether the item is drawn as a drag and drop target (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetDropTarget( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetEditControl" descr="_GUICtrlTreeView_GetEditControl( $hWnd )\n\iRetrieves the handle to the edit control being used to edit a item&apos;s text (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetEditControl( $hWnd )"/>
          <Keyword text="_GUICtrlTreeView_GetExpanded" descr="_GUICtrlTreeView_GetExpanded( $hWnd , $hItem )\n\iIndicates whether the item is expanded (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetExpanded( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetFirstChild" descr="_GUICtrlTreeView_GetFirstChild( $hWnd , $hItem )\n\iRetrieves the first child item of the specified item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetFirstChild( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetFirstItem" descr="_GUICtrlTreeView_GetFirstItem( $hWnd )\n\iRetrieves the topmost or very first item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetFirstItem( $hWnd )"/>
          <Keyword text="_GUICtrlTreeView_GetFirstVisible" descr="_GUICtrlTreeView_GetFirstVisible( $hWnd )\n\iRetrieves the first visible item in the control (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetFirstVisible( $hWnd )"/>
          <Keyword text="_GUICtrlTreeView_GetFocused" descr="_GUICtrlTreeView_GetFocused( $hWnd , $hItem )\n\iIndicates whether the item has focus (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetFocused( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetHeight" descr="_GUICtrlTreeView_GetHeight( $hWnd )\n\iRetrieves the current height of the each item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetHeight( $hWnd )"/>
          <Keyword text="_GUICtrlTreeView_GetISearchString" descr="_GUICtrlTreeView_GetISearchString( $hWnd )\n\iRetrieves the incremental search string (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetISearchString( $hWnd )"/>
          <Keyword text="_GUICtrlTreeView_GetImageIndex" descr="_GUICtrlTreeView_GetImageIndex( $hWnd , $hItem )\n\iRetrieves the normal state image index (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetImageIndex( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetImageListIconHandle" descr="_GUICtrlTreeView_GetImageListIconHandle( $hWnd , $iIndex )\n\iRetrieve ImageList handle (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetImageListIconHandle( $hWnd , $iIndex )"/>
          <Keyword text="_GUICtrlTreeView_GetIndent" descr="_GUICtrlTreeView_GetIndent( $hWnd )\n\iRetrieves the amount, in pixels, that child items are indented relative to their parent items (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetIndent( $hWnd )"/>
          <Keyword text="_GUICtrlTreeView_GetInsertMarkColor" descr="_GUICtrlTreeView_GetInsertMarkColor( $hWnd )\n\iRetrieves the color used to draw the insertion mark (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetInsertMarkColor( $hWnd )"/>
          <Keyword text="_GUICtrlTreeView_GetItemByIndex" descr="_GUICtrlTreeView_GetItemByIndex( $hWnd , $hItem , $iIndex )\n\iRetrieve a item by its position in the list of child items (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetItemByIndex( $hWnd , $hItem , $iIndex )"/>
          <Keyword text="_GUICtrlTreeView_GetItemHandle" descr="_GUICtrlTreeView_GetItemHandle( $hWnd , $hItem = 0 )\n\iRetrieve the item handle (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetItemHandle( $hWnd , $hItem = 0 )"/>
          <Keyword text="_GUICtrlTreeView_GetItemParam" descr="_GUICtrlTreeView_GetItemParam( $hWnd , $hItem = 0 )\n\iRetrieves the application specific value of the item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetItemParam( $hWnd , $hItem = 0 )"/>
          <Keyword text="_GUICtrlTreeView_GetLastChild" descr="_GUICtrlTreeView_GetLastChild( $hWnd , $hItem )\n\iRetrieves the last child item of the specified item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetLastChild( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetLineColor" descr="_GUICtrlTreeView_GetLineColor( $hWnd )\n\iRetrieve the line color (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetLineColor( $hWnd )"/>
          <Keyword text="_GUICtrlTreeView_GetNext" descr="_GUICtrlTreeView_GetNext( $hWnd , $hItem )\n\iRetrieves the next item after the calling item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetNext( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetNextChild" descr="_GUICtrlTreeView_GetNextChild( $hWnd , $hItem )\n\iReturns the next item at the same level as the specified item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetNextChild( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetNextSibling" descr="_GUICtrlTreeView_GetNextSibling( $hWnd , $hItem )\n\iReturns the next item at the same level as the specified item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetNextSibling( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetNextVisible" descr="_GUICtrlTreeView_GetNextVisible( $hWnd , $hItem )\n\iRetrieves the next visible item that follows the specified item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetNextVisible( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetNormalImageList" descr="_GUICtrlTreeView_GetNormalImageList( $hWnd )\n\iRetrieves the normal image list (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetNormalImageList( $hWnd )"/>
          <Keyword text="_GUICtrlTreeView_GetParentHandle" descr="_GUICtrlTreeView_GetParentHandle( $hWnd , $hItem = 0 )\n\iRetrieve the parent handle of item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetParentHandle( $hWnd , $hItem = 0 )"/>
          <Keyword text="_GUICtrlTreeView_GetParentParam" descr="_GUICtrlTreeView_GetParentParam( $hWnd , $hItem = 0 )\n\iRetrieve the parent control ID/Param of item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetParentParam( $hWnd , $hItem = 0 )"/>
          <Keyword text="_GUICtrlTreeView_GetPrev" descr="_GUICtrlTreeView_GetPrev( $hWnd , $hItem )\n\iRetrieves the previous item before the calling item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetPrev( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetPrevChild" descr="_GUICtrlTreeView_GetPrevChild( $hWnd , $hItem )\n\iRetrieves the previous child item of a specified item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetPrevChild( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetPrevSibling" descr="_GUICtrlTreeView_GetPrevSibling( $hWnd , $hItem )\n\iReturns the previous item before the calling item at the same level (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetPrevSibling( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetPrevVisible" descr="_GUICtrlTreeView_GetPrevVisible( $hWnd , $hItem )\n\iRetrieves the first visible item that precedes the specified item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetPrevVisible( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetScrollTime" descr="_GUICtrlTreeView_GetScrollTime( $hWnd )\n\iRetrieves the maximum scroll time (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetScrollTime( $hWnd )"/>
          <Keyword text="_GUICtrlTreeView_GetSelected" descr="_GUICtrlTreeView_GetSelected( $hWnd , $hItem )\n\iIndicates whether the item appears in the selected state (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetSelected( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetSelectedImageIndex" descr="_GUICtrlTreeView_GetSelectedImageIndex( $hWnd , $hItem )\n\iRetrieves the index in the image list of the image displayed for the item when it is selected (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetSelectedImageIndex( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetSelection" descr="_GUICtrlTreeView_GetSelection( $hWnd )\n\iRetrieves the currently selected item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetSelection( $hWnd )"/>
          <Keyword text="_GUICtrlTreeView_GetSiblingCount" descr="_GUICtrlTreeView_GetSiblingCount( $hWnd , $hItem )\n\iRetrieves the number of siblings at the level of an item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetSiblingCount( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetState" descr="_GUICtrlTreeView_GetState( $hWnd , $hItem = 0 )\n\iRetrieve the state of the item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetState( $hWnd , $hItem = 0 )"/>
          <Keyword text="_GUICtrlTreeView_GetStateImageIndex" descr="_GUICtrlTreeView_GetStateImageIndex( $hWnd , $hItem )\n\iRetrieves the index of the state image to display for the item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetStateImageIndex( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetStateImageList" descr="_GUICtrlTreeView_GetStateImageList( $hWnd )\n\iRetrieves the handle to the state image list (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetStateImageList( $hWnd )"/>
          <Keyword text="_GUICtrlTreeView_GetText" descr="_GUICtrlTreeView_GetText( $hWnd , $hItem = 0 )\n\iRetrieve the item text (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetText( $hWnd , $hItem = 0 )"/>
          <Keyword text="_GUICtrlTreeView_GetTextColor" descr="_GUICtrlTreeView_GetTextColor( $hWnd )\n\iRetrieve the text color (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetTextColor( $hWnd )"/>
          <Keyword text="_GUICtrlTreeView_GetToolTips" descr="_GUICtrlTreeView_GetToolTips( $hWnd )\n\iRetrieves the handle to the child ToolTip control (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetToolTips( $hWnd )"/>
          <Keyword text="_GUICtrlTreeView_GetTree" descr="_GUICtrlTreeView_GetTree( $hWnd , $hItem )\n\iRetrieve all items text (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetTree( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetUnicodeFormat" descr="_GUICtrlTreeView_GetUnicodeFormat( $hWnd )\n\iRetrieves the Unicode character format flag (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetUnicodeFormat( $hWnd )"/>
          <Keyword text="_GUICtrlTreeView_GetVisible" descr="_GUICtrlTreeView_GetVisible( $hWnd , $hItem )\n\iIndicates whether the item is currently visible in the control image (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetVisible( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_GetVisibleCount" descr="_GUICtrlTreeView_GetVisibleCount( $hWnd )\n\iReturns the number of items that can be fully visible in the control (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_GetVisibleCount( $hWnd )"/>
          <Keyword text="_GUICtrlTreeView_HitTest" descr="_GUICtrlTreeView_HitTest( $hWnd , $iX , $iY )\n\iReturns information about the location of a point relative to the control (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_HitTest( $hWnd , $iX , $iY )"/>
          <Keyword text="_GUICtrlTreeView_HitTestEx" descr="_GUICtrlTreeView_HitTestEx( $hWnd , $iX , $iY )\n\iReturns information about the location of a point relative to the control (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_HitTestEx( $hWnd , $iX , $iY )"/>
          <Keyword text="_GUICtrlTreeView_HitTestItem" descr="_GUICtrlTreeView_HitTestItem( $hWnd , $iX , $iY )\n\iReturns the item at the specified coordinates (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_HitTestItem( $hWnd , $iX , $iY )"/>
          <Keyword text="_GUICtrlTreeView_Index" descr="_GUICtrlTreeView_Index( $hWnd , $hItem )\n\iRetrieves the position of the item in the list (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_Index( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_InsertItem" descr="_GUICtrlTreeView_InsertItem( $hWnd , $sItem_Text , $hItem_Parent = 0 , $hItem_After = 0 , $iImage = -1 , $iSelImage = -1 )\n\iInsert an item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_InsertItem( $hWnd , $sItem_Text , $hItem_Parent = 0 , $hItem_After = 0 , $iImage = -1 , $iSelImage = -1 )"/>
          <Keyword text="_GUICtrlTreeView_IsFirstItem" descr="_GUICtrlTreeView_IsFirstItem( $hWnd , $hItem )\n\iIndicates whether the tree item is very first (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_IsFirstItem( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_IsParent" descr="_GUICtrlTreeView_IsParent( $hWnd , $hParent , $hItem )\n\iIndicates whether one item is the parent of another item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_IsParent( $hWnd , $hParent , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_Level" descr="_GUICtrlTreeView_Level( $hWnd , $hItem )\n\iIndicates the level of indentation of a item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_Level( $hWnd , $hItem )"/>
          <Keyword text="_GUICtrlTreeView_SelectItem" descr="_GUICtrlTreeView_SelectItem( $hWnd , $hItem , $iFlag=0 )\n\iSelects the specified item, scrolls the item into view, or redraws the item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SelectItem( $hWnd , $hItem , $iFlag=0 )"/>
          <Keyword text="_GUICtrlTreeView_SelectItemByIndex" descr="_GUICtrlTreeView_SelectItemByIndex( $hWnd , $hItem , $iIndex )\n\iSelects the item based on it&apos;s index in the parent list (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SelectItemByIndex( $hWnd , $hItem , $iIndex )"/>
          <Keyword text="_GUICtrlTreeView_SetBkColor" descr="_GUICtrlTreeView_SetBkColor( $hWnd , $vRGBColor )\n\iSets the back color (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetBkColor( $hWnd , $vRGBColor )"/>
          <Keyword text="_GUICtrlTreeView_SetBold" descr="_GUICtrlTreeView_SetBold( $hWnd , $hItem , $fFlag = True )\n\iSets whether the item is drawn using a bold sytle (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetBold( $hWnd , $hItem , $fFlag = True )"/>
          <Keyword text="_GUICtrlTreeView_SetChecked" descr="_GUICtrlTreeView_SetChecked( $hWnd , $hItem , $fCheck = True )\n\iSets whether a item has it&apos;s checkbox checked or not (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetChecked( $hWnd , $hItem , $fCheck = True )"/>
          <Keyword text="_GUICtrlTreeView_SetCheckedByIndex" descr="_GUICtrlTreeView_SetCheckedByIndex( $hWnd , $hItem , $iIndex , $fCheck = True )\n\iSets whether an item has it&apos;s checkbox checked or not by it&apos;s index (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetCheckedByIndex( $hWnd , $hItem , $iIndex , $fCheck = True )"/>
          <Keyword text="_GUICtrlTreeView_SetChildren" descr="_GUICtrlTreeView_SetChildren( $hWnd , $hItem , $fFlag = True )\n\iSets whether the item children flag (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetChildren( $hWnd , $hItem , $fFlag = True )"/>
          <Keyword text="_GUICtrlTreeView_SetCut" descr="_GUICtrlTreeView_SetCut( $hWnd , $hItem , $fFlag = True )\n\iSets whether the item is drawn as if selected as part of a cut and paste operation (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetCut( $hWnd , $hItem , $fFlag = True )"/>
          <Keyword text="_GUICtrlTreeView_SetDropTarget" descr="_GUICtrlTreeView_SetDropTarget( $hWnd , $hItem , $fFlag = True )\n\iSets whether the item is drawn as a drag and drop target (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetDropTarget( $hWnd , $hItem , $fFlag = True )"/>
          <Keyword text="_GUICtrlTreeView_SetFocused" descr="_GUICtrlTreeView_SetFocused( $hWnd , $hItem , $fFlag = True )\n\iSets whether the item appears to have focus (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetFocused( $hWnd , $hItem , $fFlag = True )"/>
          <Keyword text="_GUICtrlTreeView_SetHeight" descr="_GUICtrlTreeView_SetHeight( $hWnd , $iHeight )\n\iSets the height of the each item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetHeight( $hWnd , $iHeight )"/>
          <Keyword text="_GUICtrlTreeView_SetIcon" descr="_GUICtrlTreeView_SetIcon( $hWnd , $hItem = 0 , $sIconFile =&quot;&quot; , $iIconID = 0 , $iImageMode = 6 )\n\iSet an item icon (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetIcon( $hWnd , $hItem = 0 , $sIconFile =&quot;&quot; , $iIconID = 0 , $iImageMode = 6 )"/>
          <Keyword text="_GUICtrlTreeView_SetImageIndex" descr="_GUICtrlTreeView_SetImageIndex( $hWnd , $hItem , $iIndex )\n\iSets the index into image list for which image is displayed when a item is in its normal state (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetImageIndex( $hWnd , $hItem , $iIndex )"/>
          <Keyword text="_GUICtrlTreeView_SetIndent" descr="_GUICtrlTreeView_SetIndent( $hWnd , $iIndent )\n\iSets the width of indentation for a tree-view control and redraws the control to reflect the new width (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetIndent( $hWnd , $iIndent )"/>
          <Keyword text="_GUICtrlTreeView_SetInsertMark" descr="_GUICtrlTreeView_SetInsertMark( $hWnd , $hItem , $fAfter = True )\n\iSets the insertion mark (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetInsertMark( $hWnd , $hItem , $fAfter = True )"/>
          <Keyword text="_GUICtrlTreeView_SetInsertMarkColor" descr="_GUICtrlTreeView_SetInsertMarkColor( $hWnd , $iColor )\n\iSets the color used to draw the insertion mark (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetInsertMarkColor( $hWnd , $iColor )"/>
          <Keyword text="_GUICtrlTreeView_SetItemHeight" descr="_GUICtrlTreeView_SetItemHeight( $hWnd , $hItem , $iIntegral )\n\iSets the height of an individual item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetItemHeight( $hWnd , $hItem , $iIntegral )"/>
          <Keyword text="_GUICtrlTreeView_SetItemParam" descr="_GUICtrlTreeView_SetItemParam( $hWnd , $hItem , $iParam )\n\iSets the value specific to the item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetItemParam( $hWnd , $hItem , $iParam )"/>
          <Keyword text="_GUICtrlTreeView_SetLineColor" descr="_GUICtrlTreeView_SetLineColor( $hWnd , $vRGBColor )\n\iSets the line color (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetLineColor( $hWnd , $vRGBColor )"/>
          <Keyword text="_GUICtrlTreeView_SetNormalImageList" descr="_GUICtrlTreeView_SetNormalImageList( $hWnd , $hImageList )\n\iSets the normal image list for the control (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetNormalImageList( $hWnd , $hImageList )"/>
          <Keyword text="_GUICtrlTreeView_SetScrollTime" descr="_GUICtrlTreeView_SetScrollTime( $hWnd , $iTime )\n\iSets the maximum scroll time (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetScrollTime( $hWnd , $iTime )"/>
          <Keyword text="_GUICtrlTreeView_SetSelected" descr="_GUICtrlTreeView_SetSelected( $hWnd , $hItem , $fFlag = True )\n\iSets whether the item appears in the selected state (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetSelected( $hWnd , $hItem , $fFlag = True )"/>
          <Keyword text="_GUICtrlTreeView_SetSelectedImageIndex" descr="_GUICtrlTreeView_SetSelectedImageIndex( $hWnd , $hItem , $iIndex )\n\iSets the selected image index (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetSelectedImageIndex( $hWnd , $hItem , $iIndex )"/>
          <Keyword text="_GUICtrlTreeView_SetState" descr="_GUICtrlTreeView_SetState( $hWnd , $hItem , $iState = 0 , $iSetState = 0 )\n\iSet the state of the specified item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetState( $hWnd , $hItem , $iState = 0 , $iSetState = 0 )"/>
          <Keyword text="_GUICtrlTreeView_SetStateImageIndex" descr="_GUICtrlTreeView_SetStateImageIndex( $hWnd , $hItem , $iIndex )\n\iSets the index into image list for the state image (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetStateImageIndex( $hWnd , $hItem , $iIndex )"/>
          <Keyword text="_GUICtrlTreeView_SetStateImageList" descr="_GUICtrlTreeView_SetStateImageList( $hWnd , $hImageList )\n\iSets the state image list for the control (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetStateImageList( $hWnd , $hImageList )"/>
          <Keyword text="_GUICtrlTreeView_SetText" descr="_GUICtrlTreeView_SetText( $hWnd , $hItem = 0 , $sText = &quot;&quot; )\n\iSet the text of an item (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetText( $hWnd , $hItem = 0 , $sText = &quot;&quot; )"/>
          <Keyword text="_GUICtrlTreeView_SetTextColor" descr="_GUICtrlTreeView_SetTextColor( $hWnd , $vRGBColor )\n\iSets the text color (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetTextColor( $hWnd , $vRGBColor )"/>
          <Keyword text="_GUICtrlTreeView_SetToolTips" descr="_GUICtrlTreeView_SetToolTips( $hWnd , $hToolTip )\n\iSets the handle to the child ToolTip control (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetToolTips( $hWnd , $hToolTip )"/>
          <Keyword text="_GUICtrlTreeView_SetUnicodeFormat" descr="_GUICtrlTreeView_SetUnicodeFormat( $hWnd , $iFormat = True )\n\iSets the Unicode character format flag (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_SetUnicodeFormat( $hWnd , $iFormat = True )"/>
          <Keyword text="_GUICtrlTreeView_Sort" descr="_GUICtrlTreeView_Sort( $hWnd )\n\iSorts the items (Requires: #include &lt;GuiTreeView.au3&gt;)\i0" pattern="_GUICtrlTreeView_Sort( $hWnd )"/>
          <Keyword text="_GUIImageList_Add" descr="_GUIImageList_Add( $hWnd , $hImage , $hMask=0 )\n\iAdds an image or images to an image list (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_Add( $hWnd , $hImage , $hMask=0 )"/>
          <Keyword text="_GUIImageList_AddBitmap" descr="_GUIImageList_AddBitmap( $hWnd , $sImage , $sMask=&quot;&quot; )\n\iAdds a bitmap to an image list (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_AddBitmap( $hWnd , $sImage , $sMask=&quot;&quot; )"/>
          <Keyword text="_GUIImageList_AddIcon" descr="_GUIImageList_AddIcon( $hWnd , $sFile , $iIndex=0 , $fLarge = False )\n\iAdds an icon to an image list (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_AddIcon( $hWnd , $sFile , $iIndex=0 , $fLarge = False )"/>
          <Keyword text="_GUIImageList_AddMasked" descr="_GUIImageList_AddMasked( $hWnd , $hImage , $iMask=0 )\n\iAdds an image or images to an image list, generating a mask from the specified bitmap (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_AddMasked( $hWnd , $hImage , $iMask=0 )"/>
          <Keyword text="_GUIImageList_BeginDrag" descr="_GUIImageList_BeginDrag( $hWnd , $iTrack , $iXHotSpot , $iYHotSpot )\n\iBegins dragging an image (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_BeginDrag( $hWnd , $iTrack , $iXHotSpot , $iYHotSpot )"/>
          <Keyword text="_GUIImageList_Copy" descr="_GUIImageList_Copy( $hWnd , $iSource , $iDestination )\n\iSource image is copied to the destination image&apos;s index (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_Copy( $hWnd , $iSource , $iDestination )"/>
          <Keyword text="_GUIImageList_Create" descr="_GUIImageList_Create( $iCX=16 , $iCY=16 , $iColor=4 , $iOptions=0 , $iInitial=4 , $iGrow=4 )\n\iCreate an ImageList control (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_Create( $iCX=16 , $iCY=16 , $iColor=4 , $iOptions=0 , $iInitial=4 , $iGrow=4 )"/>
          <Keyword text="_GUIImageList_Destroy" descr="_GUIImageList_Destroy( $hWnd )\n\iDestroys an image list (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_Destroy( $hWnd )"/>
          <Keyword text="_GUIImageList_DestroyIcon" descr="_GUIImageList_DestroyIcon( $hIcon )\n\iDestroys an icon and frees any memory the icon occupied (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_DestroyIcon( $hIcon )"/>
          <Keyword text="_GUIImageList_DragEnter" descr="_GUIImageList_DragEnter( $hWnd , $iX , $iY )\n\iDisplays the drag image at the specified position within the window (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_DragEnter( $hWnd , $iX , $iY )"/>
          <Keyword text="_GUIImageList_DragLeave" descr="_GUIImageList_DragLeave( $hWnd )\n\iUnlocks the specified window and hides the drag image, allowing the window to be updated (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_DragLeave( $hWnd )"/>
          <Keyword text="_GUIImageList_DragMove" descr="_GUIImageList_DragMove( $iX , $iY )\n\iMoves the image that is being dragged during a drag-and-drop operation (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_DragMove( $iX , $iY )"/>
          <Keyword text="_GUIImageList_Draw" descr="_GUIImageList_Draw( $hWnd , $iIndex , $hDC , $iX , $iY , $iStyle=0 )\n\iDraws an image list item in the specified device context (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_Draw( $hWnd , $iIndex , $hDC , $iX , $iY , $iStyle=0 )"/>
          <Keyword text="_GUIImageList_DrawEx" descr="_GUIImageList_DrawEx( $hWnd , $iIndex , $hDC , $iX , $iY , $iDX = 0 , $iDY = 0 , $iRGBBk = 0xFFFFFFFF , $iRGBFg = 0xFFFFFFFF , $iStyle=0 )\n\iDraws an image list item in the specified device context (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_DrawEx( $hWnd , $iIndex , $hDC , $iX , $iY , $iDX = 0 , $iDY = 0 , $iRGBBk = 0xFFFFFFFF , $iRGBFg = 0xFFFFFFFF , $iStyle=0 )"/>
          <Keyword text="_GUIImageList_Duplicate" descr="_GUIImageList_Duplicate( $hWnd )\n\iCreates a duplicate of an existing image list (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_Duplicate( $hWnd )"/>
          <Keyword text="_GUIImageList_EndDrag" descr="_GUIImageList_EndDrag()\n\iEnds a drag operation (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_EndDrag()"/>
          <Keyword text="_GUIImageList_GetBkColor" descr="_GUIImageList_GetBkColor( $hWnd )\n\iRetrieves the current background color for an image list (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_GetBkColor( $hWnd )"/>
          <Keyword text="_GUIImageList_GetIcon" descr="_GUIImageList_GetIcon( $hWnd , $iIndex , $iStyle = 0 )\n\iCreates an icon from an image and mask in an image list (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_GetIcon( $hWnd , $iIndex , $iStyle = 0 )"/>
          <Keyword text="_GUIImageList_GetIconHeight" descr="_GUIImageList_GetIconHeight( $hWnd )\n\iRetrieves the height of the images in an image list (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_GetIconHeight( $hWnd )"/>
          <Keyword text="_GUIImageList_GetIconSize" descr="_GUIImageList_GetIconSize( $hWnd )\n\iRetrieves the dimensions of images in an image list (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_GetIconSize( $hWnd )"/>
          <Keyword text="_GUIImageList_GetIconSizeEx" descr="_GUIImageList_GetIconSizeEx( $hWnd )\n\iRetrieves the dimensions of images in an image list (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_GetIconSizeEx( $hWnd )"/>
          <Keyword text="_GUIImageList_GetIconWidth" descr="_GUIImageList_GetIconWidth( $hWnd )\n\iRetrieves the width of the images in an image list (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_GetIconWidth( $hWnd )"/>
          <Keyword text="_GUIImageList_GetImageCount" descr="_GUIImageList_GetImageCount( $hWnd )\n\iRetrieves the number of images in an image list (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_GetImageCount( $hWnd )"/>
          <Keyword text="_GUIImageList_GetImageInfoEx" descr="_GUIImageList_GetImageInfoEx( $hWnd , $iIndex )\n\iRetrieves information about an image (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_GetImageInfoEx( $hWnd , $iIndex )"/>
          <Keyword text="_GUIImageList_Remove" descr="_GUIImageList_Remove( $hWnd , $iIndex = -1 )\n\iRemove Image(s) from the ImageList (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_Remove( $hWnd , $iIndex = -1 )"/>
          <Keyword text="_GUIImageList_ReplaceIcon" descr="_GUIImageList_ReplaceIcon( $hWnd , $iIndex , $hIcon )\n\iReplaces an image with an icon or cursor (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_ReplaceIcon( $hWnd , $iIndex , $hIcon )"/>
          <Keyword text="_GUIImageList_SetBkColor" descr="_GUIImageList_SetBkColor( $hWnd , $iClrBk )\n\iSets the background color for an image list (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_SetBkColor( $hWnd , $iClrBk )"/>
          <Keyword text="_GUIImageList_SetIconSize" descr="_GUIImageList_SetIconSize( $hWnd , $iCX , $iCY )\n\iSets the dimensions of images in an image list and removes all images from the list (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_SetIconSize( $hWnd , $iCX , $iCY )"/>
          <Keyword text="_GUIImageList_SetImageCount" descr="_GUIImageList_SetImageCount( $hWnd , $iNewCount )\n\iResizes an existing image list (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_SetImageCount( $hWnd , $iNewCount )"/>
          <Keyword text="_GUIImageList_Swap" descr="_GUIImageList_Swap( $hWnd , $iSource , $iDestination )\n\iSource image is copied to the destination image&apos;s index (Requires: #include &lt;GuiImageList.au3&gt;)\i0" pattern="_GUIImageList_Swap( $hWnd , $iSource , $iDestination )"/>
          <Keyword text="_GUIScrollBars_EnableScrollBar" descr="_GUIScrollBars_EnableScrollBar( $hWnd , $wSBflags = $SB_BOTH , $wArrows = $ESB_ENABLE_BOTH )\n\iEnable/Disable scrollbar (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_EnableScrollBar( $hWnd , $wSBflags = $SB_BOTH , $wArrows = $ESB_ENABLE_BOTH )"/>
          <Keyword text="_GUIScrollBars_GetScrollBarInfoEx" descr="_GUIScrollBars_GetScrollBarInfoEx( $hWnd , $idObject )\n\iRetrieves information about the specified scroll bar (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_GetScrollBarInfoEx( $hWnd , $idObject )"/>
          <Keyword text="_GUIScrollBars_GetScrollBarRGState" descr="_GUIScrollBars_GetScrollBarRGState( $hWnd , $idObject )\n\iRetrieves the state of a scroll bar component (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_GetScrollBarRGState( $hWnd , $idObject )"/>
          <Keyword text="_GUIScrollBars_GetScrollBarRect" descr="_GUIScrollBars_GetScrollBarRect( $hWnd , $idObject )\n\iRetrieves coordinates of the scroll bar (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_GetScrollBarRect( $hWnd , $idObject )"/>
          <Keyword text="_GUIScrollBars_GetScrollBarXYLineButton" descr="_GUIScrollBars_GetScrollBarXYLineButton( $hWnd , $idObject )\n\iRetrieves the Height or width of the thumb (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_GetScrollBarXYLineButton( $hWnd , $idObject )"/>
          <Keyword text="_GUIScrollBars_GetScrollBarXYThumbBottom" descr="_GUIScrollBars_GetScrollBarXYThumbBottom( $hWnd , $idObject )\n\iRetrieves the Position of the bottom or right of the thumb (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_GetScrollBarXYThumbBottom( $hWnd , $idObject )"/>
          <Keyword text="_GUIScrollBars_GetScrollBarXYThumbTop" descr="_GUIScrollBars_GetScrollBarXYThumbTop( $hWnd , $idObject )\n\iRetrieves the Position of the top or left of the thumb (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_GetScrollBarXYThumbTop( $hWnd , $idObject )"/>
          <Keyword text="_GUIScrollBars_GetScrollInfo" descr="_GUIScrollBars_GetScrollInfo( $hWnd , $fnBar , ByRef $tSCROLLINFO )\n\iRetrieves the parameters of a scroll bar (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_GetScrollInfo( $hWnd , $fnBar , ByRef $tSCROLLINFO )"/>
          <Keyword text="_GUIScrollBars_GetScrollInfoEx" descr="_GUIScrollBars_GetScrollInfoEx( $hWnd , $fnBar )\n\iRetrieves the parameters of a scroll bar (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_GetScrollInfoEx( $hWnd , $fnBar )"/>
          <Keyword text="_GUIScrollBars_GetScrollInfoMax" descr="_GUIScrollBars_GetScrollInfoMax( $hWnd , $fnBar )\n\iRetrieves the maximum scrolling position (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_GetScrollInfoMax( $hWnd , $fnBar )"/>
          <Keyword text="_GUIScrollBars_GetScrollInfoMin" descr="_GUIScrollBars_GetScrollInfoMin( $hWnd , $fnBar )\n\iRetrieves the minimum scrolling position (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_GetScrollInfoMin( $hWnd , $fnBar )"/>
          <Keyword text="_GUIScrollBars_GetScrollInfoPage" descr="_GUIScrollBars_GetScrollInfoPage( $hWnd , $fnBar )\n\iRetrieves the page size (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_GetScrollInfoPage( $hWnd , $fnBar )"/>
          <Keyword text="_GUIScrollBars_GetScrollInfoPos" descr="_GUIScrollBars_GetScrollInfoPos( $hWnd , $fnBar )\n\iRetrieves the position of the scroll box (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_GetScrollInfoPos( $hWnd , $fnBar )"/>
          <Keyword text="_GUIScrollBars_GetScrollInfoTrackPos" descr="_GUIScrollBars_GetScrollInfoTrackPos( $hWnd , $fnBar )\n\iRetrieves the immediate position of a scroll box that the user is dragging (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_GetScrollInfoTrackPos( $hWnd , $fnBar )"/>
          <Keyword text="_GUIScrollBars_GetScrollPos" descr="_GUIScrollBars_GetScrollPos( $hWnd , $nBar )\n\iRetrieves the current position of the scroll box (thumb) in the specified scroll bar (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_GetScrollPos( $hWnd , $nBar )"/>
          <Keyword text="_GUIScrollBars_GetScrollRange" descr="_GUIScrollBars_GetScrollRange( $hWnd , $nBar )\n\iRetrieves the current minimum and maximum scroll box (thumb) positions for the specified scroll bar (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_GetScrollRange( $hWnd , $nBar )"/>
          <Keyword text="_GUIScrollBars_Init" descr="_GUIScrollBars_Init( $hWnd , $iHMax = -1 , $ivMax = -1 )\n\iInitialize the scrollbars for the window (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_Init( $hWnd , $iHMax = -1 , $ivMax = -1 )"/>
          <Keyword text="_GUIScrollBars_ScrollWindow" descr="_GUIScrollBars_ScrollWindow( $hWnd , $iXAmount , $iYAmount )\n\iScrolls the contents of the specified window&apos;s client area (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_ScrollWindow( $hWnd , $iXAmount , $iYAmount )"/>
          <Keyword text="_GUIScrollBars_SetScrollInfo" descr="_GUIScrollBars_SetScrollInfo( $hWnd , $fnBar , $tSCROLLINFO , $fRedraw = True )\n\iSets the parameters of a scroll bar (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_SetScrollInfo( $hWnd , $fnBar , $tSCROLLINFO , $fRedraw = True )"/>
          <Keyword text="_GUIScrollBars_SetScrollInfoMax" descr="_GUIScrollBars_SetScrollInfoMax( $hWnd , $fnBar , $nMax )\n\iSets the maximum scrolling position (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_SetScrollInfoMax( $hWnd , $fnBar , $nMax )"/>
          <Keyword text="_GUIScrollBars_SetScrollInfoMin" descr="_GUIScrollBars_SetScrollInfoMin( $hWnd , $fnBar , $nMin )\n\iSets the minimum scrolling position (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_SetScrollInfoMin( $hWnd , $fnBar , $nMin )"/>
          <Keyword text="_GUIScrollBars_SetScrollInfoPage" descr="_GUIScrollBars_SetScrollInfoPage( $hWnd , $fnBar , $nPage )\n\iSets the page size (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_SetScrollInfoPage( $hWnd , $fnBar , $nPage )"/>
          <Keyword text="_GUIScrollBars_SetScrollInfoPos" descr="_GUIScrollBars_SetScrollInfoPos( $hWnd , $fnBar , $nPos )\n\iSets the position of the scroll box (thumb) in the specified scroll bar (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_SetScrollInfoPos( $hWnd , $fnBar , $nPos )"/>
          <Keyword text="_GUIScrollBars_SetScrollRange" descr="_GUIScrollBars_SetScrollRange( $hWnd , $nBar , $nMinPos , $nMaxPos )\n\iSets the minimum and maximum scroll box positions for the specified scroll bar (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_SetScrollRange( $hWnd , $nBar , $nMinPos , $nMaxPos )"/>
          <Keyword text="_GUIScrollBars_ShowScrollBar" descr="_GUIScrollBars_ShowScrollBar( $hWnd , $nBar , $fShow = True )\n\iShows or hides the specified scroll bar (Requires: #include &lt;GuiScrollBars.au3&gt;)\i0" pattern="_GUIScrollBars_ShowScrollBar( $hWnd , $nBar , $fShow = True )"/>
          <Keyword text="_GUIToolTip_Activate" descr="_GUIToolTip_Activate( $hWnd , $fActivate = True )\n\iActivates or deactivates the control (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_Activate( $hWnd , $fActivate = True )"/>
          <Keyword text="_GUIToolTip_AddTool" descr="_GUIToolTip_AddTool( $hTool , $hWnd , $sText , $iID = 0 , $iLeft = 0 , $iTop = 0 , $iRight = 0 , $iBottom = 0 , $iFlags = 8 , $iParam = 0 )\n\iRegisters a tool with the control (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_AddTool( $hTool , $hWnd , $sText , $iID = 0 , $iLeft = 0 , $iTop = 0 , $iRight = 0 , $iBottom = 0 , $iFlags = 8 , $iParam = 0 )"/>
          <Keyword text="_GUIToolTip_AdjustRect" descr="_GUIToolTip_AdjustRect( $hWnd , ByRef $tRect , $fLarger = True )\n\iCalculates the text display rectangle from the window rectangle (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_AdjustRect( $hWnd , ByRef $tRect , $fLarger = True )"/>
          <Keyword text="_GUIToolTip_BitsToTTF" descr="_GUIToolTip_BitsToTTF( $iFlags )\n\iEncode user bit flags to $TTF_ flags (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_BitsToTTF( $iFlags )"/>
          <Keyword text="_GUIToolTip_Create" descr="_GUIToolTip_Create( $hWnd , $iStyle = 0x00000003 )\n\iCreates a ToolTip control (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_Create( $hWnd , $iStyle = 0x00000003 )"/>
          <Keyword text="_GUIToolTip_DelTool" descr="_GUIToolTip_DelTool( $hWnd , $hTool , $iID = 0 )\n\iRemoves a tool (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_DelTool( $hWnd , $hTool , $iID = 0 )"/>
          <Keyword text="_GUIToolTip_Destroy" descr="_GUIToolTip_Destroy( ByRef $hWnd )\n\iDelete the ToolTip control (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_Destroy( ByRef $hWnd )"/>
          <Keyword text="_GUIToolTip_EnumTools" descr="_GUIToolTip_EnumTools( $hWnd , $iIndex )\n\iRetrieves information about the current tool (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_EnumTools( $hWnd , $iIndex )"/>
          <Keyword text="_GUIToolTip_GetBubbleHeight" descr="_GUIToolTip_GetBubbleHeight( $hWnd , $hTool , $iID , $iFlags = 48 )\n\iReturns the height of the control (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_GetBubbleHeight( $hWnd , $hTool , $iID , $iFlags = 48 )"/>
          <Keyword text="_GUIToolTip_GetBubbleSize" descr="_GUIToolTip_GetBubbleSize( $hWnd , $hTool , $iID , $iFlags = 0x000000A0 )\n\iReturns the width and height of the control (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_GetBubbleSize( $hWnd , $hTool , $iID , $iFlags = 0x000000A0 )"/>
          <Keyword text="_GUIToolTip_GetBubbleWidth" descr="_GUIToolTip_GetBubbleWidth( $hWnd , $hTool , $iID , $iFlags = 48 )\n\iReturns the width of a ToolTip control (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_GetBubbleWidth( $hWnd , $hTool , $iID , $iFlags = 48 )"/>
          <Keyword text="_GUIToolTip_GetCurrentTool" descr="_GUIToolTip_GetCurrentTool( $hWnd )\n\iRetrieves information for the current tool (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_GetCurrentTool( $hWnd )"/>
          <Keyword text="_GUIToolTip_GetDelayTime" descr="_GUIToolTip_GetDelayTime( $hWnd , $iDuration )\n\iRetrieves the initial, pop-up or reshow durations (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_GetDelayTime( $hWnd , $iDuration )"/>
          <Keyword text="_GUIToolTip_GetMargin" descr="_GUIToolTip_GetMargin( $hWnd )\n\iRetrieves the top, left, bottom, and right margins (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_GetMargin( $hWnd )"/>
          <Keyword text="_GUIToolTip_GetMarginEx" descr="_GUIToolTip_GetMarginEx( $hWnd )\n\iRetrieves the top, left, bottom, and right margins (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_GetMarginEx( $hWnd )"/>
          <Keyword text="_GUIToolTip_GetMaxTipWidth" descr="_GUIToolTip_GetMaxTipWidth( $hWnd )\n\iRetrieves the maximum width for a ToolTip window (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_GetMaxTipWidth( $hWnd )"/>
          <Keyword text="_GUIToolTip_GetText" descr="_GUIToolTip_GetText( $hWnd , $hTool , $iID )\n\iRetrieves the text (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_GetText( $hWnd , $hTool , $iID )"/>
          <Keyword text="_GUIToolTip_GetTipBkColor" descr="_GUIToolTip_GetTipBkColor( $hWnd )\n\iRetrieves the background color (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_GetTipBkColor( $hWnd )"/>
          <Keyword text="_GUIToolTip_GetTipTextColor" descr="_GUIToolTip_GetTipTextColor( $hWnd )\n\iRetrieves the text color (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_GetTipTextColor( $hWnd )"/>
          <Keyword text="_GUIToolTip_GetTitleBitMap" descr="_GUIToolTip_GetTitleBitMap( $hWnd )\n\iRetrieves the title bitmap icon (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_GetTitleBitMap( $hWnd )"/>
          <Keyword text="_GUIToolTip_GetTitleText" descr="_GUIToolTip_GetTitleText( $hWnd )\n\iRetrieve the title (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_GetTitleText( $hWnd )"/>
          <Keyword text="_GUIToolTip_GetToolCount" descr="_GUIToolTip_GetToolCount( $hWnd )\n\iRetrieves the tool count (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_GetToolCount( $hWnd )"/>
          <Keyword text="_GUIToolTip_GetToolInfo" descr="_GUIToolTip_GetToolInfo( $hWnd , $hTool , $iID )\n\iRetrieves the information about a specific tool (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_GetToolInfo( $hWnd , $hTool , $iID )"/>
          <Keyword text="_GUIToolTip_HitTest" descr="_GUIToolTip_HitTest( $hWnd , $hTool , $iX , $iY )\n\iRetrieves the information that a ToolTip control maintains about a tool (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_HitTest( $hWnd , $hTool , $iX , $iY )"/>
          <Keyword text="_GUIToolTip_NewToolRect" descr="_GUIToolTip_NewToolRect( $hWnd , $hTool , $iID , $iLeft , $iTop , $iRight , $iBottom )\n\iSets a new bounding rectangle for a tool (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_NewToolRect( $hWnd , $hTool , $iID , $iLeft , $iTop , $iRight , $iBottom )"/>
          <Keyword text="_GUIToolTip_Pop" descr="_GUIToolTip_Pop( $hWnd )\n\iRemoves a displayed ToolTip from view (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_Pop( $hWnd )"/>
          <Keyword text="_GUIToolTip_PopUp" descr="_GUIToolTip_PopUp( $hWnd )\n\iCauses the ToolTip to display at the coordinates of the last mouse message (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_PopUp( $hWnd )"/>
          <Keyword text="_GUIToolTip_SetDelayTime" descr="_GUIToolTip_SetDelayTime( $hWnd , $iDuration , $iTime )\n\iSets the initial, pop-up, and reshow durations (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_SetDelayTime( $hWnd , $iDuration , $iTime )"/>
          <Keyword text="_GUIToolTip_SetMargin" descr="_GUIToolTip_SetMargin( $hWnd , $iLeft , $iTop , $iRight , $iBottom )\n\iSets the top, left, bottom, and right margins (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_SetMargin( $hWnd , $iLeft , $iTop , $iRight , $iBottom )"/>
          <Keyword text="_GUIToolTip_SetMaxTipWidth" descr="_GUIToolTip_SetMaxTipWidth( $hWnd , $iWidth )\n\iSets the maximum width for a ToolTip window (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_SetMaxTipWidth( $hWnd , $iWidth )"/>
          <Keyword text="_GUIToolTip_SetTipBkColor" descr="_GUIToolTip_SetTipBkColor( $hWnd , $iColor )\n\iSets the background color (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_SetTipBkColor( $hWnd , $iColor )"/>
          <Keyword text="_GUIToolTip_SetTipTextColor" descr="_GUIToolTip_SetTipTextColor( $hWnd , $iColor )\n\iSets the text color (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_SetTipTextColor( $hWnd , $iColor )"/>
          <Keyword text="_GUIToolTip_SetTitle" descr="_GUIToolTip_SetTitle( $hWnd , $sTitle , $iIcon = 0 )\n\iAdds a standard icon and title string (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_SetTitle( $hWnd , $sTitle , $iIcon = 0 )"/>
          <Keyword text="_GUIToolTip_SetToolInfo" descr="_GUIToolTip_SetToolInfo( $hWnd , $sText , $iID = 0 , $iLeft = 0 , $iTop = 0 , $iRight = 0 , $iBottom = 0 , $iFlags = 8 , $iParam = 0 )\n\iSets the information for a tool (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_SetToolInfo( $hWnd , $sText , $iID = 0 , $iLeft = 0 , $iTop = 0 , $iRight = 0 , $iBottom = 0 , $iFlags = 8 , $iParam = 0 )"/>
          <Keyword text="_GUIToolTip_SetWindowTheme" descr="_GUIToolTip_SetWindowTheme( $hWnd , $sStyle )\n\iSets the visual style (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_SetWindowTheme( $hWnd , $sStyle )"/>
          <Keyword text="_GUIToolTip_TTFToBits" descr="_GUIToolTip_TTFToBits( $iFlags )\n\iDecode $TTF_flags to user bit flags (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_TTFToBits( $iFlags )"/>
          <Keyword text="_GUIToolTip_ToolExists" descr="_GUIToolTip_ToolExists( $hWnd )\n\iDetermines whether a current tool exists (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_ToolExists( $hWnd )"/>
          <Keyword text="_GUIToolTip_ToolToArray" descr="_GUIToolTip_ToolToArray( $hWnd , ByRef $tToolInfo , $iError )\n\iTransfers a ToolInfo structure to an array (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_ToolToArray( $hWnd , ByRef $tToolInfo , $iError )"/>
          <Keyword text="_GUIToolTip_TrackActivate" descr="_GUIToolTip_TrackActivate( $hWnd , $fActivate = True , $hTool = 0 , $iID = 0 )\n\iActivates or deactivates a tracking ToolTip (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_TrackActivate( $hWnd , $fActivate = True , $hTool = 0 , $iID = 0 )"/>
          <Keyword text="_GUIToolTip_TrackPosition" descr="_GUIToolTip_TrackPosition( $hWnd , $iX , $iY )\n\iSets the position of a tracking ToolTip (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_TrackPosition( $hWnd , $iX , $iY )"/>
          <Keyword text="_GUIToolTip_Update" descr="_GUIToolTip_Update( $hWnd )\n\iForces the current tool to be redrawn (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_Update( $hWnd )"/>
          <Keyword text="_GUIToolTip_UpdateTipText" descr="_GUIToolTip_UpdateTipText( $hWnd , $hTool , $iID , $sText )\n\iSets the ToolTip text for a tool (Requires: #include &lt;GuiToolTip.au3&gt;)\i0" pattern="_GUIToolTip_UpdateTipText( $hWnd , $hTool , $iID , $sText )"/>
          <Keyword text="_GetIP" descr="_GetIP()\n\iGet public IP address of a network/computer. (Requires: #include &lt;Inet.au3&gt;)\i0" pattern="_GetIP()"/>
          <Keyword text="_HexToString" descr="_HexToString( $strHex )\n\iConvert a hex string to a string. (Requires: #include &lt;String.au3&gt;)\i0" pattern="_HexToString( $strHex )"/>
          <Keyword text="_IEAction" descr="_IEAction( ByRef $o_object , $s_action )\n\iPerform any of a set of simple actions on the Browser. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEAction( ByRef $o_object , $s_action )"/>
          <Keyword text="_IEAttach" descr="_IEAttach( $s_string , $s_mode = &quot;Title&quot; , $i_instance = 1 )\n\iAttach to the specified instance of Internet Explorer where the search string sub-string matches (based on the selected mode). (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEAttach( $s_string , $s_mode = &quot;Title&quot; , $i_instance = 1 )"/>
          <Keyword text="_IEBodyReadHTML" descr="_IEBodyReadHTML( ByRef $o_object )\n\iReturns the HTML inside the &lt;body&gt; tag of the document. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEBodyReadHTML( ByRef $o_object )"/>
          <Keyword text="_IEBodyReadText" descr="_IEBodyReadText( ByRef $o_object )\n\iReturns the Text inside the &lt;body&gt; tag of the document. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEBodyReadText( ByRef $o_object )"/>
          <Keyword text="_IEBodyWriteHTML" descr="_IEBodyWriteHTML( ByRef $o_object , $s_html )\n\iReplaces the HTML inside the &lt;body&gt; tag of the document. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEBodyWriteHTML( ByRef $o_object , $s_html )"/>
          <Keyword text="_IECreate" descr="_IECreate( $s_Url = &quot;about:blank&quot; , $f_tryAttach = 0 , $f_visible = 1 , $f_wait = 1 , $f_takeFocus = 1 )\n\iCreate an Internet Explorer Browser Window. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IECreate( $s_Url = &quot;about:blank&quot; , $f_tryAttach = 0 , $f_visible = 1 , $f_wait = 1 , $f_takeFocus = 1 )"/>
          <Keyword text="_IECreateEmbedded" descr="_IECreateEmbedded()\n\iCreate a Webbrowser object suitable for embedding in an AutoIt GUI with GuiCtrlCreateObj(). (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IECreateEmbedded()"/>
          <Keyword text="_IEDocGetObj" descr="_IEDocGetObj( ByRef $o_object )\n\iGiven any DOM object, returns a reference to the associated document object. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEDocGetObj( ByRef $o_object )"/>
          <Keyword text="_IEDocInsertHTML" descr="_IEDocInsertHTML( ByRef $o_object , $s_string , $s_where = &quot;beforeend&quot; )\n\iInserts HTML Text in or around an element. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEDocInsertHTML( ByRef $o_object , $s_string , $s_where = &quot;beforeend&quot; )"/>
          <Keyword text="_IEDocInsertText" descr="_IEDocInsertText( ByRef $o_object , $s_string , $s_where = &quot;beforeend&quot; )\n\iInserts Text in or around an element. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEDocInsertText( ByRef $o_object , $s_string , $s_where = &quot;beforeend&quot; )"/>
          <Keyword text="_IEDocReadHTML" descr="_IEDocReadHTML( ByRef $o_object )\n\iReturns the full HTML source of a document. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEDocReadHTML( ByRef $o_object )"/>
          <Keyword text="_IEDocWriteHTML" descr="_IEDocWriteHTML( ByRef $o_object , $s_html )\n\iReplaces the HTML for the entire document. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEDocWriteHTML( ByRef $o_object , $s_html )"/>
          <Keyword text="_IEErrorHandlerDeRegister" descr="_IEErrorHandlerDeRegister()\n\iDisable a registered user COM error handler (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEErrorHandlerDeRegister()"/>
          <Keyword text="_IEErrorHandlerRegister" descr="_IEErrorHandlerRegister( $s_functionName = &quot;__IEInternalErrorHandler&quot; )\n\iRegister and enable a user COM error handler (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEErrorHandlerRegister( $s_functionName = &quot;__IEInternalErrorHandler&quot; )"/>
          <Keyword text="_IEErrorNotify" descr="_IEErrorNotify( $f_notify = -1 )\n\iSpecifies whether IE.au3 automatically notifies of Warnings and Errors (to the console) (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEErrorNotify( $f_notify = -1 )"/>
          <Keyword text="_IEFormElementCheckBoxSelect" descr="_IEFormElementCheckBoxSelect( ByRef $o_object , $s_string , $s_name = &quot;&quot; , $f_select = 1 , $s_mode = &quot;byValue&quot; , $f_fireEvent = 1 )\n\iSet the value of a specified form element. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEFormElementCheckBoxSelect( ByRef $o_object , $s_string , $s_name = &quot;&quot; , $f_select = 1 , $s_mode = &quot;byValue&quot; , $f_fireEvent = 1 )"/>
          <Keyword text="_IEFormElementGetCollection" descr="_IEFormElementGetCollection( ByRef $o_object , $i_index = -1 )\n\iReturns a collection object variable representing all Form Elements within a given Form. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEFormElementGetCollection( ByRef $o_object , $i_index = -1 )"/>
          <Keyword text="_IEFormElementGetObjByName" descr="_IEFormElementGetObjByName( ByRef $o_object , $s_name , $i_index = 0 )\n\iReturns an object reference to a Form Element by name. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEFormElementGetObjByName( ByRef $o_object , $s_name , $i_index = 0 )"/>
          <Keyword text="_IEFormElementGetValue" descr="_IEFormElementGetValue( ByRef $o_object )\n\iReturns the value of a given Form Element. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEFormElementGetValue( ByRef $o_object )"/>
          <Keyword text="_IEFormElementOptionSelect" descr="_IEFormElementOptionSelect( ByRef $o_object , $s_string , $f_select = 1 , $s_mode = &quot;byValue&quot; , $f_fireEvent = 1 )\n\iSet the value of a specified form element. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEFormElementOptionSelect( ByRef $o_object , $s_string , $f_select = 1 , $s_mode = &quot;byValue&quot; , $f_fireEvent = 1 )"/>
          <Keyword text="_IEFormElementRadioSelect" descr="_IEFormElementRadioSelect( ByRef $o_object , $s_string , $s_name , $f_select = 1 , $s_mode = &quot;byValue&quot; , $f_fireEvent = 1 )\n\iSet the value of a specified form element. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEFormElementRadioSelect( ByRef $o_object , $s_string , $s_name , $f_select = 1 , $s_mode = &quot;byValue&quot; , $f_fireEvent = 1 )"/>
          <Keyword text="_IEFormElementSetValue" descr="_IEFormElementSetValue( ByRef $o_object , $s_newvalue , $f_fireEvent = 1 )\n\iSet the value of a specified Form Element. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEFormElementSetValue( ByRef $o_object , $s_newvalue , $f_fireEvent = 1 )"/>
          <Keyword text="_IEFormGetCollection" descr="_IEFormGetCollection( ByRef $o_object , $i_index = -1 )\n\iReturns a collection object variable representing the Forms in the document or a single form by index. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEFormGetCollection( ByRef $o_object , $i_index = -1 )"/>
          <Keyword text="_IEFormGetObjByName" descr="_IEFormGetObjByName( ByRef $o_object , $s_name , $i_index = 0 )\n\iReturns an object reference to a Form by name. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEFormGetObjByName( ByRef $o_object , $s_name , $i_index = 0 )"/>
          <Keyword text="_IEFormImageClick" descr="_IEFormImageClick( ByRef $o_object , $s_linkText , $s_mode = &quot;src&quot; , $i_index = 0 , $f_wait = 1 )\n\iSimulate a mouse click on an &lt;input type=image&gt;. Match by sub-string match of alt text, name or src. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEFormImageClick( ByRef $o_object , $s_linkText , $s_mode = &quot;src&quot; , $i_index = 0 , $f_wait = 1 )"/>
          <Keyword text="_IEFormReset" descr="_IEFormReset( ByRef $o_object )\n\iReset a specified Form setting the values back to their loaded defaults. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEFormReset( ByRef $o_object )"/>
          <Keyword text="_IEFormSubmit" descr="_IEFormSubmit( ByRef $o_object , $f_wait = 1 )\n\iSubmit a specified Form. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEFormSubmit( ByRef $o_object , $f_wait = 1 )"/>
          <Keyword text="_IEFrameGetCollection" descr="_IEFrameGetCollection( ByRef $o_object , $i_index = -1 )\n\iReturns a collection object containing the frames in a FrameSet or the iFrames on a normal page or a single Frame or iFrame by index. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEFrameGetCollection( ByRef $o_object , $i_index = -1 )"/>
          <Keyword text="_IEFrameGetObjByName" descr="_IEFrameGetObjByName( ByRef $o_object , $s_name )\n\iReturns an object reference to a Frame or iFrame by name. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEFrameGetObjByName( ByRef $o_object , $s_name )"/>
          <Keyword text="_IEGetObjById" descr="_IEGetObjById( ByRef $o_object , $s_Id )\n\iReturns an object variable by id or name. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEGetObjById( ByRef $o_object , $s_Id )"/>
          <Keyword text="_IEGetObjByName" descr="_IEGetObjByName( ByRef $o_object , $s_Id , $i_index = 0 )\n\iReturns an object variable by name or id. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEGetObjByName( ByRef $o_object , $s_Id , $i_index = 0 )"/>
          <Keyword text="_IEHeadInsertEventScript" descr="_IEHeadInsertEventScript( ByRef $o_object , $s_htmlFor , $s_event , $s_script )\n\iInserts a Javascript into the Head of the document. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEHeadInsertEventScript( ByRef $o_object , $s_htmlFor , $s_event , $s_script )"/>
          <Keyword text="_IEImgClick" descr="_IEImgClick( ByRef $o_object , $s_linkText , $s_mode = &quot;src&quot; , $i_index = 0 , $f_wait = 1 )\n\iSimulate a mouse click on an image. Match by sub-string match of alt text, name, or src. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEImgClick( ByRef $o_object , $s_linkText , $s_mode = &quot;src&quot; , $i_index = 0 , $f_wait = 1 )"/>
          <Keyword text="_IEImgGetCollection" descr="_IEImgGetCollection( ByRef $o_object , $i_index = -1 )\n\iReturns a collection object variable representing the IMG tags in the document or a single image by index. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEImgGetCollection( ByRef $o_object , $i_index = -1 )"/>
          <Keyword text="_IEIsFrameSet" descr="_IEIsFrameSet( ByRef $o_object )\n\iChecks to see if the specified Window contains a FrameSet. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEIsFrameSet( ByRef $o_object )"/>
          <Keyword text="_IELinkClickByIndex" descr="_IELinkClickByIndex( ByRef $o_object , $i_index , $f_wait = 1 )\n\iSimulate a mouse click on a link by 0-based index (in source order). (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IELinkClickByIndex( ByRef $o_object , $i_index , $f_wait = 1 )"/>
          <Keyword text="_IELinkClickByText" descr="_IELinkClickByText( ByRef $o_object , $s_linkText , $i_index = 0 , $f_wait = 1 )\n\iSimulate a mouse click on a link with text sub-string matching the string provided. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IELinkClickByText( ByRef $o_object , $s_linkText , $i_index = 0 , $f_wait = 1 )"/>
          <Keyword text="_IELinkGetCollection" descr="_IELinkGetCollection( ByRef $o_object , $i_index = -1 )\n\iReturns a collection object containing all links in the document or a single link by index. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IELinkGetCollection( ByRef $o_object , $i_index = -1 )"/>
          <Keyword text="_IELoadWait" descr="_IELoadWait( ByRef $o_object , $i_delay = 0 , $i_timeout = -1 )\n\iWait for a browser page load to complete before returning. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IELoadWait( ByRef $o_object , $i_delay = 0 , $i_timeout = -1 )"/>
          <Keyword text="_IELoadWaitTimeout" descr="_IELoadWaitTimeout( $i_timeout = -1 )\n\iRetrieve or set the current value in milliseconds _IELoadWait will try before timing out. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IELoadWaitTimeout( $i_timeout = -1 )"/>
          <Keyword text="_IENavigate" descr="_IENavigate( ByRef $o_object , $s_url , $f_wait = 1 )\n\iDirects an existing browser window to navigate to the specified URL. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IENavigate( ByRef $o_object , $s_url , $f_wait = 1 )"/>
          <Keyword text="_IEPropertyGet" descr="_IEPropertyGet( ByRef $o_object , $s_property )\n\iReturns a select property of the Browser or DOM element. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEPropertyGet( ByRef $o_object , $s_property )"/>
          <Keyword text="_IEPropertySet" descr="_IEPropertySet( ByRef $o_object , $s_property , $newvalue )\n\iSet a select property of the Browser or DOM element. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEPropertySet( ByRef $o_object , $s_property , $newvalue )"/>
          <Keyword text="_IEQuit" descr="_IEQuit( ByRef $o_object )\n\iClose the browser and remove the object reference to it. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IEQuit( ByRef $o_object )"/>
          <Keyword text="_IETableGetCollection" descr="_IETableGetCollection( ByRef $o_object , $i_index = -1 )\n\iReturns a collection object variable representing all the tables in a document or a single table by index. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IETableGetCollection( ByRef $o_object , $i_index = -1 )"/>
          <Keyword text="_IETableWriteToArray" descr="_IETableWriteToArray( ByRef $o_object , $f_transpose )\n\iReads the contents of a Table into an array. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IETableWriteToArray( ByRef $o_object , $f_transpose )"/>
          <Keyword text="_IETagNameAllGetCollection" descr="_IETagNameAllGetCollection( ByRef $o_object , $i_index = -1 )\n\iReturns a collection object all elements in the document or document hierarchy in source order or a single element by index. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IETagNameAllGetCollection( ByRef $o_object , $i_index = -1 )"/>
          <Keyword text="_IETagNameGetCollection" descr="_IETagNameGetCollection( ByRef $o_object , $s_TagName , $i_index = -1 )\n\iReturns a collection object of all elements in the object with the specified TagName or a single element by index. (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IETagNameGetCollection( ByRef $o_object , $s_TagName , $i_index = -1 )"/>
          <Keyword text="_IE_Example" descr="_IE_Example( $s_module = &quot;basic&quot; )\n\iDisplay a new browser window pre-loaded with documents to be used in IE.au3 examples or your own testing (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IE_Example( $s_module = &quot;basic&quot; )"/>
          <Keyword text="_IE_Introduction" descr="_IE_Introduction( $s_module = &quot;basic&quot; )\n\iDisplay introductory information about IE.au3 in a new browser window (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IE_Introduction( $s_module = &quot;basic&quot; )"/>
          <Keyword text="_IE_VersionInfo" descr="_IE_VersionInfo()\n\iReturns an array of information about the IE.au3 version (Requires: #include &lt;IE.au3&gt; )\i0" pattern="_IE_VersionInfo()"/>
          <Keyword text="_INetExplorerCapable" descr="_INetExplorerCapable( $s_IEString )\n\iConverts a string to IE(Internet Explorer) capable line (Requires: #include &lt;Inet.au3&gt;)\i0" pattern="_INetExplorerCapable( $s_IEString )"/>
          <Keyword text="_INetGetSource" descr="_INetGetSource( $s_URL , $bString = &apos;True&apos; )\n\iGets the source from an URL without writing a temp file. (Requires: #include &lt;Inet.au3&gt;)\i0" pattern="_INetGetSource( $s_URL , $bString = &apos;True&apos; )"/>
          <Keyword text="_INetMail" descr="_INetMail( $s_MailTo , $s_MailSubject , $s_MailBody )\n\iOpens default user&apos;s mail client with given address, subject, and body. (Requires: #include &lt;Inet.au3&gt;)\i0" pattern="_INetMail( $s_MailTo , $s_MailSubject , $s_MailBody )"/>
          <Keyword text="_INetSmtpMail" descr="_INetSmtpMail( $s_SmtpServer , $s_FromName , $s_FromAddress , $s_ToAddress , $s_Subject , $as_Body , $s_helo , $s_first , $b_trace )\n\iSends an email without using an external email program. (Requires: #include &lt;Inet.au3&gt;)\i0" pattern="_INetSmtpMail( $s_SmtpServer , $s_FromName , $s_FromAddress , $s_ToAddress , $s_Subject , $as_Body , $s_helo , $s_first , $b_trace )"/>
          <Keyword text="_Iif" descr="_Iif( $fTest , $vTrueVal , $vFalseVal )\n\iPerform a boolean test within an expression. (Requires: #include &lt;Misc.au3&gt;)\i0" pattern="_Iif( $fTest , $vTrueVal , $vFalseVal )"/>
          <Keyword text="_IsPressed" descr="_IsPressed( $sHexKey , $vDLL = &apos;user32.dll&apos; )\n\iCheck if key has been pressed (Requires: #include &lt;Misc.au3&gt;)\i0" pattern="_IsPressed( $sHexKey , $vDLL = &apos;user32.dll&apos; )"/>
          <Keyword text="_MathCheckDiv" descr="_MathCheckDiv( $i_NumA , $i_NumB )\n\iChecks if NumA is divisable by NumB (Requires: #include &lt;Math.au3&gt;)\i0" pattern="_MathCheckDiv( $i_NumA , $i_NumB )"/>
          <Keyword text="_Max" descr="_Max( $nNum1 , $nNum2 )\n\iEvaluates which of the two numbers is higher. (Requires: #include &lt;Math.au3&gt;)\i0" pattern="_Max( $nNum1 , $nNum2 )"/>
          <Keyword text="_MemGlobalAlloc" descr="_MemGlobalAlloc( $iBytes , $iFlags = 0 )\n\iAllocates the specified number of bytes from the heap (Requires: #include &lt;Memory.au3&gt;)\i0" pattern="_MemGlobalAlloc( $iBytes , $iFlags = 0 )"/>
          <Keyword text="_MemGlobalFree" descr="_MemGlobalFree( $hMem )\n\iFrees the specified global memory object and invalidates its handle (Requires: #include &lt;Memory.au3&gt;)\i0" pattern="_MemGlobalFree( $hMem )"/>
          <Keyword text="_MemGlobalLock" descr="_MemGlobalLock( $hMem )\n\iLocks a global memory object and returns a pointer to the first byte of the object&apos;s memory block (Requires: #include &lt;Memory.au3&gt;)\i0" pattern="_MemGlobalLock( $hMem )"/>
          <Keyword text="_MemGlobalSize" descr="_MemGlobalSize( $hMem )\n\iRetrieves the current size of the specified global memory object (Requires: #include &lt;Memory.au3&gt;)\i0" pattern="_MemGlobalSize( $hMem )"/>
          <Keyword text="_MemGlobalUnlock" descr="_MemGlobalUnlock( $hMem )\n\iDecrements the lock count associated with a memory object that was allocated with GMEM_MOVEABLE (Requires: #include &lt;Memory.au3&gt;)\i0" pattern="_MemGlobalUnlock( $hMem )"/>
          <Keyword text="_MemMoveMemory" descr="_MemMoveMemory( $pSource , $pDest , $iLength )\n\iMoves memory either forward or backward, aligned or unaligned (Requires: #include &lt;Memory.au3&gt;)\i0" pattern="_MemMoveMemory( $pSource , $pDest , $iLength )"/>
          <Keyword text="_MemVirtualAlloc" descr="_MemVirtualAlloc( $pAddress , $iSize , $iAllocation , $iProtect )\n\iReserves or commits a region of pages in the virtual address space of the calling process (Requires: #include &lt;Memory.au3&gt;)\i0" pattern="_MemVirtualAlloc( $pAddress , $iSize , $iAllocation , $iProtect )"/>
          <Keyword text="_MemVirtualAllocEx" descr="_MemVirtualAllocEx( $hProcess , $pAddress , $iSize , $iAllocation , $iProtect )\n\iReserves a region of memory within the virtual address space of a specified process (Requires: #include &lt;Memory.au3&gt;)\i0" pattern="_MemVirtualAllocEx( $hProcess , $pAddress , $iSize , $iAllocation , $iProtect )"/>
          <Keyword text="_MemVirtualFree" descr="_MemVirtualFree( $pAddress , $iSize , $iFreeType )\n\iReleases a region of pages within the virtual address space of a process (Requires: #include &lt;Memory.au3&gt;)\i0" pattern="_MemVirtualFree( $pAddress , $iSize , $iFreeType )"/>
          <Keyword text="_MemVirtualFreeEx" descr="_MemVirtualFreeEx( $hProcess , $pAddress , $iSize , $iFreeType )\n\iReleases a region of pages within the virtual address space of a process (Requires: #include &lt;Memory.au3&gt;)\i0" pattern="_MemVirtualFreeEx( $hProcess , $pAddress , $iSize , $iFreeType )"/>
          <Keyword text="_Min" descr="_Min( $nNum1 , $nNum2 )\n\iEvaluates which of the two numbers is lower. (Requires: #include &lt;Math.au3&gt;)\i0" pattern="_Min( $nNum1 , $nNum2 )"/>
          <Keyword text="_MouseTrap" descr="_MouseTrap( $iLeft = 0 , $iTop = 0 , $iRight = 0 , $iBottom = 0 )\n\iConfine the Mouse Cursor to specified coords. (Requires: #include &lt;Misc.au3&gt;)\i0" pattern="_MouseTrap( $iLeft = 0 , $iTop = 0 , $iRight = 0 , $iBottom = 0 )"/>
          <Keyword text="_NamedPipes_CallNamedPipe" descr="_NamedPipes_CallNamedPipe( $sPipeName , $pInpBuf , $iInpSize , $pOutBuf , $iOutSize , ByRef $iRead , $iTimeOut = 0 )\n\iPerforms a read/write operation on a named pipe (Requires: #include &lt;NamedPipes.au3&gt;)\i0" pattern="_NamedPipes_CallNamedPipe( $sPipeName , $pInpBuf , $iInpSize , $pOutBuf , $iOutSize , ByRef $iRead , $iTimeOut = 0 )"/>
          <Keyword text="_NamedPipes_ConnectNamedPipe" descr="_NamedPipes_ConnectNamedPipe( $hNamedPipe , $pOverlapped = 0 )\n\iEnables a named pipe server process to wait for a client process to connect (Requires: #include &lt;NamedPipes.au3&gt;)\i0" pattern="_NamedPipes_ConnectNamedPipe( $hNamedPipe , $pOverlapped = 0 )"/>
          <Keyword text="_NamedPipes_CreateNamedPipe" descr="_NamedPipes_CreateNamedPipe( $sName , $iAccess = 2 , $iFlags = 2 , $iACL = 0 , $iType = 1 , $iRead = 1 , $iWait = 0 , $iMaxInst = 25 , $iOutBufSize = 4096 , $iInpBufSize = 4096 , $iDefTimeout = 5000 , $pSecurity = 0 )\n\iCreates an instance of a named pipe (Requires: #include &lt;NamedPipes.au3&gt;)\i0" pattern="_NamedPipes_CreateNamedPipe( $sName , $iAccess = 2 , $iFlags = 2 , $iACL = 0 , $iType = 1 , $iRead = 1 , $iWait = 0 , $iMaxInst = 25 , $iOutBufSize = 4096 , $iInpBufSize = 4096 , $iDefTimeout = 5000 , $pSecurity = 0 )"/>
          <Keyword text="_NamedPipes_CreatePipe" descr="_NamedPipes_CreatePipe( ByRef $hReadPipe , ByRef $hWritePipe , $tSecurity = 0 , $iSize = 0 )\n\iCreates an anonymous pipe (Requires: #include &lt;NamedPipes.au3&gt;)\i0" pattern="_NamedPipes_CreatePipe( ByRef $hReadPipe , ByRef $hWritePipe , $tSecurity = 0 , $iSize = 0 )"/>
          <Keyword text="_NamedPipes_DisconnectNamedPipe" descr="_NamedPipes_DisconnectNamedPipe( $hNamedPipe )\n\iDisconnects the server end of a named pipe instance from a client process (Requires: #include &lt;NamedPipes.au3&gt;)\i0" pattern="_NamedPipes_DisconnectNamedPipe( $hNamedPipe )"/>
          <Keyword text="_NamedPipes_GetNamedPipeHandleState" descr="_NamedPipes_GetNamedPipeHandleState( $hNamedPipe )\n\iRetrieves information about a specified named pipe (Requires: #include &lt;NamedPipes.au3&gt;)\i0" pattern="_NamedPipes_GetNamedPipeHandleState( $hNamedPipe )"/>
          <Keyword text="_NamedPipes_GetNamedPipeInfo" descr="_NamedPipes_GetNamedPipeInfo( $hNamedPipe )\n\iRetrieves information about the specified named pipe (Requires: #include &lt;NamedPipes.au3&gt;)\i0" pattern="_NamedPipes_GetNamedPipeInfo( $hNamedPipe )"/>
          <Keyword text="_NamedPipes_PeekNamedPipe" descr="_NamedPipes_PeekNamedPipe( $hNamedPipe )\n\iCopies data from a pipe into a buffer without removing it from the pipe (Requires: #include &lt;NamedPipes.au3&gt;)\i0" pattern="_NamedPipes_PeekNamedPipe( $hNamedPipe )"/>
          <Keyword text="_NamedPipes_SetNamedPipeHandleState" descr="_NamedPipes_SetNamedPipeHandleState( $hNamedPipe , $iRead , $iWait , $iBytes = 0 , $iTimeOut = 0 )\n\iSets the read mode and the blocking mode of the specified named pipe (Requires: #include &lt;NamedPipes.au3&gt;)\i0" pattern="_NamedPipes_SetNamedPipeHandleState( $hNamedPipe , $iRead , $iWait , $iBytes = 0 , $iTimeOut = 0 )"/>
          <Keyword text="_NamedPipes_TransactNamedPipe" descr="_NamedPipes_TransactNamedPipe( $hNamedPipe , $pInpBuf , $iInpSize , $pOutBuf , $iOutSize , $pOverlapped = 0 )\n\iReads and writes to a named pipe in one network operation (Requires: #include &lt;NamedPipes.au3&gt;)\i0" pattern="_NamedPipes_TransactNamedPipe( $hNamedPipe , $pInpBuf , $iInpSize , $pOutBuf , $iOutSize , $pOverlapped = 0 )"/>
          <Keyword text="_NamedPipes_WaitNamedPipe" descr="_NamedPipes_WaitNamedPipe( $sPipeName , $iTimeOut = 0 )\n\iWaits for an instance of a named pipe to become available (Requires: #include &lt;NamedPipes.au3&gt;)\i0" pattern="_NamedPipes_WaitNamedPipe( $sPipeName , $iTimeOut = 0 )"/>
          <Keyword text="_Net_Share_ConnectionEnum" descr="_Net_Share_ConnectionEnum( $sServer , $sQualifier )\n\iLists all connections made to a shared resource (Requires: #include &lt;NetShare.au3&gt;)\i0" pattern="_Net_Share_ConnectionEnum( $sServer , $sQualifier )"/>
          <Keyword text="_Net_Share_FileClose" descr="_Net_Share_FileClose( $sServer , $iFileID )\n\iForces a resource to close (Requires: #include &lt;NetShare.au3&gt;)\i0" pattern="_Net_Share_FileClose( $sServer , $iFileID )"/>
          <Keyword text="_Net_Share_FileEnum" descr="_Net_Share_FileEnum( $sServer = &quot;&quot; , $sBaseName = &quot;&quot; , $sUserName = &quot;&quot; )\n\iReturns information about open files on a server (Requires: #include &lt;NetShare.au3&gt;)\i0" pattern="_Net_Share_FileEnum( $sServer = &quot;&quot; , $sBaseName = &quot;&quot; , $sUserName = &quot;&quot; )"/>
          <Keyword text="_Net_Share_FileGetInfo" descr="_Net_Share_FileGetInfo( $sServer , $iFileID )\n\iRetrieves information about a particular opening of a server resource (Requires: #include &lt;NetShare.au3&gt;)\i0" pattern="_Net_Share_FileGetInfo( $sServer , $iFileID )"/>
          <Keyword text="_Net_Share_PermStr" descr="_Net_Share_PermStr( $iPerm )\n\iReturns the string representation of a resource&apos;s permissions (Requires: #include &lt;NetShare.au3&gt;)\i0" pattern="_Net_Share_PermStr( $iPerm )"/>
          <Keyword text="_Net_Share_ResourceStr" descr="_Net_Share_ResourceStr( $iResource )\n\iReturns the string representation of a resource (Requires: #include &lt;NetShare.au3&gt;)\i0" pattern="_Net_Share_ResourceStr( $iResource )"/>
          <Keyword text="_Net_Share_SessionDel" descr="_Net_Share_SessionDel( $sServer = &quot;&quot; , $sClientName = &quot;&quot; , $sUserName = &quot;&quot; )\n\iEnds a network session between a server and a workstation (Requires: #include &lt;NetShare.au3&gt;)\i0" pattern="_Net_Share_SessionDel( $sServer = &quot;&quot; , $sClientName = &quot;&quot; , $sUserName = &quot;&quot; )"/>
          <Keyword text="_Net_Share_SessionEnum" descr="_Net_Share_SessionEnum( $sServer = &quot;&quot; , $sClientName = &quot;&quot; , $sUserName = &quot;&quot; )\n\iProvides information about sessions established on a server (Requires: #include &lt;NetShare.au3&gt;)\i0" pattern="_Net_Share_SessionEnum( $sServer = &quot;&quot; , $sClientName = &quot;&quot; , $sUserName = &quot;&quot; )"/>
          <Keyword text="_Net_Share_SessionGetInfo" descr="_Net_Share_SessionGetInfo( $sServer , $sClientName , $sUserName )\n\iRetrieves information about a session established between a server and workstation (Requires: #include &lt;NetShare.au3&gt;)\i0" pattern="_Net_Share_SessionGetInfo( $sServer , $sClientName , $sUserName )"/>
          <Keyword text="_Net_Share_ShareAdd" descr="_Net_Share_ShareAdd( $sServer , $sShare , $iType , $sPath , $sComment = &quot;&quot; , $iMaxUses = -1 )\n\iShares a server resource (Requires: #include &lt;NetShare.au3&gt;)\i0" pattern="_Net_Share_ShareAdd( $sServer , $sShare , $iType , $sPath , $sComment = &quot;&quot; , $iMaxUses = -1 )"/>
          <Keyword text="_Net_Share_ShareCheck" descr="_Net_Share_ShareCheck( $sServer , $sShare )\n\iChecks whether or not a server is sharing a device (Requires: #include &lt;NetShare.au3&gt;)\i0" pattern="_Net_Share_ShareCheck( $sServer , $sShare )"/>
          <Keyword text="_Net_Share_ShareDel" descr="_Net_Share_ShareDel( $sServer , $sShare )\n\iDeletes a share name from a server&apos;s list of shared resources (Requires: #include &lt;NetShare.au3&gt;)\i0" pattern="_Net_Share_ShareDel( $sServer , $sShare )"/>
          <Keyword text="_Net_Share_ShareEnum" descr="_Net_Share_ShareEnum( $sServer = &quot;&quot; )\n\iRetrieves information about each shared resource on a server (Requires: #include &lt;NetShare.au3&gt;)\i0" pattern="_Net_Share_ShareEnum( $sServer = &quot;&quot; )"/>
          <Keyword text="_Net_Share_ShareGetInfo" descr="_Net_Share_ShareGetInfo( $sServer , $sShare )\n\iRetrieves information about a particular shared resource on a server (Requires: #include &lt;NetShare.au3&gt;)\i0" pattern="_Net_Share_ShareGetInfo( $sServer , $sShare )"/>
          <Keyword text="_Net_Share_ShareSetInfo" descr="_Net_Share_ShareSetInfo( $sServer , $sShare , $sComment , $iMaxUses )\n\iShares a server resource (Requires: #include &lt;NetShare.au3&gt;)\i0" pattern="_Net_Share_ShareSetInfo( $sServer , $sShare , $sComment , $iMaxUses )"/>
          <Keyword text="_Net_Share_StatisticsGetSvr" descr="_Net_Share_StatisticsGetSvr( $sServer = &quot;&quot; )\n\iRetrieves operating statistics for a server (Requires: #include &lt;NetShare.au3&gt;)\i0" pattern="_Net_Share_StatisticsGetSvr( $sServer = &quot;&quot; )"/>
          <Keyword text="_Net_Share_StatisticsGetWrk" descr="_Net_Share_StatisticsGetWrk( $sWorkStation = &quot;&quot; )\n\iRetrieves operating statistics for a workstation (Requires: #include &lt;NetShare.au3&gt;)\i0" pattern="_Net_Share_StatisticsGetWrk( $sWorkStation = &quot;&quot; )"/>
          <Keyword text="_Now" descr="_Now()\n\iReturns the current Date and Time in PC&apos;s format. (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_Now()"/>
          <Keyword text="_NowCalc" descr="_NowCalc()\n\iReturns the current Date and Time in format YYYY/MM/DD HH:MM:SS for use in date calculations. (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_NowCalc()"/>
          <Keyword text="_NowCalcDate" descr="_NowCalcDate()\n\iReturns the current Date in format YYYY/MM/DD. (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_NowCalcDate()"/>
          <Keyword text="_NowDate" descr="_NowDate()\n\iReturns the current Date in the Pc&apos;s format. (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_NowDate()"/>
          <Keyword text="_NowTime" descr="_NowTime( $sType = 3 )\n\iReturns the current Time in the requested format. (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_NowTime( $sType = 3 )"/>
          <Keyword text="_PathFull" descr="_PathFull( $sRelativePath , $sBasePath = @WorkingDir )\n\iCreates a path based on the relative path you provide. The newly created absolute path is returned (Requires: #include &lt;File.au3&gt;)\i0" pattern="_PathFull( $sRelativePath , $sBasePath = @WorkingDir )"/>
          <Keyword text="_PathGetRelative" descr="_PathGetRelative( $sFrom , $sTo )\n\iReturns the relative path to a directory (Requires: #include &lt;File.au3&gt;)\i0" pattern="_PathGetRelative( $sFrom , $sTo )"/>
          <Keyword text="_PathMake" descr="_PathMake( $szDrive , $szDir , $szFName , $szExt )\n\iCreates a path from drive, directory, file name and file extension parts. Not all parts must be passed. (Requires: #include &lt;File.au3&gt;)\i0" pattern="_PathMake( $szDrive , $szDir , $szFName , $szExt )"/>
          <Keyword text="_PathSplit" descr="_PathSplit( $szPath , ByRef $szDrive , ByRef $szDir , ByRef $szFName , ByRef $szExt )\n\iSplits a path into the drive, directory, file name and file extension parts. An empty string is set if a part is missing. (Requires: #include &lt;File.au3&gt;)\i0" pattern="_PathSplit( $szPath , ByRef $szDrive , ByRef $szDir , ByRef $szFName , ByRef $szExt )"/>
          <Keyword text="_ProcessGetName" descr="_ProcessGetName( $iPID )\n\iReturns a string containing the process name that belongs to a given PID. (Requires: #include &lt;Process.au3&gt;)\i0" pattern="_ProcessGetName( $iPID )"/>
          <Keyword text="_ProcessGetPriority" descr="_ProcessGetPriority( $i_PID )\n\iGet the priority of an open process (Requires: #include &lt;Process.au3&gt;)\i0" pattern="_ProcessGetPriority( $i_PID )"/>
          <Keyword text="_Radian" descr="_Radian( $nDegrees )\n\iConverts degrees to radians. (Requires: #include &lt;Math.au3&gt;)\i0" pattern="_Radian( $nDegrees )"/>
          <Keyword text="_ReplaceStringInFile" descr="_ReplaceStringInFile( $szFileName , $szSearchString , $szReplaceString , $fCaseness = 0 , $fOccurance = 1 )\n\iReplaces a string with another string in the given text file (binary won&apos;t work!) (Requires: #include &lt;File.au3&gt;)\i0" pattern="_ReplaceStringInFile( $szFileName , $szSearchString , $szReplaceString , $fCaseness = 0 , $fOccurance = 1 )"/>
          <Keyword text="_RunDOS"/>
          <Keyword text="_RunDos" descr="_RunDos( $sCommand )\n\iExecutes a DOS command in a hidden command window. (Requires: #include &lt;Process.au3&gt;)\i0" pattern="_RunDos( $sCommand )"/>
          <Keyword text="_SQLite_Changes" descr="_SQLite_Changes( $hDB )\n\iReturns the number of database rows that were changed by the most recently completed statement with this connection (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_Changes( $hDB )"/>
          <Keyword text="_SQLite_Close" descr="_SQLite_Close( $hDB )\n\iClose an open database. (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_Close( $hDB )"/>
          <Keyword text="_SQLite_Display2DResult" descr="_SQLite_Display2DResult( $aResult , $iCellWidth = 0 , $bReturn = 0 )\n\iReturns or prints to Console a formated display of a 2Dimensional array (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_Display2DResult( $aResult , $iCellWidth = 0 , $bReturn = 0 )"/>
          <Keyword text="_SQLite_Encode" descr="_SQLite_Encode( $vData )\n\iBinary encodes a string, number or binary data for use as BLOB in SQLite statements. (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_Encode( $vData )"/>
          <Keyword text="_SQLite_ErrCode" descr="_SQLite_ErrCode( $hDB )\n\iReturns last error code (numeric) (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_ErrCode( $hDB )"/>
          <Keyword text="_SQLite_ErrMsg" descr="_SQLite_ErrMsg( $hDB )\n\iReturns a string describing in english the error condition for the most recent sqlite3_* API call (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_ErrMsg( $hDB )"/>
          <Keyword text="_SQLite_Escape" descr="_SQLite_Escape( $sString )\n\iEscapes a string or number for use as TEXT in SQLite statements (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_Escape( $sString )"/>
          <Keyword text="_SQLite_Exec" descr="_SQLite_Exec( $hDB , $sSQL , $sCallBack )\n\iExecutes a SQLite query, does not handle results. (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_Exec( $hDB , $sSQL , $sCallBack )"/>
          <Keyword text="_SQLite_FastEncode" descr="_SQLite_FastEncode( $vData )\n\iFast encodes binary data (exclusively) for use in SQLite statements (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_FastEncode( $vData )"/>
          <Keyword text="_SQLite_FastEscape" descr="_SQLite_FastEscape( $sString )\n\iFast escapes a string or number for use as TEXT in SQLite statements (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_FastEscape( $sString )"/>
          <Keyword text="_SQLite_FetchData" descr="_SQLite_FetchData( $hQuery , ByRef $aRow , $fBinary = False , $fDoNotFinalize = False )\n\iFetches 1 row of data from a _SQLite_Query() based query (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_FetchData( $hQuery , ByRef $aRow , $fBinary = False , $fDoNotFinalize = False )"/>
          <Keyword text="_SQLite_FetchNames" descr="_SQLite_FetchNames( $hQuery , ByRef $aNames )\n\iRead out the Column names of a _SQLite_Query() based query (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_FetchNames( $hQuery , ByRef $aNames )"/>
          <Keyword text="_SQLite_GetTable" descr="_SQLite_GetTable( $hDB , $sSQL , ByRef $aResult , ByRef $iRows , ByRef $iColumns , $iCharSize = -1 )\n\iPasses Out a 1Dimensional Array Containing Tablenames and Data of Executed Query. (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_GetTable( $hDB , $sSQL , ByRef $aResult , ByRef $iRows , ByRef $iColumns , $iCharSize = -1 )"/>
          <Keyword text="_SQLite_GetTable2d" descr="_SQLite_GetTable2d( $hDB , $sSQL , ByRef $aResult , ByRef $iRows , ByRef $iColumns , $iCharSize = -1 , $fSwichDimensions = False )\n\iPasses out a 2Dimensional array containing column names and data of executed query (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_GetTable2d( $hDB , $sSQL , ByRef $aResult , ByRef $iRows , ByRef $iColumns , $iCharSize = -1 , $fSwichDimensions = False )"/>
          <Keyword text="_SQLite_LastInsertRowID" descr="_SQLite_LastInsertRowID( $hDB )\n\iReturns the ROWID of the most recent insert in the database by this connection (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_LastInsertRowID( $hDB )"/>
          <Keyword text="_SQLite_LibVersion" descr="_SQLite_LibVersion()\n\iReturns the version number of the library (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_LibVersion()"/>
          <Keyword text="_SQLite_Open" descr="_SQLite_Open( $sDatabase_Filename = &quot;:memory:&quot; , $iAccessMode , $iEncoding )\n\iOpens/creates a SQLite database. (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_Open( $sDatabase_Filename = &quot;:memory:&quot; , $iAccessMode , $iEncoding )"/>
          <Keyword text="_SQLite_Query" descr="_SQLite_Query( $hDB , $sSQL , ByRef $hQuery )\n\iPrepares a SQLite Query (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_Query( $hDB , $sSQL , ByRef $hQuery )"/>
          <Keyword text="_SQLite_QueryFinalize" descr="_SQLite_QueryFinalize( $hQuery )\n\iFinalizes an _SQLite_Query() based query. The query is interrupted. (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_QueryFinalize( $hQuery )"/>
          <Keyword text="_SQLite_QueryReset" descr="_SQLite_QueryReset( $hQuery )\n\iReset a _SQLite_Query() based query (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_QueryReset( $hQuery )"/>
          <Keyword text="_SQLite_QuerySingleRow" descr="_SQLite_QuerySingleRow( $hDB , $sSQL , ByRef $aRow )\n\iRead out the first row of the result from the specified query. (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_QuerySingleRow( $hDB , $sSQL , ByRef $aRow )"/>
          <Keyword text="_SQLite_SQLiteExe" descr="_SQLite_SQLiteExe( $sDatabaseFile , $sInput , ByRef $sOutput , $sSQLiteExeFilename = &quot;SQLite3.exe&quot; , $fDebug = False )\n\iExecutes commands in SQLite3.exe (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_SQLiteExe( $sDatabaseFile , $sInput , ByRef $sOutput , $sSQLiteExeFilename = &quot;SQLite3.exe&quot; , $fDebug = False )"/>
          <Keyword text="_SQLite_SafeMode" descr="_SQLite_SafeMode( $fSafeModeState )\n\iDisable or Enable Safe mode (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_SafeMode( $fSafeModeState )"/>
          <Keyword text="_SQLite_SetTimeout" descr="_SQLite_SetTimeout( $hDB = -1 , $iTimeout = 1000 )\n\iSets timeout for busy handler (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_SetTimeout( $hDB = -1 , $iTimeout = 1000 )"/>
          <Keyword text="_SQLite_Shutdown" descr="_SQLite_Shutdown()\n\iUnloads SQLite.dll (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_Shutdown()"/>
          <Keyword text="_SQLite_Startup" descr="_SQLite_Startup( $sDll_Filename = &quot;sqlite3.dll&quot; , $bUTF8ErrorMsg = False , $bForceLocal = 0 , $sPrintCallback = __SQLite_ConsoleWrite( )\n\iLoads SQLite3.dll (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_Startup( $sDll_Filename = &quot;sqlite3.dll&quot; , $bUTF8ErrorMsg = False , $bForceLocal = 0 , $sPrintCallback = __SQLite_ConsoleWrite( )"/>
          <Keyword text="_SQLite_TotalChanges" descr="_SQLite_TotalChanges( $hDB )\n\iReturns number of all changes (including via triggers and foreign keys) from start of connection (Requires: #include &lt;SQLite.au3&gt;)\i0" pattern="_SQLite_TotalChanges( $hDB )"/>
          <Keyword text="_ScreenCapture_Capture" descr="_ScreenCapture_Capture( $sFileName = &quot;&quot; , $iLeft = 0 , $iTop = 0 , $iRight = -1 , $iBottom = -1 , $fCursor = True )\n\iCaptures a region of the screen (Requires: #include &lt;ScreenCapture.au3&gt;)\i0" pattern="_ScreenCapture_Capture( $sFileName = &quot;&quot; , $iLeft = 0 , $iTop = 0 , $iRight = -1 , $iBottom = -1 , $fCursor = True )"/>
          <Keyword text="_ScreenCapture_CaptureWnd" descr="_ScreenCapture_CaptureWnd( $sFileName , $hWnd , $iLeft = 0 , $iTop = 0 , $iRight = -1 , $iBottom = -1 , $fCursor = True )\n\iCaptures a screen shot of a specified window or controlID (Requires: #include &lt;ScreenCapture.au3&gt;)\i0" pattern="_ScreenCapture_CaptureWnd( $sFileName , $hWnd , $iLeft = 0 , $iTop = 0 , $iRight = -1 , $iBottom = -1 , $fCursor = True )"/>
          <Keyword text="_ScreenCapture_SaveImage" descr="_ScreenCapture_SaveImage( $sFileName , $hBitmap , $fFreeBmp = True )\n\iSaves an image to file (Requires: #include &lt;ScreenCapture.au3&gt;)\i0" pattern="_ScreenCapture_SaveImage( $sFileName , $hBitmap , $fFreeBmp = True )"/>
          <Keyword text="_ScreenCapture_SetBMPFormat" descr="_ScreenCapture_SetBMPFormat( $iFormat )\n\iSets the bit format that will be used for BMP screen captures (Requires: #include &lt;ScreenCapture.au3&gt;)\i0" pattern="_ScreenCapture_SetBMPFormat( $iFormat )"/>
          <Keyword text="_ScreenCapture_SetJPGQuality" descr="_ScreenCapture_SetJPGQuality( $iQuality )\n\iSets the quality level that will be used for JPEG screen captures (Requires: #include &lt;ScreenCapture.au3&gt;)\i0" pattern="_ScreenCapture_SetJPGQuality( $iQuality )"/>
          <Keyword text="_ScreenCapture_SetTIFColorDepth" descr="_ScreenCapture_SetTIFColorDepth( $iDepth )\n\iSets the color depth used for TIFF screen captures (Requires: #include &lt;ScreenCapture.au3&gt;)\i0" pattern="_ScreenCapture_SetTIFColorDepth( $iDepth )"/>
          <Keyword text="_ScreenCapture_SetTIFCompression" descr="_ScreenCapture_SetTIFCompression( $iCompress )\n\iSets the compression used for TIFF screen captures (Requires: #include &lt;ScreenCapture.au3&gt;)\i0" pattern="_ScreenCapture_SetTIFCompression( $iCompress )"/>
          <Keyword text="_Security__AdjustTokenPrivileges" descr="_Security__AdjustTokenPrivileges( $hToken , $fDisableAll , $pNewState , $iBufferLen , $pPrevState = 0 , $pRequired = 0 )\n\iEnables or disables privileges in the specified access token (Requires: #include &lt;Security.au3&gt;)\i0" pattern="_Security__AdjustTokenPrivileges( $hToken , $fDisableAll , $pNewState , $iBufferLen , $pPrevState = 0 , $pRequired = 0 )"/>
          <Keyword text="_Security__CreateProcessWithToken" descr="_Security__CreateProcessWithToken( $hToken , $iLogonFlags , $sCommandLine , $iCreationFlags , $sCurDir , $tSTARTUPINFO , $tPROCESS_INFORMATION )\n\iCreates a new process and its primary thread running in the security context of the specified token (Requires: #include &lt;Security.au3&gt;)\i0" pattern="_Security__CreateProcessWithToken( $hToken , $iLogonFlags , $sCommandLine , $iCreationFlags , $sCurDir , $tSTARTUPINFO , $tPROCESS_INFORMATION )"/>
          <Keyword text="_Security__DuplicateTokenEx" descr="_Security__DuplicateTokenEx( $hExistingToken , $iDesiredAccess , $iImpersonationLevel , $iTokenType )\n\iCreates a new access token that duplicates an existing token (Requires: #include &lt;Security.au3&gt;)\i0" pattern="_Security__DuplicateTokenEx( $hExistingToken , $iDesiredAccess , $iImpersonationLevel , $iTokenType )"/>
          <Keyword text="_Security__GetAccountSid" descr="_Security__GetAccountSid( $sAccount , $sSystem = &quot;&quot; )\n\iRetrieves the security identifier (SID) for an account (Requires: #include &lt;Security.au3&gt;)\i0" pattern="_Security__GetAccountSid( $sAccount , $sSystem = &quot;&quot; )"/>
          <Keyword text="_Security__GetLengthSid" descr="_Security__GetLengthSid( $pSID )\n\iReturns the length, in bytes, of a valid SID (Requires: #include &lt;Security.au3&gt;)\i0" pattern="_Security__GetLengthSid( $pSID )"/>
          <Keyword text="_Security__GetTokenInformation" descr="_Security__GetTokenInformation( $hToken , $iClass )\n\iRetrieves a specified type of information about an access token (Requires: #include &lt;Security.au3&gt;)\i0" pattern="_Security__GetTokenInformation( $hToken , $iClass )"/>
          <Keyword text="_Security__ImpersonateSelf" descr="_Security__ImpersonateSelf( $iLevel = $SECURITYIMPERSONATION )\n\iObtains an access token that impersonates the calling process security context (Requires: #include &lt;Security.au3&gt;)\i0" pattern="_Security__ImpersonateSelf( $iLevel = $SECURITYIMPERSONATION )"/>
          <Keyword text="_Security__IsValidSid" descr="_Security__IsValidSid( $pSID )\n\iValidates a SID (Requires: #include &lt;Security.au3&gt;)\i0" pattern="_Security__IsValidSid( $pSID )"/>
          <Keyword text="_Security__LookupAccountName" descr="_Security__LookupAccountName( $sAccount , $sSystem = &quot;&quot; )\n\iRetrieves a security identifier (SID) for the account and the name of the domain (Requires: #include &lt;Security.au3&gt;)\i0" pattern="_Security__LookupAccountName( $sAccount , $sSystem = &quot;&quot; )"/>
          <Keyword text="_Security__LookupAccountSid" descr="_Security__LookupAccountSid( $vSID , $sSystem = &quot;&quot; )\n\iRetrieves the name of the account for a SID (Requires: #include &lt;Security.au3&gt;)\i0" pattern="_Security__LookupAccountSid( $vSID , $sSystem = &quot;&quot; )"/>
          <Keyword text="_Security__LookupPrivilegeValue" descr="_Security__LookupPrivilegeValue( $sSystem , $sName )\n\iRetrieves the locally unique identifier (LUID) for a privilege value in form of 64bit integer (Requires: #include &lt;Security.au3&gt;)\i0" pattern="_Security__LookupPrivilegeValue( $sSystem , $sName )"/>
          <Keyword text="_Security__OpenProcessToken" descr="_Security__OpenProcessToken( $hProcess , $iAccess )\n\iReturns the access token associated with a process (Requires: #include &lt;Security.au3&gt;)\i0" pattern="_Security__OpenProcessToken( $hProcess , $iAccess )"/>
          <Keyword text="_Security__OpenThreadToken" descr="_Security__OpenThreadToken( $iAccess , $hThread = 0 , $fOpenAsSelf = False )\n\iOpens the access token associated with a thread (Requires: #include &lt;Security.au3&gt;)\i0" pattern="_Security__OpenThreadToken( $iAccess , $hThread = 0 , $fOpenAsSelf = False )"/>
          <Keyword text="_Security__OpenThreadTokenEx" descr="_Security__OpenThreadTokenEx( $iAccess , $hThread = 0 , $fOpenAsSelf = False )\n\iOpens the access token associated with a thread, impersonating the client&apos;s security context if required (Requires: #include &lt;Security.au3&gt;)\i0" pattern="_Security__OpenThreadTokenEx( $iAccess , $hThread = 0 , $fOpenAsSelf = False )"/>
          <Keyword text="_Security__SetPrivilege" descr="_Security__SetPrivilege( $hToken , $sPrivilege , $fEnable )\n\iEnables or disables a local token privilege (Requires: #include &lt;Security.au3&gt;)\i0" pattern="_Security__SetPrivilege( $hToken , $sPrivilege , $fEnable )"/>
          <Keyword text="_Security__SetTokenInformation" descr="_Security__SetTokenInformation( $hToken , $iTokenInformation , $vTokenInformation , $iTokenInformationLength )\n\iSets various types of information for a specified access token (Requires: #include &lt;Security.au3&gt;)\i0" pattern="_Security__SetTokenInformation( $hToken , $iTokenInformation , $vTokenInformation , $iTokenInformationLength )"/>
          <Keyword text="_Security__SidToStringSid" descr="_Security__SidToStringSid( $pSID )\n\iConverts a binary SID to a string (Requires: #include &lt;Security.au3&gt;)\i0" pattern="_Security__SidToStringSid( $pSID )"/>
          <Keyword text="_Security__SidTypeStr" descr="_Security__SidTypeStr( $iType )\n\iConverts a Sid type to string form (Requires: #include &lt;Security.au3&gt;)\i0" pattern="_Security__SidTypeStr( $iType )"/>
          <Keyword text="_Security__StringSidToSid" descr="_Security__StringSidToSid( $sSID )\n\iConverts a String SID to a binary SID (Requires: #include &lt;Security.au3&gt;)\i0" pattern="_Security__StringSidToSid( $sSID )"/>
          <Keyword text="_SendMessage" descr="_SendMessage( $hWnd , $iMsg , $wParam = 0 , $lParam = 0 , $iReturn = 0 , $wParamType = &quot;wparam&quot; , $lParamType = &quot;lparam&quot; , $sReturnType = &quot;lparam&quot; )\n\iWrapper for commonly used Dll Call (Requires: #include &lt;SendMessage.au3&gt;)\i0" pattern="_SendMessage( $hWnd , $iMsg , $wParam = 0 , $lParam = 0 , $iReturn = 0 , $wParamType = &quot;wparam&quot; , $lParamType = &quot;lparam&quot; , $sReturnType = &quot;lparam&quot; )"/>
          <Keyword text="_SendMessageA" descr="_SendMessageA( $hWnd , $iMsg , $wParam = 0 , $lParam = 0 , $iReturn = 0 , $wParamType = &quot;wparam&quot; , $lParamType = &quot;lparam&quot; , $sReturnType = &quot;lparam&quot; )\n\iWrapper for commonly used Dll Call (Force Ansi Call) (Requires: #include &lt;SendMessage.au3&gt;)\i0" pattern="_SendMessageA( $hWnd , $iMsg , $wParam = 0 , $lParam = 0 , $iReturn = 0 , $wParamType = &quot;wparam&quot; , $lParamType = &quot;lparam&quot; , $sReturnType = &quot;lparam&quot; )"/>
          <Keyword text="_SetDate" descr="_SetDate( $iDay , $iMonth = 0 , $iYear = 0 )\n\iSets the current date of the system (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_SetDate( $iDay , $iMonth = 0 , $iYear = 0 )"/>
          <Keyword text="_SetTime" descr="_SetTime( $iHour , $iMinute , $iSecond = 0 )\n\iSets the current time of the system (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_SetTime( $iHour , $iMinute , $iSecond = 0 )"/>
          <Keyword text="_Singleton" descr="_Singleton( $sOccurenceName , $iFlag = 0 )\n\iEnforce a design paradigm where only one instance of the script may be running. (Requires: #include &lt;Misc.au3&gt;)\i0" pattern="_Singleton( $sOccurenceName , $iFlag = 0 )"/>
          <Keyword text="_SoundClose" descr="_SoundClose( $aSnd_id )\n\iCloses a sound previously opened with _SoundOpen. (Requires: #include &lt;Sound.au3&gt;)\i0" pattern="_SoundClose( $aSnd_id )"/>
          <Keyword text="_SoundLength" descr="_SoundLength( $aSnd_id , $iMode )\n\iReturns the length of the soundfile. (Requires: #include &lt;Sound.au3&gt;)\i0" pattern="_SoundLength( $aSnd_id , $iMode )"/>
          <Keyword text="_SoundOpen" descr="_SoundOpen( $sFile )\n\iOpens a sound file for use with other _Sound functions. (Requires: #include &lt;Sound.au3&gt;)\i0" pattern="_SoundOpen( $sFile )"/>
          <Keyword text="_SoundPause" descr="_SoundPause( $aSnd_id )\n\iPause a playing sound. (Requires: #include &lt;Sound.au3&gt;)\i0" pattern="_SoundPause( $aSnd_id )"/>
          <Keyword text="_SoundPlay" descr="_SoundPlay( $aSnd_id , $iWait )\n\iPlay a sound file. (Requires: #include &lt;Sound.au3&gt;)\i0" pattern="_SoundPlay( $aSnd_id , $iWait )"/>
          <Keyword text="_SoundPos" descr="_SoundPos( $aSnd_id , $iMode )\n\iReturns the current position of the sound. (Requires: #include &lt;Sound.au3&gt;)\i0" pattern="_SoundPos( $aSnd_id , $iMode )"/>
          <Keyword text="_SoundResume" descr="_SoundResume( $aSnd_id )\n\iResume a paused sound. (Requires: #include &lt;Sound.au3&gt;)\i0" pattern="_SoundResume( $aSnd_id )"/>
          <Keyword text="_SoundSeek" descr="_SoundSeek( ByRef $aSnd_id , $iHour , $iMin , $iSec )\n\iSeeks the sound to the specified position (Requires: #include &lt;Sound.au3&gt;)\i0" pattern="_SoundSeek( ByRef $aSnd_id , $iHour , $iMin , $iSec )"/>
          <Keyword text="_SoundStatus" descr="_SoundStatus( $aSnd_id )\n\iReturns the status of the sound (Requires: #include &lt;Sound.au3&gt;)\i0" pattern="_SoundStatus( $aSnd_id )"/>
          <Keyword text="_SoundStop" descr="_SoundStop( ByRef $aSnd_id )\n\iStop a playing sound. (Requires: #include &lt;Sound.au3&gt;)\i0" pattern="_SoundStop( ByRef $aSnd_id )"/>
          <Keyword text="_StringBetween" descr="_StringBetween( $s_String , $s_Start , $s_End , $v_Case = -1 )\n\iReturns the string between the start search string and the end search string. (Requires: #include &lt;String.au3&gt;)\i0" pattern="_StringBetween( $s_String , $s_Start , $s_End , $v_Case = -1 )"/>
          <Keyword text="_StringEncrypt" descr="_StringEncrypt( $i_Encrypt , $s_EncryptText , $s_EncryptPassword , $i_EncryptLevel = 1 )\n\iAn RC4 based string encryption function. (Requires: #include &lt;String.au3&gt;)\i0" pattern="_StringEncrypt( $i_Encrypt , $s_EncryptText , $s_EncryptPassword , $i_EncryptLevel = 1 )"/>
          <Keyword text="_StringExplode" descr="_StringExplode( $sString , $sDelimiter , $iLimit )\n\iSplits up a string into substrings depending on the given delimiters as PHP Explode v5. (Requires: #include &lt;String.au3&gt;)\i0" pattern="_StringExplode( $sString , $sDelimiter , $iLimit )"/>
          <Keyword text="_StringInsert" descr="_StringInsert( $s_String , $s_InsertString , $i_Position )\n\iInserts a string within another string. (Requires: #include &lt;String.au3&gt;)\i0" pattern="_StringInsert( $s_String , $s_InsertString , $i_Position )"/>
          <Keyword text="_StringProper" descr="_StringProper( $s_String )\n\iChanges a string to proper case, same a =Proper function in Excel (Requires: #include &lt;String.au3&gt;)\i0" pattern="_StringProper( $s_String )"/>
          <Keyword text="_StringRepeat" descr="_StringRepeat( $sString , $iRepeatCount )\n\iRepeats a string a specified number of times. (Requires: #include &lt;String.au3&gt;)\i0" pattern="_StringRepeat( $sString , $iRepeatCount )"/>
          <Keyword text="_StringReverse" descr="_StringReverse( $s_String )\n\iReverses the contents of the specified string. (Requires: #include &lt;String.au3&gt;)\i0" pattern="_StringReverse( $s_String )"/>
          <Keyword text="_StringToHex" descr="_StringToHex( $strChar )\n\iConvert a string to a hex string. (Requires: #include &lt;String.au3&gt;)\i0" pattern="_StringToHex( $strChar )"/>
          <Keyword text="_TCPIpToName" descr="_TCPIpToName( $sIp , $iOption = 0 , $hDll_Ws2_32 = &quot;Ws2_32.dll&quot; )\n\iResolves IP address to Hostname(s) (Requires: #include &lt;Inet.au3&gt;)\i0" pattern="_TCPIpToName( $sIp , $iOption = 0 , $hDll_Ws2_32 = &quot;Ws2_32.dll&quot; )"/>
          <Keyword text="_TempFile" descr="_TempFile( $s_DirectoryName = @TempDir , $s_FilePrefix = &quot;~&quot; , $s_FileExtension = &quot;.tmp&quot; , $i_RandomLength = 7 )\n\iGenerate a name for a temporary file. The file is guaranteed not to exist yet. (Requires: #include &lt;File.au3&gt;)\i0" pattern="_TempFile( $s_DirectoryName = @TempDir , $s_FilePrefix = &quot;~&quot; , $s_FileExtension = &quot;.tmp&quot; , $i_RandomLength = 7 )"/>
          <Keyword text="_TicksToTime" descr="_TicksToTime( $iTicks , ByRef $iHours , ByRef $iMins , ByRef $iSecs )\n\iConverts the specified tick amount to hours, minutes and seconds. (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_TicksToTime( $iTicks , ByRef $iHours , ByRef $iMins , ByRef $iSecs )"/>
          <Keyword text="_TimeToTicks" descr="_TimeToTicks( $iHours = @HOUR , $iMins = @MIN , $iSecs = @SEC )\n\iConverts the specified hours, minutes, and seconds to ticks. (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_TimeToTicks( $iHours = @HOUR , $iMins = @MIN , $iSecs = @SEC )"/>
          <Keyword text="_Timer_Diff" descr="_Timer_Diff( $iTimeStamp )\n\iReturns the difference in time from a previous call to _Timer_Init (Requires: #include &lt;Timers.au3&gt;)\i0" pattern="_Timer_Diff( $iTimeStamp )"/>
          <Keyword text="_Timer_GetIdleTime" descr="_Timer_GetIdleTime()\n\iReturns the number of ticks since last user activity (i.e. KYBD/Mouse) (Requires: #include &lt;Timers.au3&gt;)\i0" pattern="_Timer_GetIdleTime()"/>
          <Keyword text="_Timer_GetTimerID" descr="_Timer_GetTimerID( $iwParam )\n\iReturns the Timer ID from $iwParam (Requires: #include &lt;Timers.au3&gt;)\i0" pattern="_Timer_GetTimerID( $iwParam )"/>
          <Keyword text="_Timer_Init" descr="_Timer_Init()\n\iReturns a timestamp (in milliseconds). (Requires: #include &lt;Timers.au3&gt;)\i0" pattern="_Timer_Init()"/>
          <Keyword text="_Timer_KillAllTimers" descr="_Timer_KillAllTimers( $hWnd )\n\iDestroys all the timers (Requires: #include &lt;Timers.au3&gt;)\i0" pattern="_Timer_KillAllTimers( $hWnd )"/>
          <Keyword text="_Timer_KillTimer" descr="_Timer_KillTimer( $hWnd , $iTimerID )\n\iDestroys the specified timer (Requires: #include &lt;Timers.au3&gt;)\i0" pattern="_Timer_KillTimer( $hWnd , $iTimerID )"/>
          <Keyword text="_Timer_SetTimer" descr="_Timer_SetTimer( $hWnd , $iElapse = 250 , $sTimerFunc = &quot;&quot; , $iTimerID = -1 )\n\iCreates a timer with the specified time-out value (Requires: #include &lt;Timers.au3&gt;)\i0" pattern="_Timer_SetTimer( $hWnd , $iElapse = 250 , $sTimerFunc = &quot;&quot; , $iTimerID = -1 )"/>
          <Keyword text="_VersionCompare" descr="_VersionCompare( $sVersion1 , $sVersion2 )\n\iCompares two file versions for equality (Requires: #include &lt;Misc.au3&gt;)\i0" pattern="_VersionCompare( $sVersion1 , $sVersion2 )"/>
          <Keyword text="_WeekNumberISO" descr="_WeekNumberISO( $iYear = @YEAR , $iMonth = @MON , $iDay = @MDAY )\n\iCalculate the weeknumber of a given date. (Requires: #include &lt;Date.au3&gt;)\i0" pattern="_WeekNumberISO( $iYear = @YEAR , $iMonth = @MON , $iDay = @MDAY )"/>
          <Keyword text="_WinAPI_AttachConsole" descr="_WinAPI_AttachConsole( $iProcessID = -1 )\n\iAttaches the calling process to the console of the specified process (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_AttachConsole( $iProcessID = -1 )"/>
          <Keyword text="_WinAPI_AttachThreadInput" descr="_WinAPI_AttachThreadInput( $iAttach , $iAttachTo , $fAttach )\n\iAttaches the input processing mechanism of one thread to that of another thread (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_AttachThreadInput( $iAttach , $iAttachTo , $fAttach )"/>
          <Keyword text="_WinAPI_Beep" descr="_WinAPI_Beep( $iFreq = 500 , $iDuration = 1000 )\n\iGenerates simple tones on the speaker (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_Beep( $iFreq = 500 , $iDuration = 1000 )"/>
          <Keyword text="_WinAPI_BitBlt" descr="_WinAPI_BitBlt( $hDestDC , $iXDest , $iYDest , $iWidth , $iHeight , $hSrcDC , $iXSrc , $iYSrc , $iROP )\n\iPerforms a bit-block transfer of color data (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_BitBlt( $hDestDC , $iXDest , $iYDest , $iWidth , $iHeight , $hSrcDC , $iXSrc , $iYSrc , $iROP )"/>
          <Keyword text="_WinAPI_CallNextHookEx" descr="_WinAPI_CallNextHookEx( $hhk , $iCode , $wParam , $lParam )\n\iPasses the hook information to the next hook procedure in the current hook chain (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_CallNextHookEx( $hhk , $iCode , $wParam , $lParam )"/>
          <Keyword text="_WinAPI_CallWindowProc" descr="_WinAPI_CallWindowProc( $lpPrevWndFunc , $hWnd , $Msg , $wParam , $lParam )\n\iPasses the hook information to the next hook procedure in the current hook chain (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_CallWindowProc( $lpPrevWndFunc , $hWnd , $Msg , $wParam , $lParam )"/>
          <Keyword text="_WinAPI_ClientToScreen" descr="_WinAPI_ClientToScreen( $hWnd , ByRef $tPoint )\n\iConverts the client coordinates of a specified point to screen coordinates (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_ClientToScreen( $hWnd , ByRef $tPoint )"/>
          <Keyword text="_WinAPI_CloseHandle" descr="_WinAPI_CloseHandle( $hObject )\n\iCloses an open object handle (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_CloseHandle( $hObject )"/>
          <Keyword text="_WinAPI_CombineRgn" descr="_WinAPI_CombineRgn( $hRgnDest , $hRgnSrc1 , $hRgnSrc2 , $iCombineMode )\n\iCombines two regions and stores the result in a third region (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_CombineRgn( $hRgnDest , $hRgnSrc1 , $hRgnSrc2 , $iCombineMode )"/>
          <Keyword text="_WinAPI_CommDlgExtendedError" descr="_WinAPI_CommDlgExtendedError()\n\iReturns a common dialog box error string. This string indicates the most recent error to occur during the execution of one of the common dialog box functions. (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_CommDlgExtendedError()"/>
          <Keyword text="_WinAPI_CopyIcon" descr="_WinAPI_CopyIcon( $hIcon )\n\iCopies the specified icon from another module (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_CopyIcon( $hIcon )"/>
          <Keyword text="_WinAPI_CreateBitmap" descr="_WinAPI_CreateBitmap( $iWidth , $iHeight , $iPlanes = 1 , $iBitsPerPel = 1 , $pBits = 0 )\n\iCreates a bitmap with the specified width, height, and color format (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_CreateBitmap( $iWidth , $iHeight , $iPlanes = 1 , $iBitsPerPel = 1 , $pBits = 0 )"/>
          <Keyword text="_WinAPI_CreateCompatibleBitmap" descr="_WinAPI_CreateCompatibleBitmap( $hDC , $iWidth , $iHeight )\n\iCreates a bitmap compatible with the specified device context (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_CreateCompatibleBitmap( $hDC , $iWidth , $iHeight )"/>
          <Keyword text="_WinAPI_CreateCompatibleDC" descr="_WinAPI_CreateCompatibleDC( $hDC )\n\iCreates a memory device context compatible with the specified device (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_CreateCompatibleDC( $hDC )"/>
          <Keyword text="_WinAPI_CreateEvent" descr="_WinAPI_CreateEvent( $pAttributes = 0 , $fManualReset = True , $fInitialState = True , $sName = &quot;&quot; )\n\iCreates or opens a named or unnamed event object (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_CreateEvent( $pAttributes = 0 , $fManualReset = True , $fInitialState = True , $sName = &quot;&quot; )"/>
          <Keyword text="_WinAPI_CreateFile" descr="_WinAPI_CreateFile( $sFileName , $iCreation , $iAccess = 4 , $iShare = 0 , $iAttributes = 0 , $pSecurity = 0 )\n\iCreates or opens a file or other device (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_CreateFile( $sFileName , $iCreation , $iAccess = 4 , $iShare = 0 , $iAttributes = 0 , $pSecurity = 0 )"/>
          <Keyword text="_WinAPI_CreateFont" descr="_WinAPI_CreateFont( $nHeight , $nWidth , $nEscape = 0 , $nOrientn = 0 , $fnWeight = $FW_NORMAL , $bItalic = False , $bUnderline = False , $bStrikeout = False , $nCharset = $DEFAULT_CHARSET , $nOutputPrec = $OUT_DEFAULT_PRECIS , $nClipPrec = $CLIP_DEFAULT_PRECIS , $nQuality = $DEFAULT_QUALITY , $nPitch = 0 , $szFace = &apos;Arial&apos; )\n\iCreates a logical font with the specified characteristics (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_CreateFont( $nHeight , $nWidth , $nEscape = 0 , $nOrientn = 0 , $fnWeight = $FW_NORMAL , $bItalic = False , $bUnderline = False , $bStrikeout = False , $nCharset = $DEFAULT_CHARSET , $nOutputPrec = $OUT_DEFAULT_PRECIS , $nClipPrec = $CLIP_DEFAULT_PRECIS , $nQuality = $DEFAULT_QUALITY , $nPitch = 0 , $szFace = &apos;Arial&apos; )"/>
          <Keyword text="_WinAPI_CreateFontIndirect" descr="_WinAPI_CreateFontIndirect( $tLogFont )\n\iCreates a logical font that has specific characteristics (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_CreateFontIndirect( $tLogFont )"/>
          <Keyword text="_WinAPI_CreatePen" descr="_WinAPI_CreatePen( $iPenStyle , $iWidth , $nColor )\n\iCreates a logical pen that has the specified style, width, and color. (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_CreatePen( $iPenStyle , $iWidth , $nColor )"/>
          <Keyword text="_WinAPI_CreateProcess" descr="_WinAPI_CreateProcess( $sAppName , $sCommand , $pSecurity , $pThread , $fInherit , $iFlags , $pEnviron , $sDir , $pStartupInfo , $pProcess )\n\iCreates a new process and its primary thread (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_CreateProcess( $sAppName , $sCommand , $pSecurity , $pThread , $fInherit , $iFlags , $pEnviron , $sDir , $pStartupInfo , $pProcess )"/>
          <Keyword text="_WinAPI_CreateRectRgn" descr="_WinAPI_CreateRectRgn( $iLeftRect , $iTopRect , $iRightRect , $iBottomRect )\n\iCreates a rectangular region (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_CreateRectRgn( $iLeftRect , $iTopRect , $iRightRect , $iBottomRect )"/>
          <Keyword text="_WinAPI_CreateRoundRectRgn" descr="_WinAPI_CreateRoundRectRgn( $iLeftRect , $iTopRect , $iRightRect , $iBottomRect , $iWidthEllipse , $iHeightEllipse )\n\iCreates a rectangular region with rounded corners (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_CreateRoundRectRgn( $iLeftRect , $iTopRect , $iRightRect , $iBottomRect , $iWidthEllipse , $iHeightEllipse )"/>
          <Keyword text="_WinAPI_CreateSolidBitmap" descr="_WinAPI_CreateSolidBitmap( $hWnd , $iColor , $iWidth , $iHeight , $bRGB = 1 )\n\iCreates a solid color bitmap (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_CreateSolidBitmap( $hWnd , $iColor , $iWidth , $iHeight , $bRGB = 1 )"/>
          <Keyword text="_WinAPI_CreateSolidBrush" descr="_WinAPI_CreateSolidBrush( $nColor )\n\iCreates a logical brush that has the specified solid color (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_CreateSolidBrush( $nColor )"/>
          <Keyword text="_WinAPI_CreateWindowEx" descr="_WinAPI_CreateWindowEx( $iExStyle , $sClass , $sName , $iStyle , $iX , $iY , $iWidth , $iHeight , $hParent , $hMenu = 0 , $hInstance = 0 , $pParam = 0 )\n\iCreates an overlapped, pop-up, or child window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_CreateWindowEx( $iExStyle , $sClass , $sName , $iStyle , $iX , $iY , $iWidth , $iHeight , $hParent , $hMenu = 0 , $hInstance = 0 , $pParam = 0 )"/>
          <Keyword text="_WinAPI_DefWindowProc" descr="_WinAPI_DefWindowProc( $hWnd , $iMsg , $iwParam , $ilParam )\n\iCall the default window procedure to provide default processing (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_DefWindowProc( $hWnd , $iMsg , $iwParam , $ilParam )"/>
          <Keyword text="_WinAPI_DeleteDC" descr="_WinAPI_DeleteDC( $hDC )\n\iDeletes the specified device context (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_DeleteDC( $hDC )"/>
          <Keyword text="_WinAPI_DeleteObject" descr="_WinAPI_DeleteObject( $hObject )\n\iDeletes a logical pen, brush, font, bitmap, region, or palette (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_DeleteObject( $hObject )"/>
          <Keyword text="_WinAPI_DestroyIcon" descr="_WinAPI_DestroyIcon( $hIcon )\n\iDestroys an icon and frees any memory the icon occupied (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_DestroyIcon( $hIcon )"/>
          <Keyword text="_WinAPI_DestroyWindow" descr="_WinAPI_DestroyWindow( $hWnd )\n\iDestroys the specified window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_DestroyWindow( $hWnd )"/>
          <Keyword text="_WinAPI_DrawEdge" descr="_WinAPI_DrawEdge( $hDC , $ptrRect , $nEdgeType , $grfFlags )\n\iDraws one or more edges of rectangle (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_DrawEdge( $hDC , $ptrRect , $nEdgeType , $grfFlags )"/>
          <Keyword text="_WinAPI_DrawFrameControl" descr="_WinAPI_DrawFrameControl( $hDC , $ptrRect , $nType , $nState )\n\iDraws a frame control of the specified type and style (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_DrawFrameControl( $hDC , $ptrRect , $nType , $nState )"/>
          <Keyword text="_WinAPI_DrawIcon" descr="_WinAPI_DrawIcon( $hDC , $iX , $iY , $hIcon )\n\iDraws an icon or cursor into the specified device context (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_DrawIcon( $hDC , $iX , $iY , $hIcon )"/>
          <Keyword text="_WinAPI_DrawIconEx" descr="_WinAPI_DrawIconEx( $hDC , $iX , $iY , $hIcon , $iWidth = 0 , $iHeight = 0 , $iStep = 0 , $hBrush = 0 , $iFlags = 3 )\n\iDraws an icon or cursor into the specified device context (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_DrawIconEx( $hDC , $iX , $iY , $hIcon , $iWidth = 0 , $iHeight = 0 , $iStep = 0 , $hBrush = 0 , $iFlags = 3 )"/>
          <Keyword text="_WinAPI_DrawLine" descr="_WinAPI_DrawLine( $hDC , $iX1 , $iY1 , $iX2 , $iY2 )\n\iDraws a line (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_DrawLine( $hDC , $iX1 , $iY1 , $iX2 , $iY2 )"/>
          <Keyword text="_WinAPI_DrawText" descr="_WinAPI_DrawText( $hDC , $sText , ByRef $tRect , $iFlags )\n\iDraws formatted text in the specified rectangle (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_DrawText( $hDC , $sText , ByRef $tRect , $iFlags )"/>
          <Keyword text="_WinAPI_DuplicateHandle" descr="_WinAPI_DuplicateHandle( $hSourceProcessHandle , $hSourceHandle , $hTargetProcessHandle , $iDesiredAccess , $fInheritHandle , $iOptions )\n\iDuplicates an object handle (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_DuplicateHandle( $hSourceProcessHandle , $hSourceHandle , $hTargetProcessHandle , $iDesiredAccess , $fInheritHandle , $iOptions )"/>
          <Keyword text="_WinAPI_EnableWindow" descr="_WinAPI_EnableWindow( $hWnd , $fEnable = True )\n\iEnables or disables mouse and keyboard input to the specified window or control (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_EnableWindow( $hWnd , $fEnable = True )"/>
          <Keyword text="_WinAPI_EnumDisplayDevices" descr="_WinAPI_EnumDisplayDevices( $sDevice , $iDevNum )\n\iObtains information about the display devices in a system (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_EnumDisplayDevices( $sDevice , $iDevNum )"/>
          <Keyword text="_WinAPI_EnumWindows" descr="_WinAPI_EnumWindows( $fVisible = True , $hwnd = Default )\n\iEnumerates all windows (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_EnumWindows( $fVisible = True , $hwnd = Default )"/>
          <Keyword text="_WinAPI_EnumWindowsPopup" descr="_WinAPI_EnumWindowsPopup()\n\iEnumerates popup windows (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_EnumWindowsPopup()"/>
          <Keyword text="_WinAPI_EnumWindowsTop" descr="_WinAPI_EnumWindowsTop()\n\iEnumerates all top level windows (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_EnumWindowsTop()"/>
          <Keyword text="_WinAPI_ExpandEnvironmentStrings" descr="_WinAPI_ExpandEnvironmentStrings( $sString )\n\iExpands environment variable strings and replaces them with their defined values (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_ExpandEnvironmentStrings( $sString )"/>
          <Keyword text="_WinAPI_ExtractIconEx" descr="_WinAPI_ExtractIconEx( $sFile , $iIndex , $pLarge , $pSmall , $iIcons )\n\iCreates an array of handles to large or small icons extracted from a file (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_ExtractIconEx( $sFile , $iIndex , $pLarge , $pSmall , $iIcons )"/>
          <Keyword text="_WinAPI_FatalAppExit" descr="_WinAPI_FatalAppExit( $sMessage )\n\iDisplays a message box and terminates the application (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_FatalAppExit( $sMessage )"/>
          <Keyword text="_WinAPI_FillRect" descr="_WinAPI_FillRect( $hDC , $ptrRect , $hBrush )\n\iFills a rectangle by using the specified brush (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_FillRect( $hDC , $ptrRect , $hBrush )"/>
          <Keyword text="_WinAPI_FindExecutable" descr="_WinAPI_FindExecutable( $sFileName , $sDirectory = &quot;&quot; )\n\iRetrieves the name of the executable file associated with the specified file name (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_FindExecutable( $sFileName , $sDirectory = &quot;&quot; )"/>
          <Keyword text="_WinAPI_FindWindow" descr="_WinAPI_FindWindow( $sClassName , $sWindowName )\n\iRetrieves the handle to the top-level window whose class name and window name match (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_FindWindow( $sClassName , $sWindowName )"/>
          <Keyword text="_WinAPI_FlashWindow" descr="_WinAPI_FlashWindow( $hWnd , $fInvert = True )\n\iFlashes the specified window one time (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_FlashWindow( $hWnd , $fInvert = True )"/>
          <Keyword text="_WinAPI_FlashWindowEx" descr="_WinAPI_FlashWindowEx( $hWnd , $iFlags = 3 , $iCount = 3 , $iTimeout = 0 )\n\iFlashes the specified window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_FlashWindowEx( $hWnd , $iFlags = 3 , $iCount = 3 , $iTimeout = 0 )"/>
          <Keyword text="_WinAPI_FloatToInt" descr="_WinAPI_FloatToInt( $nFloat )\n\iReturns a 4 byte float as an integer value (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_FloatToInt( $nFloat )"/>
          <Keyword text="_WinAPI_FlushFileBuffers" descr="_WinAPI_FlushFileBuffers( $hFile )\n\iFlushes the buffers of a specified file and causes all buffered data to be written (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_FlushFileBuffers( $hFile )"/>
          <Keyword text="_WinAPI_FormatMessage" descr="_WinAPI_FormatMessage( $iFlags , $pSource , $iMessageID , $iLanguageID , ByRef $pBuffer , $iSize , $vArguments )\n\iFormats a message string (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_FormatMessage( $iFlags , $pSource , $iMessageID , $iLanguageID , ByRef $pBuffer , $iSize , $vArguments )"/>
          <Keyword text="_WinAPI_FrameRect" descr="_WinAPI_FrameRect( $hDC , $ptrRect , $hBrush )\n\iDraws a border around the specified rectangle by using the specified brush (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_FrameRect( $hDC , $ptrRect , $hBrush )"/>
          <Keyword text="_WinAPI_FreeLibrary" descr="_WinAPI_FreeLibrary( $hModule )\n\iDecrements the reference count of the loaded dynamic-link library (DLL) module (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_FreeLibrary( $hModule )"/>
          <Keyword text="_WinAPI_GUIDFromString" descr="_WinAPI_GUIDFromString( $sGUID )\n\iConverts a string GUID to binary form (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GUIDFromString( $sGUID )"/>
          <Keyword text="_WinAPI_GUIDFromStringEx" descr="_WinAPI_GUIDFromStringEx( $sGUID , $pGUID )\n\iConverts a string GUID to binary form (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GUIDFromStringEx( $sGUID , $pGUID )"/>
          <Keyword text="_WinAPI_GetAncestor" descr="_WinAPI_GetAncestor( $hWnd , $iFlags = 1 )\n\iRetrieves the handle to the ancestor of the specified window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetAncestor( $hWnd , $iFlags = 1 )"/>
          <Keyword text="_WinAPI_GetAsyncKeyState" descr="_WinAPI_GetAsyncKeyState( $iKey )\n\iDetermines whether a key is up or down at the time the function is called (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetAsyncKeyState( $iKey )"/>
          <Keyword text="_WinAPI_GetBkMode" descr="_WinAPI_GetBkMode( $hDC )\n\iReturns the current background mix mode for a specified device context (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetBkMode( $hDC )"/>
          <Keyword text="_WinAPI_GetClassName" descr="_WinAPI_GetClassName( $hWnd )\n\iRetrieves the name of the class to which the specified window belongs (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetClassName( $hWnd )"/>
          <Keyword text="_WinAPI_GetClientHeight" descr="_WinAPI_GetClientHeight( $hWnd )\n\iRetrieves the height of a window&apos;s client area (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetClientHeight( $hWnd )"/>
          <Keyword text="_WinAPI_GetClientRect" descr="_WinAPI_GetClientRect( $hWnd )\n\iRetrieves the coordinates of a window&apos;s client area (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetClientRect( $hWnd )"/>
          <Keyword text="_WinAPI_GetClientWidth" descr="_WinAPI_GetClientWidth( $hWnd )\n\iRetrieves the width of a window&apos;s client area (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetClientWidth( $hWnd )"/>
          <Keyword text="_WinAPI_GetCurrentProcess" descr="_WinAPI_GetCurrentProcess()\n\iReturns the process handle of the calling process (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetCurrentProcess()"/>
          <Keyword text="_WinAPI_GetCurrentProcessID" descr="_WinAPI_GetCurrentProcessID()\n\iReturns the process identifier of the calling process (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetCurrentProcessID()"/>
          <Keyword text="_WinAPI_GetCurrentThread" descr="_WinAPI_GetCurrentThread()\n\iRetrieves a pseudo handle for the calling thread. (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetCurrentThread()"/>
          <Keyword text="_WinAPI_GetCurrentThreadId" descr="_WinAPI_GetCurrentThreadId()\n\iReturns the thread identifier of the calling thread (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetCurrentThreadId()"/>
          <Keyword text="_WinAPI_GetCursorInfo" descr="_WinAPI_GetCursorInfo()\n\iRetrieves information about the global cursor (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetCursorInfo()"/>
          <Keyword text="_WinAPI_GetDC" descr="_WinAPI_GetDC( $hWnd )\n\iRetrieves a handle of a display device context for the client area a window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetDC( $hWnd )"/>
          <Keyword text="_WinAPI_GetDIBits" descr="_WinAPI_GetDIBits( $hDC , $hBmp , $iStartScan , $iScanLines , $pBits , $pBI , $iUsage )\n\iRetrieves the bits of the specified bitmap and copies them into a buffer as a DIB (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetDIBits( $hDC , $hBmp , $iStartScan , $iScanLines , $pBits , $pBI , $iUsage )"/>
          <Keyword text="_WinAPI_GetDesktopWindow" descr="_WinAPI_GetDesktopWindow()\n\iReturns the handle of the Windows desktop window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetDesktopWindow()"/>
          <Keyword text="_WinAPI_GetDeviceCaps" descr="_WinAPI_GetDeviceCaps( $hDC , $iIndex )\n\iRetrieves device specific information about a specified device (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetDeviceCaps( $hDC , $iIndex )"/>
          <Keyword text="_WinAPI_GetDlgCtrlID" descr="_WinAPI_GetDlgCtrlID( $hWnd )\n\iReturns the identifier of the specified control (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetDlgCtrlID( $hWnd )"/>
          <Keyword text="_WinAPI_GetDlgItem" descr="_WinAPI_GetDlgItem( $hWnd , $iItemID )\n\iRetrieves the handle of a control in the specified dialog box (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetDlgItem( $hWnd , $iItemID )"/>
          <Keyword text="_WinAPI_GetFileSizeEx" descr="_WinAPI_GetFileSizeEx( $hFile )\n\iRetrieves the size of the specified file (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetFileSizeEx( $hFile )"/>
          <Keyword text="_WinAPI_GetFocus" descr="_WinAPI_GetFocus()\n\iRetrieves the handle of the window that has the keyboard focus (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetFocus()"/>
          <Keyword text="_WinAPI_GetForegroundWindow" descr="_WinAPI_GetForegroundWindow()\n\iReturns the handle of the foreground window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetForegroundWindow()"/>
          <Keyword text="_WinAPI_GetGuiResources" descr="_WinAPI_GetGuiResources( $iflag = 1 , $hProcess = -1 )\n\iRetrieves the count of handles to graphical user interface (GUI) objects in use by the specified process (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetGuiResources( $iflag = 1 , $hProcess = -1 )"/>
          <Keyword text="_WinAPI_GetIconInfo" descr="_WinAPI_GetIconInfo( $hIcon )\n\iRetrieves information about the specified icon or cursor (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetIconInfo( $hIcon )"/>
          <Keyword text="_WinAPI_GetLastError" descr="_WinAPI_GetLastError()\n\iReturns the calling thread&apos;s lasterror code value (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetLastError()"/>
          <Keyword text="_WinAPI_GetLastErrorMessage" descr="_WinAPI_GetLastErrorMessage()\n\iReturns the calling threads last error message (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetLastErrorMessage()"/>
          <Keyword text="_WinAPI_GetLayeredWindowAttributes" descr="_WinAPI_GetLayeredWindowAttributes( $hWnd , ByRef $i_transcolor , ByRef $Transparency , $asColorRef = False )\n\iGets Layered Window Attributes (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetLayeredWindowAttributes( $hWnd , ByRef $i_transcolor , ByRef $Transparency , $asColorRef = False )"/>
          <Keyword text="_WinAPI_GetModuleHandle" descr="_WinAPI_GetModuleHandle( $sModuleName )\n\iReturns a module handle for the specified module (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetModuleHandle( $sModuleName )"/>
          <Keyword text="_WinAPI_GetMousePos" descr="_WinAPI_GetMousePos( $fToClient = False , $hWnd = 0 )\n\iReturns the current mouse position (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetMousePos( $fToClient = False , $hWnd = 0 )"/>
          <Keyword text="_WinAPI_GetMousePosX" descr="_WinAPI_GetMousePosX( $fToClient = False , $hWnd = 0 )\n\iReturns the current mouse X position (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetMousePosX( $fToClient = False , $hWnd = 0 )"/>
          <Keyword text="_WinAPI_GetMousePosY" descr="_WinAPI_GetMousePosY( $fToClient = False , $hWnd = 0 )\n\iReturns the current mouse Y position (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetMousePosY( $fToClient = False , $hWnd = 0 )"/>
          <Keyword text="_WinAPI_GetObject" descr="_WinAPI_GetObject( $hObject , $iSize , $pObject )\n\iRetrieves information for the specified graphics object (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetObject( $hObject , $iSize , $pObject )"/>
          <Keyword text="_WinAPI_GetOpenFileName" descr="_WinAPI_GetOpenFileName( $sTitle = &quot;&quot; , $sFilter = &quot;All files(*.* )\n\iCreates an Open dialog box that lets the user specify the drive, directory, and the name of a file or set of files to open (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetOpenFileName( $sTitle = &quot;&quot; , $sFilter = &quot;All files(*.* )"/>
          <Keyword text="_WinAPI_GetOverlappedResult" descr="_WinAPI_GetOverlappedResult( $hFile , $pOverlapped , ByRef $iBytes , $fWait = False )\n\iRetrieves the results of an overlapped operation (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetOverlappedResult( $hFile , $pOverlapped , ByRef $iBytes , $fWait = False )"/>
          <Keyword text="_WinAPI_GetParent" descr="_WinAPI_GetParent( $hWnd )\n\iRetrieves the handle of the specified child window&apos;s parent window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetParent( $hWnd )"/>
          <Keyword text="_WinAPI_GetProcessAffinityMask" descr="_WinAPI_GetProcessAffinityMask( $hProcess )\n\iObtains the affinity masks for the process and the system (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetProcessAffinityMask( $hProcess )"/>
          <Keyword text="_WinAPI_GetSaveFileName" descr="_WinAPI_GetSaveFileName( $sTitle = &quot;&quot; , $sFilter = &quot;All files(*.* )\n\iCreates a Save dialog box that lets the user specify the drive, directory, and name of a file to save (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetSaveFileName( $sTitle = &quot;&quot; , $sFilter = &quot;All files(*.* )"/>
          <Keyword text="_WinAPI_GetStdHandle" descr="_WinAPI_GetStdHandle( $iStdHandle )\n\iRetrieves a handle for the standard input, standard output, or standard error device (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetStdHandle( $iStdHandle )"/>
          <Keyword text="_WinAPI_GetStockObject" descr="_WinAPI_GetStockObject( $iObject )\n\iRetrieves a handle to one of the predefined stock pens, brushes, fonts, or palettes (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetStockObject( $iObject )"/>
          <Keyword text="_WinAPI_GetSysColor" descr="_WinAPI_GetSysColor( $iIndex )\n\iRetrieves the current color of the specified display element (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetSysColor( $iIndex )"/>
          <Keyword text="_WinAPI_GetSysColorBrush" descr="_WinAPI_GetSysColorBrush( $iIndex )\n\iretrieves a handle identifying a logical brush that corresponds to the specified color index (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetSysColorBrush( $iIndex )"/>
          <Keyword text="_WinAPI_GetSystemMetrics" descr="_WinAPI_GetSystemMetrics( $iIndex )\n\iRetrieves the specified system metric or system configuration setting (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetSystemMetrics( $iIndex )"/>
          <Keyword text="_WinAPI_GetTextExtentPoint32" descr="_WinAPI_GetTextExtentPoint32( $hDC , $sText )\n\iComputes the width and height of the specified string of text (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetTextExtentPoint32( $hDC , $sText )"/>
          <Keyword text="_WinAPI_GetTextMetrics" descr="_WinAPI_GetTextMetrics( $hDC )\n\iRetrieves basic information for the currently selected font. (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetTextMetrics( $hDC )"/>
          <Keyword text="_WinAPI_GetWindow" descr="_WinAPI_GetWindow( $hWnd , $iCmd )\n\iRetrieves the handle of a window that has a specified relationship to the specified window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetWindow( $hWnd , $iCmd )"/>
          <Keyword text="_WinAPI_GetWindowDC" descr="_WinAPI_GetWindowDC( $hWnd )\n\iRetrieves the device context (DC) for the entire window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetWindowDC( $hWnd )"/>
          <Keyword text="_WinAPI_GetWindowHeight" descr="_WinAPI_GetWindowHeight( $hWnd )\n\iReturns the height of the window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetWindowHeight( $hWnd )"/>
          <Keyword text="_WinAPI_GetWindowLong" descr="_WinAPI_GetWindowLong( $hWnd , $iIndex )\n\iRetrieves information about the specified window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetWindowLong( $hWnd , $iIndex )"/>
          <Keyword text="_WinAPI_GetWindowPlacement" descr="_WinAPI_GetWindowPlacement( $hWnd )\n\iRetrieves the placement of the window for Min, Max, and normal positions (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetWindowPlacement( $hWnd )"/>
          <Keyword text="_WinAPI_GetWindowRect" descr="_WinAPI_GetWindowRect( $hWnd )\n\iRetrieves the dimensions of the bounding rectangle of the specified window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetWindowRect( $hWnd )"/>
          <Keyword text="_WinAPI_GetWindowRgn" descr="_WinAPI_GetWindowRgn( $hWnd , $hRgn )\n\iObtains a copy of the window region of a window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetWindowRgn( $hWnd , $hRgn )"/>
          <Keyword text="_WinAPI_GetWindowText" descr="_WinAPI_GetWindowText( $hWnd )\n\iRetrieves the text of the specified window&apos;s title bar (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetWindowText( $hWnd )"/>
          <Keyword text="_WinAPI_GetWindowThreadProcessId" descr="_WinAPI_GetWindowThreadProcessId( $hWnd , ByRef $iPID )\n\iRetrieves the identifier of the thread that created the specified window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetWindowThreadProcessId( $hWnd , ByRef $iPID )"/>
          <Keyword text="_WinAPI_GetWindowWidth" descr="_WinAPI_GetWindowWidth( $hWnd )\n\iReturns the width of the window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetWindowWidth( $hWnd )"/>
          <Keyword text="_WinAPI_GetXYFromPoint" descr="_WinAPI_GetXYFromPoint( ByRef $tPoint , ByRef $iX , ByRef $iY )\n\iReturns the X/Y values from a $tagPOINT structure (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GetXYFromPoint( ByRef $tPoint , ByRef $iX , ByRef $iY )"/>
          <Keyword text="_WinAPI_GlobalMemoryStatus" descr="_WinAPI_GlobalMemoryStatus()\n\iRetrieves information about current available memory (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_GlobalMemoryStatus()"/>
          <Keyword text="_WinAPI_HiWord" descr="_WinAPI_HiWord( $iLong )\n\iReturns the high word of a longword value (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_HiWord( $iLong )"/>
          <Keyword text="_WinAPI_InProcess" descr="_WinAPI_InProcess( $hWnd , ByRef $hLastWnd )\n\iDetermines whether a window belongs to the current process (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_InProcess( $hWnd , ByRef $hLastWnd )"/>
          <Keyword text="_WinAPI_IntToFloat" descr="_WinAPI_IntToFloat( $iInt )\n\iReturns a 4 byte integer as a float value (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_IntToFloat( $iInt )"/>
          <Keyword text="_WinAPI_InvalidateRect" descr="_WinAPI_InvalidateRect( $hWnd , $tRect = 0 , $fErase = True )\n\iAdds a rectangle to the specified window&apos;s update region (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_InvalidateRect( $hWnd , $tRect = 0 , $fErase = True )"/>
          <Keyword text="_WinAPI_IsClassName" descr="_WinAPI_IsClassName( $hWnd , $sClassName )\n\iWrapper to check ClassName of the control. (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_IsClassName( $hWnd , $sClassName )"/>
          <Keyword text="_WinAPI_IsWindow" descr="_WinAPI_IsWindow( $hWnd )\n\iDetermines whether the specified window handle identifies an existing window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_IsWindow( $hWnd )"/>
          <Keyword text="_WinAPI_IsWindowVisible" descr="_WinAPI_IsWindowVisible( $hWnd )\n\iRetrieves the visibility state of the specified window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_IsWindowVisible( $hWnd )"/>
          <Keyword text="_WinAPI_LineTo" descr="_WinAPI_LineTo( $hDC , $iX , $iY )\n\iDraws a line from the current position up to, but not including, the specified point. (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_LineTo( $hDC , $iX , $iY )"/>
          <Keyword text="_WinAPI_LoWord" descr="_WinAPI_LoWord( $iLong )\n\iReturns the low word of a longword (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_LoWord( $iLong )"/>
          <Keyword text="_WinAPI_LoadBitmap" descr="_WinAPI_LoadBitmap( $hInstance , $sBitmap )\n\iLoads the specified bitmap resource from a module&apos;s executable file (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_LoadBitmap( $hInstance , $sBitmap )"/>
          <Keyword text="_WinAPI_LoadImage" descr="_WinAPI_LoadImage( $hInstance , $sImage , $iType , $iXDesired , $iYDesired , $iLoad )\n\iLoads an icon, cursor, or bitmap (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_LoadImage( $hInstance , $sImage , $iType , $iXDesired , $iYDesired , $iLoad )"/>
          <Keyword text="_WinAPI_LoadLibrary" descr="_WinAPI_LoadLibrary( $sFileName )\n\iMaps a specified executable module into the address space of the calling process (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_LoadLibrary( $sFileName )"/>
          <Keyword text="_WinAPI_LoadLibraryEx" descr="_WinAPI_LoadLibraryEx( $sFileName , $iFlags = 0 )\n\iMaps a specified executable module into the address space of the calling process (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_LoadLibraryEx( $sFileName , $iFlags = 0 )"/>
          <Keyword text="_WinAPI_LoadShell32Icon" descr="_WinAPI_LoadShell32Icon( $iIconID )\n\iExtracts an icon from the Shell32.dll file (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_LoadShell32Icon( $iIconID )"/>
          <Keyword text="_WinAPI_LoadString" descr="_WinAPI_LoadString( $hInstance , $iStringId )\n\iloads a string resource from the executable file associated with a specified module (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_LoadString( $hInstance , $iStringId )"/>
          <Keyword text="_WinAPI_LocalFree" descr="_WinAPI_LocalFree( $hMem )\n\iFrees the specified local memory object and invalidates its handle (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_LocalFree( $hMem )"/>
          <Keyword text="_WinAPI_MAKELANGID" descr="_WinAPI_MAKELANGID( $lgidPrimary , $lgidSub )\n\iConstruct language id from a primary language id and a sublanguage id (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_MAKELANGID( $lgidPrimary , $lgidSub )"/>
          <Keyword text="_WinAPI_MAKELCID" descr="_WinAPI_MAKELCID( $lgid , $srtid )\n\iConstruct locale id from a language id and a sort id (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_MAKELCID( $lgid , $srtid )"/>
          <Keyword text="_WinAPI_MakeLong" descr="_WinAPI_MakeLong( $iLo , $iHi )\n\iReturns a longint value from two int values (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_MakeLong( $iLo , $iHi )"/>
          <Keyword text="_WinAPI_MakeQWord" descr="_WinAPI_MakeQWord( $LoDWORD , $HiDWORD )\n\iReturns a QWORD value from two int values (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_MakeQWord( $LoDWORD , $HiDWORD )"/>
          <Keyword text="_WinAPI_MessageBeep" descr="_WinAPI_MessageBeep( $iType = 1 )\n\iPlays a waveform sound (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_MessageBeep( $iType = 1 )"/>
          <Keyword text="_WinAPI_Mouse_Event" descr="_WinAPI_Mouse_Event( $iFlags , $iX = 0 , $iY = 0 , $iData = 0 , $iExtraInfo = 0 )\n\iSynthesizes mouse motion and button clicks (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_Mouse_Event( $iFlags , $iX = 0 , $iY = 0 , $iData = 0 , $iExtraInfo = 0 )"/>
          <Keyword text="_WinAPI_MoveTo" descr="_WinAPI_MoveTo( $hDC , $iX , $iY )\n\iUpdates the current position to the specified point (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_MoveTo( $hDC , $iX , $iY )"/>
          <Keyword text="_WinAPI_MoveWindow" descr="_WinAPI_MoveWindow( $hWnd , $iX , $iY , $iWidth , $iHeight , $fRepaint = True )\n\iChanges the position and dimensions of the specified window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_MoveWindow( $hWnd , $iX , $iY , $iWidth , $iHeight , $fRepaint = True )"/>
          <Keyword text="_WinAPI_MsgBox" descr="_WinAPI_MsgBox( $iFlags , $sTitle , $sText )\n\iDisplays a message box with wider margin than original (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_MsgBox( $iFlags , $sTitle , $sText )"/>
          <Keyword text="_WinAPI_MulDiv" descr="_WinAPI_MulDiv( $iNumber , $iNumerator , $iDenominator )\n\iMultiplies two 32-bit values and then divides the 64-bit result by a third 32-bit value (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_MulDiv( $iNumber , $iNumerator , $iDenominator )"/>
          <Keyword text="_WinAPI_MultiByteToWideChar" descr="_WinAPI_MultiByteToWideChar( $sText , $iCodePage = 0 , $iFlags = 0 , $bRetString = False )\n\iMaps a character string to a wide-character (Unicode) string (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_MultiByteToWideChar( $sText , $iCodePage = 0 , $iFlags = 0 , $bRetString = False )"/>
          <Keyword text="_WinAPI_MultiByteToWideCharEx" descr="_WinAPI_MultiByteToWideCharEx( $sText , $pText , $iCodePage = 0 , $iFlags = 0 )\n\iMaps a character string to a wide-character (Unicode) string (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_MultiByteToWideCharEx( $sText , $pText , $iCodePage = 0 , $iFlags = 0 )"/>
          <Keyword text="_WinAPI_OpenProcess" descr="_WinAPI_OpenProcess( $iAccess , $fInherit , $iProcessID , $fDebugPriv = False )\n\iReturns a handle of an existing process object (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_OpenProcess( $iAccess , $fInherit , $iProcessID , $fDebugPriv = False )"/>
          <Keyword text="_WinAPI_PathFindOnPath" descr="_WinAPI_PathFindOnPath( $szFile , $aExtraPaths=&quot;&quot; , $szPathDelimiter=@LF )\n\iSearchs for a file in the default system paths (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_PathFindOnPath( $szFile , $aExtraPaths=&quot;&quot; , $szPathDelimiter=@LF )"/>
          <Keyword text="_WinAPI_PointFromRect" descr="_WinAPI_PointFromRect( ByRef $tRect , $fCenter = True )\n\iReturns the top/left coordinates of a $tagRECT as a $tagPOINT structure (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_PointFromRect( ByRef $tRect , $fCenter = True )"/>
          <Keyword text="_WinAPI_PostMessage" descr="_WinAPI_PostMessage( $hWnd , $iMsg , $iwParam , $ilParam )\n\iPlaces a message in the message queue and then returns (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_PostMessage( $hWnd , $iMsg , $iwParam , $ilParam )"/>
          <Keyword text="_WinAPI_PrimaryLangId" descr="_WinAPI_PrimaryLangId( $lgid )\n\iExtract primary language id from a language id (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_PrimaryLangId( $lgid )"/>
          <Keyword text="_WinAPI_PtInRect" descr="_WinAPI_PtInRect( ByRef $tRect , ByRef $tPoint )\n\iDetermines whether the specified point lies within the specified rectangle (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_PtInRect( ByRef $tRect , ByRef $tPoint )"/>
          <Keyword text="_WinAPI_ReadFile" descr="_WinAPI_ReadFile( $hFile , $pBuffer , $iToRead , ByRef $iRead , $pOverlapped = 0 )\n\iReads data from a file (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_ReadFile( $hFile , $pBuffer , $iToRead , ByRef $iRead , $pOverlapped = 0 )"/>
          <Keyword text="_WinAPI_ReadProcessMemory" descr="_WinAPI_ReadProcessMemory( $hProcess , $pBaseAddress , $pBuffer , $iSize , ByRef $iRead )\n\iReads memory in a specified process (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_ReadProcessMemory( $hProcess , $pBaseAddress , $pBuffer , $iSize , ByRef $iRead )"/>
          <Keyword text="_WinAPI_RectIsEmpty" descr="_WinAPI_RectIsEmpty( ByRef $tRect )\n\iDetermins whether a rectangle is empty (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_RectIsEmpty( ByRef $tRect )"/>
          <Keyword text="_WinAPI_RedrawWindow" descr="_WinAPI_RedrawWindow( $hWnd , $tRect = 0 , $hRegion = 0 , $iFlags = 5 )\n\iUpdates the specified rectangle or region in a window&apos;s client area (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_RedrawWindow( $hWnd , $tRect = 0 , $hRegion = 0 , $iFlags = 5 )"/>
          <Keyword text="_WinAPI_RegisterWindowMessage" descr="_WinAPI_RegisterWindowMessage( $sMessage )\n\iDefines a new window message that is guaranteed to be unique throughout the system (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_RegisterWindowMessage( $sMessage )"/>
          <Keyword text="_WinAPI_ReleaseCapture" descr="_WinAPI_ReleaseCapture()\n\iReleases the mouse capture from a window in the current thread and restores normal mouse input processing (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_ReleaseCapture()"/>
          <Keyword text="_WinAPI_ReleaseDC" descr="_WinAPI_ReleaseDC( $hWnd , $hDC )\n\iReleases a device context (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_ReleaseDC( $hWnd , $hDC )"/>
          <Keyword text="_WinAPI_ScreenToClient" descr="_WinAPI_ScreenToClient( $hWnd , ByRef $tPoint )\n\iConverts screen coordinates of a specified point on the screen to client coordinates (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_ScreenToClient( $hWnd , ByRef $tPoint )"/>
          <Keyword text="_WinAPI_SelectObject" descr="_WinAPI_SelectObject( $hDC , $hGDIObj )\n\iSelects an object into the specified device context (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SelectObject( $hDC , $hGDIObj )"/>
          <Keyword text="_WinAPI_SetBkColor" descr="_WinAPI_SetBkColor( $hDC , $iColor )\n\iSets the current background color to the specified color value (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetBkColor( $hDC , $iColor )"/>
          <Keyword text="_WinAPI_SetBkMode" descr="_WinAPI_SetBkMode( $hDC , $iBkMode )\n\iSets the background mix mode of the specified device context (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetBkMode( $hDC , $iBkMode )"/>
          <Keyword text="_WinAPI_SetCapture" descr="_WinAPI_SetCapture( $hWnd )\n\iSets the mouse capture to the specified window belonging to the current thread (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetCapture( $hWnd )"/>
          <Keyword text="_WinAPI_SetCursor" descr="_WinAPI_SetCursor( $hCursor )\n\iEstablishes the cursor shape (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetCursor( $hCursor )"/>
          <Keyword text="_WinAPI_SetDIBits" descr="_WinAPI_SetDIBits( $hDC , $hBmp , $iStartScan , $iScanLines , $pBits , $pBMI , $iColorUse = 0 )\n\iSets the pixels in a compatible bitmap using the color data found in a DIB (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetDIBits( $hDC , $hBmp , $iStartScan , $iScanLines , $pBits , $pBMI , $iColorUse = 0 )"/>
          <Keyword text="_WinAPI_SetDefaultPrinter" descr="_WinAPI_SetDefaultPrinter( $sPrinter )\n\iSets the default printer for the current user on the local computer (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetDefaultPrinter( $sPrinter )"/>
          <Keyword text="_WinAPI_SetEndOfFile" descr="_WinAPI_SetEndOfFile( $hFile )\n\iSets the physical file size for the specified file to the current position of the file pointer. (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetEndOfFile( $hFile )"/>
          <Keyword text="_WinAPI_SetEvent" descr="_WinAPI_SetEvent( $hEvent )\n\iSets the specified event object to the signaled state (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetEvent( $hEvent )"/>
          <Keyword text="_WinAPI_SetFilePointer" descr="_WinAPI_SetFilePointer( $hFile , $iPos , $iMethod = 0 )\n\iMoves the file pointer of the specified file (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetFilePointer( $hFile , $iPos , $iMethod = 0 )"/>
          <Keyword text="_WinAPI_SetFocus" descr="_WinAPI_SetFocus( $hWnd )\n\iSets the keyboard focus to the specified window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetFocus( $hWnd )"/>
          <Keyword text="_WinAPI_SetFont" descr="_WinAPI_SetFont( $hWnd , $hFont , $fRedraw = True )\n\iSets a window font (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetFont( $hWnd , $hFont , $fRedraw = True )"/>
          <Keyword text="_WinAPI_SetHandleInformation" descr="_WinAPI_SetHandleInformation( $hObject , $iMask , $iFlags )\n\iSets certain properties of an object handle (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetHandleInformation( $hObject , $iMask , $iFlags )"/>
          <Keyword text="_WinAPI_SetLastError" descr="_WinAPI_SetLastError( $iErrCode )\n\iSets the last-error code for the calling thread (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetLastError( $iErrCode )"/>
          <Keyword text="_WinAPI_SetLayeredWindowAttributes" descr="_WinAPI_SetLayeredWindowAttributes( $hWnd , $i_transcolor , $Transparency = 255 , $dwFlags = 0x03 , $isColorRef = False )\n\iSets Layered Window Attributes (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetLayeredWindowAttributes( $hWnd , $i_transcolor , $Transparency = 255 , $dwFlags = 0x03 , $isColorRef = False )"/>
          <Keyword text="_WinAPI_SetParent" descr="_WinAPI_SetParent( $hWndChild , $hWndParent )\n\iChanges the parent window of the specified child window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetParent( $hWndChild , $hWndParent )"/>
          <Keyword text="_WinAPI_SetProcessAffinityMask" descr="_WinAPI_SetProcessAffinityMask( $hProcess , $iMask )\n\iSets a processor affinity mask for the threads of a specified process (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetProcessAffinityMask( $hProcess , $iMask )"/>
          <Keyword text="_WinAPI_SetSysColors" descr="_WinAPI_SetSysColors( $vElements , $vColors )\n\iObtains information about the display devices in a system (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetSysColors( $vElements , $vColors )"/>
          <Keyword text="_WinAPI_SetTextColor" descr="_WinAPI_SetTextColor( $hDC , $iColor )\n\iSets the current text color to the specified color value (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetTextColor( $hDC , $iColor )"/>
          <Keyword text="_WinAPI_SetWindowLong" descr="_WinAPI_SetWindowLong( $hWnd , $iIndex , $iValue )\n\iSets information about the specified window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetWindowLong( $hWnd , $iIndex , $iValue )"/>
          <Keyword text="_WinAPI_SetWindowPlacement" descr="_WinAPI_SetWindowPlacement( $hWnd , $pWindowPlacement )\n\iSets the placement of the window for Min, Max, and normal positions (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetWindowPlacement( $hWnd , $pWindowPlacement )"/>
          <Keyword text="_WinAPI_SetWindowPos" descr="_WinAPI_SetWindowPos( $hWnd , $hAfter , $iX , $iY , $iCX , $iCY , $iFlags )\n\iChanges the size, position, and Z order of a child, pop-up, or top-level window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetWindowPos( $hWnd , $hAfter , $iX , $iY , $iCX , $iCY , $iFlags )"/>
          <Keyword text="_WinAPI_SetWindowRgn" descr="_WinAPI_SetWindowRgn( $hWnd , $hRgn , $bRedraw )\n\iSets the window region of a window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetWindowRgn( $hWnd , $hRgn , $bRedraw )"/>
          <Keyword text="_WinAPI_SetWindowText" descr="_WinAPI_SetWindowText( $hWnd , $sText )\n\iChanges the text of the specified window&apos;s title bar (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetWindowText( $hWnd , $sText )"/>
          <Keyword text="_WinAPI_SetWindowsHookEx" descr="_WinAPI_SetWindowsHookEx( $idHook , $lpfn , $hmod , $dwThreadId = 0 )\n\iInstalls an application-defined hook procedure into a hook chain (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SetWindowsHookEx( $idHook , $lpfn , $hmod , $dwThreadId = 0 )"/>
          <Keyword text="_WinAPI_ShowCursor" descr="_WinAPI_ShowCursor( $fShow )\n\iDisplays or hides the cursor (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_ShowCursor( $fShow )"/>
          <Keyword text="_WinAPI_ShowError" descr="_WinAPI_ShowError( $sText , $fExit = True )\n\iDisplays an error message box with an optional exit (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_ShowError( $sText , $fExit = True )"/>
          <Keyword text="_WinAPI_ShowMsg" descr="_WinAPI_ShowMsg( $sText )\n\iDisplays an &quot;Information&quot; message box (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_ShowMsg( $sText )"/>
          <Keyword text="_WinAPI_ShowWindow" descr="_WinAPI_ShowWindow( $hWnd , $iCmdShow = 5 )\n\iSets the specified window&apos;s show state (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_ShowWindow( $hWnd , $iCmdShow = 5 )"/>
          <Keyword text="_WinAPI_StringFromGUID" descr="_WinAPI_StringFromGUID( $pGUID )\n\iConverts a binary GUID to string form (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_StringFromGUID( $pGUID )"/>
          <Keyword text="_WinAPI_StringLenA" descr="_WinAPI_StringLenA( $vString )\n\iCalculates the size of ANSI string (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_StringLenA( $vString )"/>
          <Keyword text="_WinAPI_StringLenW" descr="_WinAPI_StringLenW( $vString )\n\iCalculates the size of wide string (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_StringLenW( $vString )"/>
          <Keyword text="_WinAPI_SubLangId" descr="_WinAPI_SubLangId( $lgid )\n\iExtract sublanguage id from a language id (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SubLangId( $lgid )"/>
          <Keyword text="_WinAPI_SystemParametersInfo" descr="_WinAPI_SystemParametersInfo( $iAction , $iParam = 0 , $vParam = 0 , $iWinIni = 0 )\n\iRetrieves or sets the value of one of the system-wide parameters (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_SystemParametersInfo( $iAction , $iParam = 0 , $vParam = 0 , $iWinIni = 0 )"/>
          <Keyword text="_WinAPI_TwipsPerPixelX" descr="_WinAPI_TwipsPerPixelX()\n\iReturns the width of a pixel, in twips. (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_TwipsPerPixelX()"/>
          <Keyword text="_WinAPI_TwipsPerPixelY" descr="_WinAPI_TwipsPerPixelY()\n\iReturns the height of a pixel, in twips. (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_TwipsPerPixelY()"/>
          <Keyword text="_WinAPI_UnhookWindowsHookEx" descr="_WinAPI_UnhookWindowsHookEx( $hhk )\n\iRemoves a hook procedure installed in a hook chain by the _WinAPI_SetWindowsHookEx function (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_UnhookWindowsHookEx( $hhk )"/>
          <Keyword text="_WinAPI_UpdateLayeredWindow" descr="_WinAPI_UpdateLayeredWindow( $hWnd , $hDCDest , $pPTDest , $pSize , $hDCSrce , $pPTSrce , $iRGB , $pBlend , $iFlags )\n\iUpdates the position, size, shape, content, and translucency of a layered window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_UpdateLayeredWindow( $hWnd , $hDCDest , $pPTDest , $pSize , $hDCSrce , $pPTSrce , $iRGB , $pBlend , $iFlags )"/>
          <Keyword text="_WinAPI_UpdateWindow" descr="_WinAPI_UpdateWindow( $hWnd )\n\iUpdates the client area of a window by sending a WM_PAINT message to the window (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_UpdateWindow( $hWnd )"/>
          <Keyword text="_WinAPI_WaitForInputIdle" descr="_WinAPI_WaitForInputIdle( $hProcess , $iTimeout = -1 )\n\iWaits until a process is waiting for user input with no input pending, or a time out (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_WaitForInputIdle( $hProcess , $iTimeout = -1 )"/>
          <Keyword text="_WinAPI_WaitForMultipleObjects" descr="_WinAPI_WaitForMultipleObjects( $iCount , $pHandles , $fWaitAll = False , $iTimeout = -1 )\n\iWaits until one or all of the specified objects are in the signaled state (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_WaitForMultipleObjects( $iCount , $pHandles , $fWaitAll = False , $iTimeout = -1 )"/>
          <Keyword text="_WinAPI_WaitForSingleObject" descr="_WinAPI_WaitForSingleObject( $hHandle , $iTimeout = -1 )\n\iWaits until the specified object is in the signaled state (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_WaitForSingleObject( $hHandle , $iTimeout = -1 )"/>
          <Keyword text="_WinAPI_WideCharToMultiByte" descr="_WinAPI_WideCharToMultiByte( $pUnicode , $iCodePage = 0 , $bRetString = True )\n\iConverts a Unicode string to a multibyte string (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_WideCharToMultiByte( $pUnicode , $iCodePage = 0 , $bRetString = True )"/>
          <Keyword text="_WinAPI_WindowFromPoint" descr="_WinAPI_WindowFromPoint( ByRef $tPoint )\n\iRetrieves the handle of the window that contains the specified point (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_WindowFromPoint( ByRef $tPoint )"/>
          <Keyword text="_WinAPI_WriteConsole" descr="_WinAPI_WriteConsole( $hConsole , $sText )\n\iWrites a character string to a console screen buffer (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_WriteConsole( $hConsole , $sText )"/>
          <Keyword text="_WinAPI_WriteFile" descr="_WinAPI_WriteFile( $hFile , $pBuffer , $iToWrite , ByRef $iWritten , $pOverlapped = 0 )\n\iWrites data to a file at the position specified by the file pointer (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_WriteFile( $hFile , $pBuffer , $iToWrite , ByRef $iWritten , $pOverlapped = 0 )"/>
          <Keyword text="_WinAPI_WriteProcessMemory" descr="_WinAPI_WriteProcessMemory( $hProcess , $pBaseAddress , $pBuffer , $iSize , ByRef $iWritten , $sBuffer = &quot;ptr&quot; )\n\iWrites memory in a specified process (Requires: #include &lt;WinAPI.au3&gt;)\i0" pattern="_WinAPI_WriteProcessMemory( $hProcess , $pBaseAddress , $pBuffer , $iSize , ByRef $iWritten , $sBuffer = &quot;ptr&quot; )"/>
          <Keyword text="_WinNet_AddConnection" descr="_WinNet_AddConnection( $sLocalName , $sRemoteName , $sPassword = 0 )\n\iConnects a local device to a network resource (Requires: #include &lt;WinNet.au3&gt;)\i0" pattern="_WinNet_AddConnection( $sLocalName , $sRemoteName , $sPassword = 0 )"/>
          <Keyword text="_WinNet_AddConnection2" descr="_WinNet_AddConnection2( $sLocalName , $sRemoteName , $sUserName = 0 , $sPassword = 0 , $iType = 1 , $iOptions = 1 )\n\iConnects a local device to a network resource (Requires: #include &lt;WinNet.au3&gt;)\i0" pattern="_WinNet_AddConnection2( $sLocalName , $sRemoteName , $sUserName = 0 , $sPassword = 0 , $iType = 1 , $iOptions = 1 )"/>
          <Keyword text="_WinNet_AddConnection3" descr="_WinNet_AddConnection3( $hWnd , $sLocalName , $sRemoteName , $sUserName = 0 , $sPassword = 0 , $iType = 1 , $iOptions = 1 )\n\iConnects a local device to a network resource (Requires: #include &lt;WinNet.au3&gt;)\i0" pattern="_WinNet_AddConnection3( $hWnd , $sLocalName , $sRemoteName , $sUserName = 0 , $sPassword = 0 , $iType = 1 , $iOptions = 1 )"/>
          <Keyword text="_WinNet_CancelConnection" descr="_WinNet_CancelConnection( $sName , $fForce = True )\n\iCancels an existing network connection (Requires: #include &lt;WinNet.au3&gt;)\i0" pattern="_WinNet_CancelConnection( $sName , $fForce = True )"/>
          <Keyword text="_WinNet_CancelConnection2" descr="_WinNet_CancelConnection2( $sName , $fUpdate = True , $fForce = True )\n\iCancels an existing network connection (Requires: #include &lt;WinNet.au3&gt;)\i0" pattern="_WinNet_CancelConnection2( $sName , $fUpdate = True , $fForce = True )"/>
          <Keyword text="_WinNet_CloseEnum" descr="_WinNet_CloseEnum( $hEnum )\n\iEnds a network resource enumeration started by a call to WNetOpenEnum (Requires: #include &lt;WinNet.au3&gt;)\i0" pattern="_WinNet_CloseEnum( $hEnum )"/>
          <Keyword text="_WinNet_ConnectionDialog" descr="_WinNet_ConnectionDialog( $hWnd )\n\iStarts a general browsing dialog box for connecting to network resources (Requires: #include &lt;WinNet.au3&gt;)\i0" pattern="_WinNet_ConnectionDialog( $hWnd )"/>
          <Keyword text="_WinNet_ConnectionDialog1" descr="_WinNet_ConnectionDialog1( $hWnd , $sRemoteName = &quot;&quot; , $iFlags = 2 )\n\iStarts a general browsing dialog box for connecting to network resources (Requires: #include &lt;WinNet.au3&gt;)\i0" pattern="_WinNet_ConnectionDialog1( $hWnd , $sRemoteName = &quot;&quot; , $iFlags = 2 )"/>
          <Keyword text="_WinNet_DisconnectDialog" descr="_WinNet_DisconnectDialog( $hWnd )\n\iStarts a general browsing dialog box for disconnecting from network resources (Requires: #include &lt;WinNet.au3&gt;)\i0" pattern="_WinNet_DisconnectDialog( $hWnd )"/>
          <Keyword text="_WinNet_DisconnectDialog1" descr="_WinNet_DisconnectDialog1( $hWnd , $sLocalName , $sRemoteName = &quot;&quot; , $iFlags = 1 )\n\iStarts a general browsing dialog box for disconnecting from network resources (Requires: #include &lt;WinNet.au3&gt;)\i0" pattern="_WinNet_DisconnectDialog1( $hWnd , $sLocalName , $sRemoteName = &quot;&quot; , $iFlags = 1 )"/>
          <Keyword text="_WinNet_EnumResource" descr="_WinNet_EnumResource( $hEnum , ByRef $iCount , $pBuffer , ByRef $iBufSize )\n\iContinues an enumeration of network resources (Requires: #include &lt;WinNet.au3&gt;)\i0" pattern="_WinNet_EnumResource( $hEnum , ByRef $iCount , $pBuffer , ByRef $iBufSize )"/>
          <Keyword text="_WinNet_GetConnection" descr="_WinNet_GetConnection( $sLocalName )\n\iRetrieves the name of the network resource associated with a local device (Requires: #include &lt;WinNet.au3&gt;)\i0" pattern="_WinNet_GetConnection( $sLocalName )"/>
          <Keyword text="_WinNet_GetConnectionPerformance" descr="_WinNet_GetConnectionPerformance( $sLocalName , $sRemoteName )\n\iReturns information about the performance of a network connection resource (Requires: #include &lt;WinNet.au3&gt;)\i0" pattern="_WinNet_GetConnectionPerformance( $sLocalName , $sRemoteName )"/>
          <Keyword text="_WinNet_GetLastError" descr="_WinNet_GetLastError( ByRef $iError , ByRef $sError , ByRef $sName )\n\iRetrieves the most recent extended error (Requires: #include &lt;WinNet.au3&gt;)\i0" pattern="_WinNet_GetLastError( ByRef $iError , ByRef $sError , ByRef $sName )"/>
          <Keyword text="_WinNet_GetNetworkInformation" descr="_WinNet_GetNetworkInformation( $sName )\n\iReturns extended information about a specific network provider (Requires: #include &lt;WinNet.au3&gt;)\i0" pattern="_WinNet_GetNetworkInformation( $sName )"/>
          <Keyword text="_WinNet_GetProviderName" descr="_WinNet_GetProviderName( $iType )\n\iObtains the provider name for a specific type of network (Requires: #include &lt;WinNet.au3&gt;)\i0" pattern="_WinNet_GetProviderName( $iType )"/>
          <Keyword text="_WinNet_GetResourceInformation" descr="_WinNet_GetResourceInformation( $sRemoteName , $sProvider = &quot;&quot; , $iType = 0 )\n\iIdentifies the network provider that owns the resource (Requires: #include &lt;WinNet.au3&gt;)\i0" pattern="_WinNet_GetResourceInformation( $sRemoteName , $sProvider = &quot;&quot; , $iType = 0 )"/>
          <Keyword text="_WinNet_GetResourceParent" descr="_WinNet_GetResourceParent( $sRemoteName , $sProvider , $iType = 0 )\n\iReturns the parent of a network resource in the network browse hierarchy (Requires: #include &lt;WinNet.au3&gt;)\i0" pattern="_WinNet_GetResourceParent( $sRemoteName , $sProvider , $iType = 0 )"/>
          <Keyword text="_WinNet_GetUniversalName" descr="_WinNet_GetUniversalName( $sLocalPath )\n\iConverts drived based path to universal form (Requires: #include &lt;WinNet.au3&gt;)\i0" pattern="_WinNet_GetUniversalName( $sLocalPath )"/>
          <Keyword text="_WinNet_GetUser" descr="_WinNet_GetUser( $sName )\n\iRetrieves the default user name, or the user name used to establish a connection (Requires: #include &lt;WinNet.au3&gt;)\i0" pattern="_WinNet_GetUser( $sName )"/>
          <Keyword text="_WinNet_OpenEnum" descr="_WinNet_OpenEnum( $iScope , $iType , $iUsage , $pResource , ByRef $hEnum )\n\iStarts an enumeration of network resources or existing connections (Requires: #include &lt;WinNet.au3&gt;)\i0" pattern="_WinNet_OpenEnum( $iScope , $iType , $iUsage , $pResource , ByRef $hEnum )"/>
          <Keyword text="_WinNet_RestoreConnection" descr="_WinNet_RestoreConnection( $sDevice = &quot;&quot; , $hWnd = 0 , $fUseUI = True )\n\iRestores the connection to a network resource (Requires: #include &lt;WinNet.au3&gt;)\i0" pattern="_WinNet_RestoreConnection( $sDevice = &quot;&quot; , $hWnd = 0 , $fUseUI = True )"/>
          <Keyword text="_WinNet_UseConnection" descr="_WinNet_UseConnection( $hWnd , $sLocalName , $sRemoteName , $sUserName = 0 , $sPassword = 0 , $iType = 1 , $iOptions = 1 )\n\iConnects a local device to a network resource (Requires: #include &lt;WinNet.au3&gt;)\i0" pattern="_WinNet_UseConnection( $hWnd , $sLocalName , $sRemoteName , $sUserName = 0 , $sPassword = 0 , $iType = 1 , $iOptions = 1 )"/>
          <Keyword text="_WordAttach" descr="_WordAttach( $s_string , $s_mode = &quot;FilePath&quot; )\n\iAttach to the first existing instance of Microsoft Word where the search string matches based on the selected mode. (Requires: #include &lt;Word.au3&gt; )\i0" pattern="_WordAttach( $s_string , $s_mode = &quot;FilePath&quot; )"/>
          <Keyword text="_WordCreate" descr="_WordCreate( $s_FilePath = &quot;&quot; , $b_tryAttach = 0 , $b_visible = 1 , $b_takeFocus = 1 )\n\iCreate a Microsoft Office Word Object (Requires: #include &lt;Word.au3&gt; )\i0" pattern="_WordCreate( $s_FilePath = &quot;&quot; , $b_tryAttach = 0 , $b_visible = 1 , $b_takeFocus = 1 )"/>
          <Keyword text="_WordDocAdd" descr="_WordDocAdd( ByRef $o_object , $i_DocumentType = 0 , $s_Template = &quot;&quot; , $b_NewTemplate = 0 )\n\iReturns an object variable representing a new empty document (Requires: #include &lt;Word.au3&gt; )\i0" pattern="_WordDocAdd( ByRef $o_object , $i_DocumentType = 0 , $s_Template = &quot;&quot; , $b_NewTemplate = 0 )"/>
          <Keyword text="_WordDocAddLink" descr="_WordDocAddLink( ByRef $o_object , $o_Anchor = &quot;&quot; , $s_Address = &quot;&quot; , $s_SubAddress = &quot;&quot; , $s_ScreenTip = &quot;&quot; , $s_TextToDisplay = &quot;&quot; , $s_Target = &quot;&quot; )\n\iAdd a hyperlink to the document (Requires: #include &lt;Word.au3&gt; )\i0" pattern="_WordDocAddLink( ByRef $o_object , $o_Anchor = &quot;&quot; , $s_Address = &quot;&quot; , $s_SubAddress = &quot;&quot; , $s_ScreenTip = &quot;&quot; , $s_TextToDisplay = &quot;&quot; , $s_Target = &quot;&quot; )"/>
          <Keyword text="_WordDocAddPicture" descr="_WordDocAddPicture( ByRef $o_object , $s_FilePath , $b_LinkToFile = 0 , $b_SaveWithDocument = 0 , $o_Range = &quot;&quot; )\n\iAdd a picture to the document (Requires: #include &lt;Word.au3&gt; )\i0" pattern="_WordDocAddPicture( ByRef $o_object , $s_FilePath , $b_LinkToFile = 0 , $b_SaveWithDocument = 0 , $o_Range = &quot;&quot; )"/>
          <Keyword text="_WordDocClose" descr="_WordDocClose( ByRef $o_object , $i_SaveChanges = -2 , $i_OriginalFormat = 2 , $b_RouteDocument = 0 )\n\iCloses a previously opened word document (Requires: #include &lt;Word.au3&gt; )\i0" pattern="_WordDocClose( ByRef $o_object , $i_SaveChanges = -2 , $i_OriginalFormat = 2 , $b_RouteDocument = 0 )"/>
          <Keyword text="_WordDocFindReplace" descr="_WordDocFindReplace( ByRef $o_object , $s_FindText = &quot;&quot; , $s_ReplaceWith = &quot;&quot; , $i_Replace = 2 , $v_SearchRange = 0 , $b_MatchCase = 0 , $b_MatchWholeWord = 0 , $b_MatchWildcards = 0 , $b_MatchSoundsLike = 0 , $b_MatchAllWordForms = 0 , $b_Forward = 1 , $i_Wrap = 1 , $b_Format = 0 )\n\iRuns the specified find and replace operation. (Requires: #include &lt;Word.au3&gt; )\i0" pattern="_WordDocFindReplace( ByRef $o_object , $s_FindText = &quot;&quot; , $s_ReplaceWith = &quot;&quot; , $i_Replace = 2 , $v_SearchRange = 0 , $b_MatchCase = 0 , $b_MatchWholeWord = 0 , $b_MatchWildcards = 0 , $b_MatchSoundsLike = 0 , $b_MatchAllWordForms = 0 , $b_Forward = 1 , $i_Wrap = 1 , $b_Format = 0 )"/>
          <Keyword text="_WordDocGetCollection" descr="_WordDocGetCollection( ByRef $o_object , $v_index = -1 )\n\iReturns a collection object containing all documents (Requires: #include &lt;Word.au3&gt; )\i0" pattern="_WordDocGetCollection( ByRef $o_object , $v_index = -1 )"/>
          <Keyword text="_WordDocLinkGetCollection" descr="_WordDocLinkGetCollection( ByRef $o_object , $i_index = -1 )\n\iReturns a collection object containing all links in the document (Requires: #include &lt;Word.au3&gt; )\i0" pattern="_WordDocLinkGetCollection( ByRef $o_object , $i_index = -1 )"/>
          <Keyword text="_WordDocOpen" descr="_WordDocOpen( ByRef $o_object , $s_FilePath , $b_ConfirmConversions = 0 , $i_Format = 0 , $b_ReadOnly = 0 , $b_Revert = 0 , $b_AddToRecentFiles = 0 , $s_PasswordDocument = &quot;&quot; , $s_WritePasswordDocument = &quot;&quot; )\n\iOpens an existing Microsoft Word Document (Requires: #include &lt;Word.au3&gt; )\i0" pattern="_WordDocOpen( ByRef $o_object , $s_FilePath , $b_ConfirmConversions = 0 , $i_Format = 0 , $b_ReadOnly = 0 , $b_Revert = 0 , $b_AddToRecentFiles = 0 , $s_PasswordDocument = &quot;&quot; , $s_WritePasswordDocument = &quot;&quot; )"/>
          <Keyword text="_WordDocPrint" descr="_WordDocPrint( ByRef $o_object , $b_Background = 0 , $i_Copies = 1 , $i_Orientation = -1 , $b_Collate = 1 , $s_Printer = &quot;&quot; , $i_Range = 0 , $i_From = &quot;&quot; , $i_To = &quot;&quot; , $s_Pages = &quot;&quot; , $i_PageType = 0 , $i_Item = 0 )\n\iPrints all or part of the specified document. (Requires: #include &lt;Word.au3&gt; )\i0" pattern="_WordDocPrint( ByRef $o_object , $b_Background = 0 , $i_Copies = 1 , $i_Orientation = -1 , $b_Collate = 1 , $s_Printer = &quot;&quot; , $i_Range = 0 , $i_From = &quot;&quot; , $i_To = &quot;&quot; , $s_Pages = &quot;&quot; , $i_PageType = 0 , $i_Item = 0 )"/>
          <Keyword text="_WordDocPropertyGet" descr="_WordDocPropertyGet( ByRef $o_object , $v_property )\n\iReturns a select property of the Word Document. (Requires: #include &lt;Word.au3&gt;)\i0" pattern="_WordDocPropertyGet( ByRef $o_object , $v_property )"/>
          <Keyword text="_WordDocPropertySet" descr="_WordDocPropertySet( ByRef $o_object , $v_property , $v_newvalue )\n\iSet a select property of the Word Document (Requires: #include &lt;Word.au3&gt; )\i0" pattern="_WordDocPropertySet( ByRef $o_object , $v_property , $v_newvalue )"/>
          <Keyword text="_WordDocSave" descr="_WordDocSave( $o_object )\n\iSaves a previously opened document (Requires: #include &lt;Word.au3&gt; )\i0" pattern="_WordDocSave( $o_object )"/>
          <Keyword text="_WordDocSaveAs" descr="_WordDocSaveAs( ByRef $o_object , $s_FilePath = &quot;&quot; , $i_Format = 0 , $b_ReadOnlyRecommended = 0 , $b_AddToRecentFiles = 0 , $b_LockComments = 0 , $s_Password = &quot;&quot; , $s_WritePassword = &quot;&quot; )\n\iSaves the specified document with a new name or format. (Requires: #include &lt;Word.au3&gt; )\i0" pattern="_WordDocSaveAs( ByRef $o_object , $s_FilePath = &quot;&quot; , $i_Format = 0 , $b_ReadOnlyRecommended = 0 , $b_AddToRecentFiles = 0 , $b_LockComments = 0 , $s_Password = &quot;&quot; , $s_WritePassword = &quot;&quot; )"/>
          <Keyword text="_WordErrorHandlerDeRegister" descr="_WordErrorHandlerDeRegister()\n\iDisable a registered user COM error handler (Requires: #include &lt;Word.au3&gt; )\i0" pattern="_WordErrorHandlerDeRegister()"/>
          <Keyword text="_WordErrorHandlerRegister" descr="_WordErrorHandlerRegister( $s_functionName = &quot;__WordInternalErrorHandler&quot; )\n\iRegister and enable a user COM error handler (Requires: #include &lt;Word.au3&gt; )\i0" pattern="_WordErrorHandlerRegister( $s_functionName = &quot;__WordInternalErrorHandler&quot; )"/>
          <Keyword text="_WordErrorNotify" descr="_WordErrorNotify( $f_notify = -1 )\n\iSpecifies whether Word.au3 automatically notifies of Warnings and Errors (to the console) (Requires: #include &lt;Word.au3&gt; )\i0" pattern="_WordErrorNotify( $f_notify = -1 )"/>
          <Keyword text="_WordMacroRun" descr="_WordMacroRun( $o_object , $s_MacroName , $v_Arg1 , $v_Arg&lt;i&gt;n&lt;/i&gt; , $v_Arg30 )\n\iRuns a Visual Basic macro (Requires: #include &lt;Word.au3&gt;)\i0" pattern="_WordMacroRun( $o_object , $s_MacroName , $v_Arg1 , $v_Arg&lt;i&gt;n&lt;/i&gt; , $v_Arg30 )"/>
          <Keyword text="_WordPropertyGet" descr="_WordPropertyGet( ByRef $o_object , $s_property )\n\iReturns a select property of the Word Application. (Requires: #include &lt;Word.au3&gt; )\i0" pattern="_WordPropertyGet( ByRef $o_object , $s_property )"/>
          <Keyword text="_WordPropertySet" descr="_WordPropertySet( ByRef $o_object , $s_property , $v_newvalue )\n\iSet a select property of the Word Application. (Requires: #include &lt;Word.au3&gt; )\i0" pattern="_WordPropertySet( ByRef $o_object , $s_property , $v_newvalue )"/>
          <Keyword text="_WordQuit" descr="_WordQuit( ByRef $o_object , $i_SaveChanges = -2 , $i_OriginalFormat = 1 , $b_RouteDocument = 0 )\n\iClose the window and remove the object reference to it (Requires: #include &lt;Word.au3&gt; )\i0" pattern="_WordQuit( ByRef $o_object , $i_SaveChanges = -2 , $i_OriginalFormat = 1 , $b_RouteDocument = 0 )"/>
          <Keyword text="_Word_VersionInfo" descr="_Word_VersionInfo()\n\iReturns an array of information about the Word.au3 version (Requires: #include &lt;Word.au3&gt; )\i0" pattern="_Word_VersionInfo()"/>
          <Keyword text="_viClose" descr="_viClose( $h_session )\n\iCloses a VISA connection to an Instrument/Device (Requires: #include &lt;Visa.au3&gt;)\i0" pattern="_viClose( $h_session )"/>
          <Keyword text="_viExecCommand" descr="_viExecCommand( $h_session , $s_command , $i_timeout_ms = -1 )\n\iSend a Command/Query to an Instrument/Device through the VISA interface (GPIB / TCP) (Requires: #include &lt;Visa.au3&gt;)\i0" pattern="_viExecCommand( $h_session , $s_command , $i_timeout_ms = -1 )"/>
          <Keyword text="_viFindGpib" descr="_viFindGpib( ByRef $a_descriptor_list , ByRef $a_idn_list , $f_show_search_results = 0 )\n\iSend a Command/Query to an Instrument/Device through the VISA interface (GPIB / TCP) (Requires: #include &lt;Visa.au3&gt;)\i0" pattern="_viFindGpib( ByRef $a_descriptor_list , ByRef $a_idn_list , $f_show_search_results = 0 )"/>
          <Keyword text="_viGTL" descr="_viGTL( $h_session )\n\iGo To Local mode: Instruments that accept this command will exit the &quot;Remote Control mode&quot; and go to &quot;Local mode&quot;. If the instrument is already in &quot;Local mode&quot; this is simply ignored. Normally, if an instrument does not support this command it will simply stay in the &quot;Remote Control mode&quot; (Requires: #include &lt;Visa.au3&gt;)\i0" pattern="_viGTL( $h_session )"/>
          <Keyword text="_viGpibBusReset" descr="_viGpibBusReset()\n\iGPIB BUS &quot;reset&quot;: Use this function when the GPIB BUS gets stuck for some reason. You might be lucky and resolve the problem by calling this function (Requires: #include &lt;Visa.au3&gt;)\i0" pattern="_viGpibBusReset()"/>
          <Keyword text="_viInteractiveControl" descr="_viInteractiveControl( $s_command_save_filename = &quot;&quot; )\n\iInteractive VISA control to test your SCPI commands. (Requires: #include &lt;Visa.au3&gt;)\i0" pattern="_viInteractiveControl( $s_command_save_filename = &quot;&quot; )"/>
          <Keyword text="_viOpen" descr="_viOpen( $s_visa_address , $s_visa_secondary_address = 0 )\n\iOpens a VISA connection to an Instrument/Device (Requires: #include &lt;Visa.au3&gt;)\i0" pattern="_viOpen( $s_visa_address , $s_visa_secondary_address = 0 )"/>
          <Keyword text="_viSetAttribute" descr="_viSetAttribute( $h_session , $i_attribute , $i_value )\n\iSet any VISA attribute This function, which is called by _viSetTimeout, can ALSO be used to set the other VISA specific attributes. Read the VISA documentation for more information and a list of VISA attributes and their corresponding values. (Requires: #include &lt;Visa.au3&gt;)\i0" pattern="_viSetAttribute( $h_session , $i_attribute , $i_value )"/>
          <Keyword text="_viSetTimeout" descr="_viSetTimeout( $h_session , $i_timeout_ms )\n\iSets the VISA timeout in MILISECONDS (Requires: #include &lt;Visa.au3&gt;)\i0" pattern="_viSetTimeout( $h_session , $i_timeout_ms )"/>
        </Keywords>
      </Style>
      <Style id="macros" name="Macros" image="13" clr="Keyword5" bkclr="#FFFFFFFF">
        <Blocks>
          <Block open="@" close=""/>
        </Blocks>
      </Style>
      <Style name="Macro Keywords" bold="1" italic="0" underline="0" clr="#FFFFFFFF" bkclr="#FFFFFFFF" abstract="true">
        <Containers>
          <Open id="macros"/>
        </Containers>
        <Keywords>
          <Keyword text="AppDataCommonDir"/>
          <Keyword text="AppDataDir"/>
          <Keyword text="AutoItExe"/>
          <Keyword text="AutoItPID"/>
          <Keyword text="AutoItVersion"/>
          <Keyword text="AutoItX64"/>
          <Keyword text="CommonFilesDir"/>
          <Keyword text="Compiled"/>
          <Keyword text="ComputerName"/>
          <Keyword text="ComSpec"/>
          <Keyword text="COM_EventObj"/>
          <Keyword text="CPUArch"/>
          <Keyword text="CR"/>
          <Keyword text="CRLF"/>
          <Keyword text="DesktopCommonDir"/>
          <Keyword text="DesktopDepth"/>
          <Keyword text="DesktopDir"/>
          <Keyword text="DesktopHeight"/>
          <Keyword text="DesktopRefresh"/>
          <Keyword text="DesktopWidth"/>
          <Keyword text="DocumentsCommonDir"/>
          <Keyword text="error"/>
          <Keyword text="exitCode"/>
          <Keyword text="exitMethod"/>
          <Keyword text="extended"/>
          <Keyword text="FavoritesCommonDir"/>
          <Keyword text="FavoritesDir"/>
          <Keyword text="GUI_CtrlHandle"/>
          <Keyword text="GUI_CtrlId"/>
          <Keyword text="GUI_DragFile"/>
          <Keyword text="GUI_DragId"/>
          <Keyword text="GUI_DropId"/>
          <Keyword text="GUI_WinHandle"/>
          <Keyword text="HomeDrive"/>
          <Keyword text="HomePath"/>
          <Keyword text="HomeShare"/>
          <Keyword text="HotKeyPressed"/>
          <Keyword text="HOUR"/>
          <Keyword text="IPAddress1"/>
          <Keyword text="IPAddress2"/>
          <Keyword text="IPAddress3"/>
          <Keyword text="IPAddress4"/>
          <Keyword text="KBLayout"/>
          <Keyword text="LF"/>
          <Keyword text="LogonDNSDomain"/>
          <Keyword text="LogonDomain"/>
          <Keyword text="LogonServer"/>
          <Keyword text="MDAY"/>
          <Keyword text="MIN"/>
          <Keyword text="MON"/>
          <Keyword text="MSEC"/>
          <Keyword text="MUILang"/>
          <Keyword text="MyDocumentsDir"/>
          <Keyword text="NumParams"/>
          <Keyword text="OSArch"/>
          <Keyword text="OSBuild"/>
          <Keyword text="OSLang"/>
          <Keyword text="OSServicePack"/>
          <Keyword text="OSType"/>
          <Keyword text="OSVersion"/>
          <Keyword text="ProgramFilesDir"/>
          <Keyword text="ProgramsCommonDir"/>
          <Keyword text="ProgramsDir"/>
          <Keyword text="ScriptDir"/>
          <Keyword text="ScriptFullPath"/>
          <Keyword text="ScriptLineNumber"/>
          <Keyword text="ScriptName"/>
          <Keyword text="SEC"/>
          <Keyword text="StartMenuCommonDir"/>
          <Keyword text="StartMenuDir"/>
          <Keyword text="StartupCommonDir"/>
          <Keyword text="StartupDir"/>
          <Keyword text="SW_DISABLE"/>
          <Keyword text="SW_ENABLE"/>
          <Keyword text="SW_HIDE"/>
          <Keyword text="SW_LOCK"/>
          <Keyword text="SW_MAXIMIZE"/>
          <Keyword text="SW_MINIMIZE"/>
          <Keyword text="SW_RESTORE"/>
          <Keyword text="SW_SHOW"/>
          <Keyword text="SW_SHOWDEFAULT"/>
          <Keyword text="SW_SHOWMAXIMIZED"/>
          <Keyword text="SW_SHOWMINIMIZED"/>
          <Keyword text="SW_SHOWMINNOACTIVE"/>
          <Keyword text="SW_SHOWNA"/>
          <Keyword text="SW_SHOWNOACTIVATE"/>
          <Keyword text="SW_SHOWNORMAL"/>
          <Keyword text="SW_UNLOCK"/>
          <Keyword text="SystemDir"/>
          <Keyword text="TAB"/>
          <Keyword text="TempDir"/>
          <Keyword text="TrayIconFlashing"/>
          <Keyword text="TrayIconVisible"/>
          <Keyword text="Tray_ID"/>
          <Keyword text="UserName"/>
          <Keyword text="UserProfileDir"/>
          <Keyword text="WDAY"/>
          <Keyword text="WindowsDir"/>
          <Keyword text="WorkingDir"/>
          <Keyword text="YDAY"/>
          <Keyword text="YEAR"/>
        </Keywords>
      </Style>
    </STYLES>
  </SYNTAX>
</XMLConfigSettings>
